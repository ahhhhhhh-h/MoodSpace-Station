{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  Tokenizer\n} = require('@nlpjs/core');\nconst {\n  tokenize\n} = require('./korean-tokenizer');\nclass TokenizerKo extends Tokenizer {\n  constructor(container, shouldTokenize) {\n    super(container, shouldTokenize);\n    this.name = 'tokenizer-ko';\n  }\n  isHangulChar(ch) {\n    const regex = /[\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/g;\n    return regex.test(ch);\n  }\n  clean(text) {\n    const tokens = text.split(/[\\s,.!?;:([\\]'\"¡¿)/]+/).filter(x => x);\n    const result = [];\n    for (let i = 0; i < tokens.length; i += 1) {\n      const token = tokens[i];\n      let word = token[0];\n      let isHangul = this.isHangulChar(word);\n      for (let j = 1; j < token.length; j += 1) {\n        const char = token[j];\n        const newIsHangul = this.isHangulChar(char);\n        if (newIsHangul !== isHangul) {\n          result.push(word);\n          word = char;\n          isHangul = newIsHangul;\n        } else {\n          word += char;\n        }\n      }\n      result.push(word);\n    }\n    return result.join(' ');\n  }\n  innerTokenize(text) {\n    const tokens = tokenize(this.clean(text));\n    const trimmed = tokens.map(x => x.trim());\n    const filtered = trimmed.filter(x => x);\n    return filtered;\n  }\n}\nmodule.exports = TokenizerKo;","map":{"version":3,"names":["Tokenizer","require","tokenize","TokenizerKo","constructor","container","shouldTokenize","name","isHangulChar","ch","regex","test","clean","text","tokens","split","filter","x","result","i","length","token","word","isHangul","j","char","newIsHangul","push","join","innerTokenize","trimmed","map","trim","filtered","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/lang-ko/src/tokenizer-ko.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { Tokenizer } = require('@nlpjs/core');\nconst { tokenize } = require('./korean-tokenizer');\n\nclass TokenizerKo extends Tokenizer {\n  constructor(container, shouldTokenize) {\n    super(container, shouldTokenize);\n    this.name = 'tokenizer-ko';\n  }\n\n  isHangulChar(ch) {\n    const regex =\n      /[\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/g;\n    return regex.test(ch);\n  }\n\n  clean(text) {\n    const tokens = text.split(/[\\s,.!?;:([\\]'\"¡¿)/]+/).filter((x) => x);\n    const result = [];\n    for (let i = 0; i < tokens.length; i += 1) {\n      const token = tokens[i];\n      let word = token[0];\n      let isHangul = this.isHangulChar(word);\n      for (let j = 1; j < token.length; j += 1) {\n        const char = token[j];\n        const newIsHangul = this.isHangulChar(char);\n        if (newIsHangul !== isHangul) {\n          result.push(word);\n          word = char;\n          isHangul = newIsHangul;\n        } else {\n          word += char;\n        }\n      }\n      result.push(word);\n    }\n    return result.join(' ');\n  }\n\n  innerTokenize(text) {\n    const tokens = tokenize(this.clean(text));\n    const trimmed = tokens.map((x) => x.trim());\n    const filtered = trimmed.filter((x) => x);\n    return filtered;\n  }\n}\n\nmodule.exports = TokenizerKo;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC5C,MAAM;EAAEC;AAAS,CAAC,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAElD,MAAME,WAAW,SAASH,SAAS,CAAC;EAClCI,WAAWA,CAACC,SAAS,EAAEC,cAAc,EAAE;IACrC,KAAK,CAACD,SAAS,EAAEC,cAAc,CAAC;IAChC,IAAI,CAACC,IAAI,GAAG,cAAc;EAC5B;EAEAC,YAAYA,CAACC,EAAE,EAAE;IACf,MAAMC,KAAK,GACT,0LAA0L;IAC5L,OAAOA,KAAK,CAACC,IAAI,CAACF,EAAE,CAAC;EACvB;EAEAG,KAAKA,CAACC,IAAI,EAAE;IACV,MAAMC,MAAM,GAAGD,IAAI,CAACE,KAAK,CAAC,uBAAuB,CAAC,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC;IACnE,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACM,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACzC,MAAME,KAAK,GAAGP,MAAM,CAACK,CAAC,CAAC;MACvB,IAAIG,IAAI,GAAGD,KAAK,CAAC,CAAC,CAAC;MACnB,IAAIE,QAAQ,GAAG,IAAI,CAACf,YAAY,CAACc,IAAI,CAAC;MACtC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACD,MAAM,EAAEI,CAAC,IAAI,CAAC,EAAE;QACxC,MAAMC,IAAI,GAAGJ,KAAK,CAACG,CAAC,CAAC;QACrB,MAAME,WAAW,GAAG,IAAI,CAAClB,YAAY,CAACiB,IAAI,CAAC;QAC3C,IAAIC,WAAW,KAAKH,QAAQ,EAAE;UAC5BL,MAAM,CAACS,IAAI,CAACL,IAAI,CAAC;UACjBA,IAAI,GAAGG,IAAI;UACXF,QAAQ,GAAGG,WAAW;QACxB,CAAC,MAAM;UACLJ,IAAI,IAAIG,IAAI;QACd;MACF;MACAP,MAAM,CAACS,IAAI,CAACL,IAAI,CAAC;IACnB;IACA,OAAOJ,MAAM,CAACU,IAAI,CAAC,GAAG,CAAC;EACzB;EAEAC,aAAaA,CAAChB,IAAI,EAAE;IAClB,MAAMC,MAAM,GAAGZ,QAAQ,CAAC,IAAI,CAACU,KAAK,CAACC,IAAI,CAAC,CAAC;IACzC,MAAMiB,OAAO,GAAGhB,MAAM,CAACiB,GAAG,CAAEd,CAAC,IAAKA,CAAC,CAACe,IAAI,CAAC,CAAC,CAAC;IAC3C,MAAMC,QAAQ,GAAGH,OAAO,CAACd,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC;IACzC,OAAOgB,QAAQ;EACjB;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGhC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}