{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nclass XTableUtils {\n  /**\n   * Indicates the index of a given alpha character.\n   * @param {Character} c Character to be checked.\n   * @returns Index of the character, -1 if is invalid.\n   */\n  static alphaIndex(c) {\n    return XTableUtils.alphachars.indexOf(c);\n  }\n\n  /**\n   * Indicates if the given character is a valid Alpha.\n   * @param {Character} c Character to be checked.\n   * @returns {Boolean} True if the character is a valid alpha, false otherwise.\n   */\n  static isAlphaChar(c) {\n    return XTableUtils.alphaIndex(c) !== -1;\n  }\n\n  /**\n   * Converts an alpha from excel to its number equivalent.\n   * @param {String} alpha Alpha representation, example: 'AB'. Is the format\n   *                       for naming columns in Excel.\n   * @returns {Number} Alpha in number format.\n   */\n  static alpha2number(alpha) {\n    let result = 0;\n    const alphalength = XTableUtils.alphachars.length;\n    for (let i = 0, l = alpha.length; i < l; i += 1) {\n      if (i > 0) {\n        result += 1;\n      }\n      const current = XTableUtils.alphaIndex(alpha[i]);\n      if (current === -1) {\n        throw new Error('Invalid alpha');\n      }\n      result = result * alphalength + current;\n    }\n    return result;\n  }\n\n  /**\n   * Given a decimal number, transform it to alpha format.\n   * @param {Number} n Number in decimal format.\n   * @return {String} Number in alpha format.\n   */\n  static number2alpha(n) {\n    if (!Number.isInteger(n)) {\n      throw new Error('Invalid number');\n    }\n    if (n < 0) {\n      throw new Error('Number cannot be negative');\n    }\n    const alphalength = XTableUtils.alphachars.length;\n    if (n < alphalength) {\n      return XTableUtils.alphachars[n];\n    }\n    let result = '';\n    let x = n;\n    while (x >= 0) {\n      const currentMod = x % alphalength;\n      const currentValue = XTableUtils.alphachars[currentMod];\n      result = currentValue + result;\n      x = (x - currentMod) / alphalength - 1;\n    }\n    return result;\n  }\n\n  /**\n   * Given an excel coordinate (example: 'BC123') transform it\n   * to decimal coordinates.\n   * @param {String} str Excel coordinate.\n   * @returns {Object} Coordinate in format { column: ..., row: ...}\n   */\n  static excel2coord(str) {\n    const l = str.length;\n    let index = 0;\n    let alpha = '';\n    let numeric = '';\n    while (index < l && XTableUtils.isAlphaChar(str[index])) {\n      alpha += str[index];\n      index += 1;\n    }\n    while (index < l) {\n      numeric += str[index];\n      index += 1;\n    }\n    return {\n      column: XTableUtils.alpha2number(alpha),\n      row: Number.parseInt(numeric, 10) - 1\n    };\n  }\n\n  /**\n   * Decimal coordinate to excel coordinate.\n   * @param {Object} coord Decimal coordinate in format { column: ..., row: ...}\n   * @returns {String} Excel coordinate.\n   */\n  static coord2excel(coord) {\n    return XTableUtils.number2alpha(coord.column) + (coord.row + 1);\n  }\n\n  /**\n   * Transform an excel range to a decimal range.\n   * @param {*} str\n   */\n  static excel2range(str) {\n    const index = str.indexOf(':');\n    if (index === -1) {\n      throw new Error('Invalid excel range');\n    }\n    return {\n      topleft: XTableUtils.excel2coord(str.substring(0, index)),\n      bottomright: XTableUtils.excel2coord(str.substring(index + 1, str.length))\n    };\n  }\n}\nXTableUtils.alphachars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nmodule.exports = XTableUtils;","map":{"version":3,"names":["XTableUtils","alphaIndex","c","alphachars","indexOf","isAlphaChar","alpha2number","alpha","result","alphalength","length","i","l","current","Error","number2alpha","n","Number","isInteger","x","currentMod","currentValue","excel2coord","str","index","numeric","column","row","parseInt","coord2excel","coord","excel2range","topleft","substring","bottomright","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/xtables/src/xtable-utils.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nclass XTableUtils {\n  /**\n   * Indicates the index of a given alpha character.\n   * @param {Character} c Character to be checked.\n   * @returns Index of the character, -1 if is invalid.\n   */\n  static alphaIndex(c) {\n    return XTableUtils.alphachars.indexOf(c);\n  }\n\n  /**\n   * Indicates if the given character is a valid Alpha.\n   * @param {Character} c Character to be checked.\n   * @returns {Boolean} True if the character is a valid alpha, false otherwise.\n   */\n  static isAlphaChar(c) {\n    return XTableUtils.alphaIndex(c) !== -1;\n  }\n\n  /**\n   * Converts an alpha from excel to its number equivalent.\n   * @param {String} alpha Alpha representation, example: 'AB'. Is the format\n   *                       for naming columns in Excel.\n   * @returns {Number} Alpha in number format.\n   */\n  static alpha2number(alpha) {\n    let result = 0;\n    const alphalength = XTableUtils.alphachars.length;\n    for (let i = 0, l = alpha.length; i < l; i += 1) {\n      if (i > 0) {\n        result += 1;\n      }\n      const current = XTableUtils.alphaIndex(alpha[i]);\n      if (current === -1) {\n        throw new Error('Invalid alpha');\n      }\n      result = result * alphalength + current;\n    }\n    return result;\n  }\n\n  /**\n   * Given a decimal number, transform it to alpha format.\n   * @param {Number} n Number in decimal format.\n   * @return {String} Number in alpha format.\n   */\n  static number2alpha(n) {\n    if (!Number.isInteger(n)) {\n      throw new Error('Invalid number');\n    }\n    if (n < 0) {\n      throw new Error('Number cannot be negative');\n    }\n    const alphalength = XTableUtils.alphachars.length;\n    if (n < alphalength) {\n      return XTableUtils.alphachars[n];\n    }\n    let result = '';\n    let x = n;\n    while (x >= 0) {\n      const currentMod = x % alphalength;\n      const currentValue = XTableUtils.alphachars[currentMod];\n      result = currentValue + result;\n      x = (x - currentMod) / alphalength - 1;\n    }\n    return result;\n  }\n\n  /**\n   * Given an excel coordinate (example: 'BC123') transform it\n   * to decimal coordinates.\n   * @param {String} str Excel coordinate.\n   * @returns {Object} Coordinate in format { column: ..., row: ...}\n   */\n  static excel2coord(str) {\n    const l = str.length;\n    let index = 0;\n    let alpha = '';\n    let numeric = '';\n    while (index < l && XTableUtils.isAlphaChar(str[index])) {\n      alpha += str[index];\n      index += 1;\n    }\n    while (index < l) {\n      numeric += str[index];\n      index += 1;\n    }\n    return {\n      column: XTableUtils.alpha2number(alpha),\n      row: Number.parseInt(numeric, 10) - 1,\n    };\n  }\n\n  /**\n   * Decimal coordinate to excel coordinate.\n   * @param {Object} coord Decimal coordinate in format { column: ..., row: ...}\n   * @returns {String} Excel coordinate.\n   */\n  static coord2excel(coord) {\n    return XTableUtils.number2alpha(coord.column) + (coord.row + 1);\n  }\n\n  /**\n   * Transform an excel range to a decimal range.\n   * @param {*} str\n   */\n  static excel2range(str) {\n    const index = str.indexOf(':');\n    if (index === -1) {\n      throw new Error('Invalid excel range');\n    }\n    return {\n      topleft: XTableUtils.excel2coord(str.substring(0, index)),\n      bottomright: XTableUtils.excel2coord(\n        str.substring(index + 1, str.length)\n      ),\n    };\n  }\n}\n\nXTableUtils.alphachars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nmodule.exports = XTableUtils;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}