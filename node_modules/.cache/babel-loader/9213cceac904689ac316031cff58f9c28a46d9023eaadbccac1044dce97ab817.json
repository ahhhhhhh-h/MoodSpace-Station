{"ast":null,"code":"var _EmotionAnalyzer;\nimport { debounce } from 'lodash';\nexport class EmotionAnalyzer {\n  constructor() {\n    this.apiKey = '你的API-KEY';\n    // ✅ 填自己的\n    this.apiUrl = 'https://api.moonshot.cn/v1/chat/completions';\n    this.cache = {};\n    this.pendingResolve = null;\n    this.debouncedFetch = debounce(async text => {\n      var _this$pendingResolve;\n      const result = await this.actualAnalyze(text);\n      (_this$pendingResolve = this.pendingResolve) === null || _this$pendingResolve === void 0 ? void 0 : _this$pendingResolve.call(this, result);\n      this.pendingResolve = null;\n    }, 500);\n  }\n  static getInstance() {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n  async analyzeEmotion(text) {\n    if (!text.trim()) return 'received';\n    if (this.cache[text]) {\n      console.log('[EmotionAnalyzer] 使用缓存');\n      return this.cache[text];\n    }\n    return new Promise(resolve => {\n      this.pendingResolve = resolve;\n      this.debouncedFetch(text);\n    });\n  }\n  async actualAnalyze(text) {\n    try {\n      var _data$choices, _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      const prompt = `\n请判断下列中文内容的情绪类别，只返回：\n- positive（积极）\n- negative（消极）\n- received（中性）\n\n文本内容：\n\"${text}\"\n`;\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'moonshot-v1-8k',\n          messages: [{\n            role: 'user',\n            content: prompt\n          }],\n          temperature: 0.2\n        })\n      });\n      if (!response.ok) {\n        console.error('情绪识别API HTTP错误:', response.status, response.statusText);\n        if (response.status === 429) {\n          alert('请求太频繁啦，请稍等一下🌙');\n        }\n        return 'received';\n      }\n      const data = await response.json();\n      const reply = (_data$choices = data.choices) === null || _data$choices === void 0 ? void 0 : (_data$choices$ = _data$choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim().toLowerCase();\n      let result = 'received';\n      if (reply !== null && reply !== void 0 && reply.includes('positive')) result = 'positive';else if (reply !== null && reply !== void 0 && reply.includes('negative')) result = 'negative';\n      this.cache[text] = result;\n      return result;\n    } catch (error) {\n      console.error('情绪识别出错:', error);\n      alert('网络错误，暂时无法识别情绪，请稍后再试🚀');\n      return 'received';\n    }\n  }\n}\n_EmotionAnalyzer = EmotionAnalyzer;\nEmotionAnalyzer.instance = void 0;","map":{"version":3,"names":["debounce","EmotionAnalyzer","constructor","apiKey","apiUrl","cache","pendingResolve","debouncedFetch","text","_this$pendingResolve","result","actualAnalyze","call","getInstance","instance","analyzeEmotion","trim","console","log","Promise","resolve","_data$choices","_data$choices$","_data$choices$$messag","_data$choices$$messag2","prompt","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","ok","error","status","statusText","alert","data","json","reply","choices","message","toLowerCase","includes","_EmotionAnalyzer"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/src/utils/EmotionAnalyzer.ts"],"sourcesContent":["import { debounce } from 'lodash';\nimport { EmotionType } from '../types';\n\nexport class EmotionAnalyzer {\n  private static instance: EmotionAnalyzer;\n  private apiKey: string = '你的API-KEY'; // ✅ 填自己的\n  private apiUrl: string = 'https://api.moonshot.cn/v1/chat/completions';\n\n  private cache: Record<string, EmotionType> = {};\n\n  private constructor() {}\n\n  public static getInstance(): EmotionAnalyzer {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n\n  private pendingResolve: ((result: EmotionType) => void) | null = null;\n\n  private debouncedFetch = debounce(async (text: string) => {\n    const result = await this.actualAnalyze(text);\n    this.pendingResolve?.(result);\n    this.pendingResolve = null;\n  }, 500);\n\n  public async analyzeEmotion(text: string): Promise<EmotionType> {\n    if (!text.trim()) return 'received';\n\n    if (this.cache[text]) {\n      console.log('[EmotionAnalyzer] 使用缓存');\n      return this.cache[text];\n    }\n\n    return new Promise<EmotionType>((resolve) => {\n      this.pendingResolve = resolve;\n      this.debouncedFetch(text);\n    });\n  }\n\n  private async actualAnalyze(text: string): Promise<EmotionType> {\n    try {\n      const prompt = `\n请判断下列中文内容的情绪类别，只返回：\n- positive（积极）\n- negative（消极）\n- received（中性）\n\n文本内容：\n\"${text}\"\n`;\n\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify({\n          model: 'moonshot-v1-8k',\n          messages: [{ role: 'user', content: prompt }],\n          temperature: 0.2,\n        }),\n      });\n\n      if (!response.ok) {\n        console.error('情绪识别API HTTP错误:', response.status, response.statusText);\n        if (response.status === 429) {\n          alert('请求太频繁啦，请稍等一下🌙');\n        }\n        return 'received';\n      }\n\n      const data = await response.json();\n      const reply = data.choices?.[0]?.message?.content?.trim().toLowerCase();\n\n      let result: EmotionType = 'received';\n      if (reply?.includes('positive')) result = 'positive';\n      else if (reply?.includes('negative')) result = 'negative';\n\n      this.cache[text] = result;\n      return result;\n\n    } catch (error) {\n      console.error('情绪识别出错:', error);\n      alert('网络错误，暂时无法识别情绪，请稍后再试🚀');\n      return 'received';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}