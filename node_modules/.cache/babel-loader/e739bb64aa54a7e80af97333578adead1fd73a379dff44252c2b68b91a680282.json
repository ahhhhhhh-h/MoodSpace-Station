{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * ViterbiSearcher is for searching best Viterbi path\n * @param {ConnectionCosts} connection_costs Connection costs matrix\n * @constructor\n */\nfunction ViterbiSearcher(connection_costs) {\n  this.connection_costs = connection_costs;\n}\n\n/**\n * Search best path by forward-backward algorithm\n * @param {ViterbiLattice} lattice Viterbi lattice to search\n * @returns {Array} Shortest path\n */\nViterbiSearcher.prototype.search = function (lattice) {\n  lattice = this.forward(lattice);\n  return this.backward(lattice);\n};\nViterbiSearcher.prototype.forward = function (lattice) {\n  var i, j, k;\n  for (i = 1; i <= lattice.eos_pos; i++) {\n    var nodes = lattice.nodes_end_at[i];\n    if (nodes == null) {\n      continue;\n    }\n    for (j = 0; j < nodes.length; j++) {\n      var node = nodes[j];\n      var cost = Number.MAX_VALUE;\n      var shortest_prev_node;\n      var prev_nodes = lattice.nodes_end_at[node.start_pos - 1];\n      if (prev_nodes == null) {\n        // TODO process unknown words (repair word lattice)\n        continue;\n      }\n      for (k = 0; k < prev_nodes.length; k++) {\n        var prev_node = prev_nodes[k];\n        var edge_cost;\n        if (node.left_id == null || prev_node.right_id == null) {\n          // TODO assert\n          console.log(\"Left or right is null\");\n          edge_cost = 0;\n        } else {\n          edge_cost = this.connection_costs.get(prev_node.right_id, node.left_id);\n        }\n        var _cost = prev_node.shortest_cost + edge_cost + node.cost;\n        if (_cost < cost) {\n          shortest_prev_node = prev_node;\n          cost = _cost;\n        }\n      }\n      node.prev = shortest_prev_node;\n      node.shortest_cost = cost;\n    }\n  }\n  return lattice;\n};\nViterbiSearcher.prototype.backward = function (lattice) {\n  var shortest_path = [];\n  var eos = lattice.nodes_end_at[lattice.nodes_end_at.length - 1][0];\n  var node_back = eos.prev;\n  if (node_back == null) {\n    return [];\n  }\n  while (node_back.type !== \"BOS\") {\n    shortest_path.push(node_back);\n    if (node_back.prev == null) {\n      // TODO Failed to back. Process unknown words?\n      return [];\n    }\n    node_back = node_back.prev;\n  }\n  return shortest_path.reverse();\n};\nmodule.exports = ViterbiSearcher;","map":{"version":3,"names":["ViterbiSearcher","connection_costs","prototype","search","lattice","forward","backward","i","j","k","eos_pos","nodes","nodes_end_at","length","node","cost","Number","MAX_VALUE","shortest_prev_node","prev_nodes","start_pos","prev_node","edge_cost","left_id","right_id","console","log","get","_cost","shortest_cost","prev","shortest_path","eos","node_back","type","push","reverse","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/kuromoji/src/viterbi/ViterbiSearcher.js"],"sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * ViterbiSearcher is for searching best Viterbi path\n * @param {ConnectionCosts} connection_costs Connection costs matrix\n * @constructor\n */\nfunction ViterbiSearcher(connection_costs) {\n    this.connection_costs = connection_costs;\n}\n\n/**\n * Search best path by forward-backward algorithm\n * @param {ViterbiLattice} lattice Viterbi lattice to search\n * @returns {Array} Shortest path\n */\nViterbiSearcher.prototype.search = function (lattice) {\n    lattice = this.forward(lattice);\n    return this.backward(lattice);\n};\n\nViterbiSearcher.prototype.forward = function (lattice) {\n    var i, j, k;\n    for (i = 1; i <= lattice.eos_pos; i++) {\n        var nodes = lattice.nodes_end_at[i];\n        if (nodes == null) {\n            continue;\n        }\n        for (j = 0; j < nodes.length; j++) {\n            var node = nodes[j];\n            var cost = Number.MAX_VALUE;\n            var shortest_prev_node;\n\n            var prev_nodes = lattice.nodes_end_at[node.start_pos - 1];\n            if (prev_nodes == null) {\n                // TODO process unknown words (repair word lattice)\n                continue;\n            }\n            for (k = 0; k < prev_nodes.length; k++) {\n                var prev_node = prev_nodes[k];\n\n                var edge_cost;\n                if (node.left_id == null || prev_node.right_id == null) {\n                    // TODO assert\n                    console.log(\"Left or right is null\");\n                    edge_cost = 0;\n                } else {\n                    edge_cost = this.connection_costs.get(prev_node.right_id, node.left_id);\n                }\n\n                var _cost = prev_node.shortest_cost + edge_cost + node.cost;\n                if (_cost < cost) {\n                    shortest_prev_node = prev_node;\n                    cost = _cost;\n                }\n            }\n\n            node.prev = shortest_prev_node;\n            node.shortest_cost = cost;\n        }\n    }\n    return lattice;\n};\n\nViterbiSearcher.prototype.backward = function (lattice) {\n    var shortest_path = [];\n    var eos = lattice.nodes_end_at[lattice.nodes_end_at.length - 1][0];\n\n    var node_back = eos.prev;\n    if (node_back == null) {\n        return [];\n    }\n    while (node_back.type !== \"BOS\") {\n        shortest_path.push(node_back);\n        if (node_back.prev == null) {\n            // TODO Failed to back. Process unknown words?\n            return [];\n        }\n        node_back = node_back.prev;\n    }\n\n    return shortest_path.reverse();\n};\n\nmodule.exports = ViterbiSearcher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}