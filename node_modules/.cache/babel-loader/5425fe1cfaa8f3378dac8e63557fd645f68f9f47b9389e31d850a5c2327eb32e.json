{"ast":null,"code":"// Copyright (c) 2014 Takuya Asano All Rights Reserved.\n\n(function () {\n  \"use strict\";\n\n  var TERM_CHAR = \"\\u0000\",\n    // terminal character\n    TERM_CODE = 0,\n    // terminal character code\n    ROOT_ID = 0,\n    // index of root node\n    NOT_FOUND = -1,\n    // traverse() returns if no nodes found\n    BASE_SIGNED = true,\n    CHECK_SIGNED = true,\n    BASE_BYTES = 4,\n    CHECK_BYTES = 4,\n    MEMORY_EXPAND_RATIO = 2;\n  var newBC = function (initial_size) {\n    if (initial_size == null) {\n      initial_size = 1024;\n    }\n    var initBase = function (_base, start, end) {\n      // 'end' index does not include\n      for (var i = start; i < end; i++) {\n        _base[i] = -i + 1; // inversed previous empty node index\n      }\n      if (0 < check.array[check.array.length - 1]) {\n        var last_used_id = check.array.length - 2;\n        while (0 < check.array[last_used_id]) {\n          last_used_id--;\n        }\n        _base[start] = -last_used_id;\n      }\n    };\n    var initCheck = function (_check, start, end) {\n      for (var i = start; i < end; i++) {\n        _check[i] = -i - 1; // inversed next empty node index\n      }\n    };\n    var realloc = function (min_size) {\n      // expand arrays size by given ratio\n      var new_size = min_size * MEMORY_EXPAND_RATIO;\n      // console.log('re-allocate memory to ' + new_size);\n\n      var base_new_array = newArrayBuffer(base.signed, base.bytes, new_size);\n      initBase(base_new_array, base.array.length, new_size); // init BASE in new range\n      base_new_array.set(base.array);\n      base.array = null; // explicit GC\n      base.array = base_new_array;\n      var check_new_array = newArrayBuffer(check.signed, check.bytes, new_size);\n      initCheck(check_new_array, check.array.length, new_size); // init CHECK in new range\n      check_new_array.set(check.array);\n      check.array = null; // explicit GC\n      check.array = check_new_array;\n    };\n    var first_unused_node = ROOT_ID + 1;\n    var base = {\n      signed: BASE_SIGNED,\n      bytes: BASE_BYTES,\n      array: newArrayBuffer(BASE_SIGNED, BASE_BYTES, initial_size)\n    };\n    var check = {\n      signed: CHECK_SIGNED,\n      bytes: CHECK_BYTES,\n      array: newArrayBuffer(CHECK_SIGNED, CHECK_BYTES, initial_size)\n    };\n\n    // init root node\n    base.array[ROOT_ID] = 1;\n    check.array[ROOT_ID] = ROOT_ID;\n\n    // init BASE\n    initBase(base.array, ROOT_ID + 1, base.array.length);\n\n    // init CHECK\n    initCheck(check.array, ROOT_ID + 1, check.array.length);\n    return {\n      getBaseBuffer: function () {\n        return base.array;\n      },\n      getCheckBuffer: function () {\n        return check.array;\n      },\n      loadBaseBuffer: function (base_buffer) {\n        base.array = base_buffer;\n        return this;\n      },\n      loadCheckBuffer: function (check_buffer) {\n        check.array = check_buffer;\n        return this;\n      },\n      size: function () {\n        return Math.max(base.array.length, check.array.length);\n      },\n      getBase: function (index) {\n        if (base.array.length - 1 < index) {\n          return -index + 1;\n          // realloc(index);\n        }\n        // if (!Number.isFinite(base.array[index])) {\n        //     console.log('getBase:' + index);\n        //     throw 'getBase' + index;\n        // }\n        return base.array[index];\n      },\n      getCheck: function (index) {\n        if (check.array.length - 1 < index) {\n          return -index - 1;\n          // realloc(index);\n        }\n        // if (!Number.isFinite(check.array[index])) {\n        //     console.log('getCheck:' + index);\n        //     throw 'getCheck' + index;\n        // }\n        return check.array[index];\n      },\n      setBase: function (index, base_value) {\n        if (base.array.length - 1 < index) {\n          realloc(index);\n        }\n        base.array[index] = base_value;\n      },\n      setCheck: function (index, check_value) {\n        if (check.array.length - 1 < index) {\n          realloc(index);\n        }\n        check.array[index] = check_value;\n      },\n      setFirstUnusedNode: function (index) {\n        // if (!Number.isFinite(index)) {\n        //     throw 'assertion error: setFirstUnusedNode ' + index + ' is not finite number';\n        // }\n        first_unused_node = index;\n      },\n      getFirstUnusedNode: function () {\n        // if (!Number.isFinite(first_unused_node)) {\n        //     throw 'assertion error: getFirstUnusedNode ' + first_unused_node + ' is not finite number';\n        // }\n        return first_unused_node;\n      },\n      shrink: function () {\n        var last_index = this.size() - 1;\n        while (true) {\n          if (0 <= check.array[last_index]) {\n            break;\n          }\n          last_index--;\n        }\n        base.array = base.array.subarray(0, last_index + 2); // keep last unused node\n        check.array = check.array.subarray(0, last_index + 2); // keep last unused node\n      },\n      calc: function () {\n        var unused_count = 0;\n        var size = check.array.length;\n        for (var i = 0; i < size; i++) {\n          if (check.array[i] < 0) {\n            unused_count++;\n          }\n        }\n        return {\n          all: size,\n          unused: unused_count,\n          efficiency: (size - unused_count) / size\n        };\n      },\n      dump: function () {\n        // for debug\n        var dump_base = \"\";\n        var dump_check = \"\";\n        var i;\n        for (i = 0; i < base.array.length; i++) {\n          dump_base = dump_base + \" \" + this.getBase(i);\n        }\n        for (i = 0; i < check.array.length; i++) {\n          dump_check = dump_check + \" \" + this.getCheck(i);\n        }\n        console.log(\"base:\" + dump_base);\n        console.log(\"chck:\" + dump_check);\n        return \"base:\" + dump_base + \" chck:\" + dump_check;\n      }\n    };\n  };\n\n  /**\n   * Factory method of double array\n   */\n  function DoubleArrayBuilder(initial_size) {\n    this.bc = newBC(initial_size); // BASE and CHECK\n    this.keys = [];\n  }\n\n  /**\n   * Append a key to initialize set\n   * (This method should be called by dictionary ordered key)\n   *\n   * @param {String} key\n   * @param {Number} value Integer value from 0 to max signed integer number - 1\n   */\n  DoubleArrayBuilder.prototype.append = function (key, record) {\n    this.keys.push({\n      k: key,\n      v: record\n    });\n    return this;\n  };\n\n  /**\n   * Build double array for given keys\n   *\n   * @param {Array} keys Array of keys. A key is a Object which has properties 'k', 'v'.\n   * 'k' is a key string, 'v' is a record assigned to that key.\n   * @return {DoubleArray} Compiled double array\n   */\n  DoubleArrayBuilder.prototype.build = function (keys, sorted) {\n    if (keys == null) {\n      keys = this.keys;\n    }\n    if (keys == null) {\n      return new DoubleArray(this.bc);\n    }\n    if (sorted == null) {\n      sorted = false;\n    }\n\n    // Convert key string to ArrayBuffer\n    var buff_keys = keys.map(function (k) {\n      return {\n        k: stringToUtf8Bytes(k.k + TERM_CHAR),\n        v: k.v\n      };\n    });\n\n    // Sort keys by byte order\n    if (sorted) {\n      this.keys = buff_keys;\n    } else {\n      this.keys = buff_keys.sort(function (k1, k2) {\n        var b1 = k1.k;\n        var b2 = k2.k;\n        var min_length = Math.min(b1.length, b2.length);\n        for (var pos = 0; pos < min_length; pos++) {\n          if (b1[pos] === b2[pos]) {\n            continue;\n          }\n          return b1[pos] - b2[pos];\n        }\n        return b1.length - b2.length;\n      });\n    }\n    buff_keys = null; // explicit GC\n\n    this._build(ROOT_ID, 0, 0, this.keys.length);\n    return new DoubleArray(this.bc);\n  };\n\n  /**\n   * Append nodes to BASE and CHECK array recursively\n   */\n  DoubleArrayBuilder.prototype._build = function (parent_index, position, start, length) {\n    var children_info = this.getChildrenInfo(position, start, length);\n    var _base = this.findAllocatableBase(children_info);\n    this.setBC(parent_index, children_info, _base);\n    for (var i = 0; i < children_info.length; i = i + 3) {\n      var child_code = children_info[i];\n      if (child_code === TERM_CODE) {\n        continue;\n      }\n      var child_start = children_info[i + 1];\n      var child_len = children_info[i + 2];\n      var child_index = _base + child_code;\n      this._build(child_index, position + 1, child_start, child_len);\n    }\n  };\n  DoubleArrayBuilder.prototype.getChildrenInfo = function (position, start, length) {\n    var current_char = this.keys[start].k[position];\n    var i = 0;\n    var children_info = new Int32Array(length * 3);\n    children_info[i++] = current_char; // char (current)\n    children_info[i++] = start; // start index (current)\n\n    var next_pos = start;\n    var start_pos = start;\n    for (; next_pos < start + length; next_pos++) {\n      var next_char = this.keys[next_pos].k[position];\n      if (current_char !== next_char) {\n        children_info[i++] = next_pos - start_pos; // length (current)\n\n        children_info[i++] = next_char; // char (next)\n        children_info[i++] = next_pos; // start index (next)\n        current_char = next_char;\n        start_pos = next_pos;\n      }\n    }\n    children_info[i++] = next_pos - start_pos;\n    children_info = children_info.subarray(0, i);\n    return children_info;\n  };\n  DoubleArrayBuilder.prototype.setBC = function (parent_id, children_info, _base) {\n    var bc = this.bc;\n    bc.setBase(parent_id, _base); // Update BASE of parent node\n\n    var i;\n    for (i = 0; i < children_info.length; i = i + 3) {\n      var code = children_info[i];\n      var child_id = _base + code;\n\n      // Update linked list of unused nodes\n\n      // Assertion\n      // if (child_id < 0) {\n      //     throw 'assertion error: child_id is negative'\n      // }\n\n      var prev_unused_id = -bc.getBase(child_id);\n      var next_unused_id = -bc.getCheck(child_id);\n      // if (prev_unused_id < 0) {\n      //     throw 'assertion error: setBC'\n      // }\n      // if (next_unused_id < 0) {\n      //     throw 'assertion error: setBC'\n      // }\n      if (child_id !== bc.getFirstUnusedNode()) {\n        bc.setCheck(prev_unused_id, -next_unused_id);\n      } else {\n        // Update first_unused_node\n        bc.setFirstUnusedNode(next_unused_id);\n      }\n      bc.setBase(next_unused_id, -prev_unused_id);\n      var check = parent_id; // CHECK is parent node index\n      bc.setCheck(child_id, check); // Update CHECK of child node\n\n      // Update record\n      if (code === TERM_CODE) {\n        var start_pos = children_info[i + 1];\n        // var len = children_info[i + 2];\n        // if (len != 1) {\n        //     throw 'assertion error: there are multiple terminal nodes. len:' + len;\n        // }\n        var value = this.keys[start_pos].v;\n        if (value == null) {\n          value = 0;\n        }\n        var base = -value - 1; // BASE is inverted record value\n        bc.setBase(child_id, base); // Update BASE of child(leaf) node\n      }\n    }\n  };\n\n  /**\n   * Find BASE value that all children are allocatable in double array's region\n   */\n  DoubleArrayBuilder.prototype.findAllocatableBase = function (children_info) {\n    var bc = this.bc;\n\n    // Assertion: keys are sorted by byte order\n    // var c = -1;\n    // for (var i = 0; i < children_info.length; i = i + 3) {\n    //     if (children_info[i] < c) {\n    //         throw 'assertion error: not sort key'\n    //     }\n    //     c = children_info[i];\n    // }\n\n    // iterate linked list of unused nodes\n    var _base;\n    var curr = bc.getFirstUnusedNode(); // current index\n    // if (curr < 0) {\n    //     throw 'assertion error: getFirstUnusedNode returns negative value'\n    // }\n\n    while (true) {\n      _base = curr - children_info[0];\n      if (_base < 0) {\n        curr = -bc.getCheck(curr); // next\n\n        // if (curr < 0) {\n        //     throw 'assertion error: getCheck returns negative value'\n        // }\n\n        continue;\n      }\n      var empty_area_found = true;\n      for (var i = 0; i < children_info.length; i = i + 3) {\n        var code = children_info[i];\n        var candidate_id = _base + code;\n        if (!this.isUnusedNode(candidate_id)) {\n          // candidate_id is used node\n          // next\n          curr = -bc.getCheck(curr);\n          // if (curr < 0) {\n          //     throw 'assertion error: getCheck returns negative value'\n          // }\n\n          empty_area_found = false;\n          break;\n        }\n      }\n      if (empty_area_found) {\n        // Area is free\n        return _base;\n      }\n    }\n  };\n\n  /**\n   * Check this double array index is unused or not\n   */\n  DoubleArrayBuilder.prototype.isUnusedNode = function (index) {\n    var bc = this.bc;\n    var check = bc.getCheck(index);\n\n    // if (index < 0) {\n    //     throw 'assertion error: isUnusedNode index:' + index;\n    // }\n\n    if (index === ROOT_ID) {\n      // root node\n      return false;\n    }\n    if (check < 0) {\n      // unused\n      return true;\n    }\n\n    // used node (incl. leaf)\n    return false;\n  };\n\n  /**\n   * Factory method of double array\n   */\n  function DoubleArray(bc) {\n    this.bc = bc; // BASE and CHECK\n    this.bc.shrink();\n  }\n\n  /**\n   * Look up a given key in this trie\n   *\n   * @param {String} key\n   * @return {Boolean} True if this trie contains a given key\n   */\n  DoubleArray.prototype.contain = function (key) {\n    var bc = this.bc;\n    key += TERM_CHAR;\n    var buffer = stringToUtf8Bytes(key);\n    var parent = ROOT_ID;\n    var child = NOT_FOUND;\n    for (var i = 0; i < buffer.length; i++) {\n      var code = buffer[i];\n      child = this.traverse(parent, code);\n      if (child === NOT_FOUND) {\n        return false;\n      }\n      if (bc.getBase(child) <= 0) {\n        // leaf node\n        return true;\n      } else {\n        // not leaf\n        parent = child;\n        continue;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Look up a given key in this trie\n   *\n   * @param {String} key\n   * @return {Number} Record value assgned to this key, -1 if this key does not contain\n   */\n  DoubleArray.prototype.lookup = function (key) {\n    key += TERM_CHAR;\n    var buffer = stringToUtf8Bytes(key);\n    var parent = ROOT_ID;\n    var child = NOT_FOUND;\n    for (var i = 0; i < buffer.length; i++) {\n      var code = buffer[i];\n      child = this.traverse(parent, code);\n      if (child === NOT_FOUND) {\n        return NOT_FOUND;\n      }\n      parent = child;\n    }\n    var base = this.bc.getBase(child);\n    if (base <= 0) {\n      // leaf node\n      return -base - 1;\n    } else {\n      // not leaf\n      return NOT_FOUND;\n    }\n  };\n\n  /**\n   * Common prefix search\n   *\n   * @param {String} key\n   * @return {Array} Each result object has 'k' and 'v' (key and record,\n   * respectively) properties assigned to matched string\n   */\n  DoubleArray.prototype.commonPrefixSearch = function (key) {\n    var buffer = stringToUtf8Bytes(key);\n    var parent = ROOT_ID;\n    var child = NOT_FOUND;\n    var result = [];\n    for (var i = 0; i < buffer.length; i++) {\n      var code = buffer[i];\n      child = this.traverse(parent, code);\n      if (child !== NOT_FOUND) {\n        parent = child;\n\n        // look forward by terminal character code to check this node is a leaf or not\n        var grand_child = this.traverse(child, TERM_CODE);\n        if (grand_child !== NOT_FOUND) {\n          var base = this.bc.getBase(grand_child);\n          var r = {};\n          if (base <= 0) {\n            // If child is a leaf node, add record to result\n            r.v = -base - 1;\n          }\n\n          // If child is a leaf node, add word to result\n          r.k = utf8BytesToString(arrayCopy(buffer, 0, i + 1));\n          result.push(r);\n        }\n        continue;\n      } else {\n        break;\n      }\n    }\n    return result;\n  };\n  DoubleArray.prototype.traverse = function (parent, code) {\n    var child = this.bc.getBase(parent) + code;\n    if (this.bc.getCheck(child) === parent) {\n      return child;\n    } else {\n      return NOT_FOUND;\n    }\n  };\n  DoubleArray.prototype.size = function () {\n    return this.bc.size();\n  };\n  DoubleArray.prototype.calc = function () {\n    return this.bc.calc();\n  };\n  DoubleArray.prototype.dump = function () {\n    return this.bc.dump();\n  };\n\n  // Array utility functions\n\n  var newArrayBuffer = function (signed, bytes, size) {\n    if (signed) {\n      switch (bytes) {\n        case 1:\n          return new Int8Array(size);\n        case 2:\n          return new Int16Array(size);\n        case 4:\n          return new Int32Array(size);\n        default:\n          throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n      }\n    } else {\n      switch (bytes) {\n        case 1:\n          return new Uint8Array(size);\n        case 2:\n          return new Uint16Array(size);\n        case 4:\n          return new Uint32Array(size);\n        default:\n          throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n      }\n    }\n  };\n  var arrayCopy = function (src, src_offset, length) {\n    var buffer = new ArrayBuffer(length);\n    var dstU8 = new Uint8Array(buffer, 0, length);\n    var srcU8 = src.subarray(src_offset, length);\n    dstU8.set(srcU8);\n    return dstU8;\n  };\n\n  /**\n   * Convert String (UTF-16) to UTF-8 ArrayBuffer\n   *\n   * @param {String} str UTF-16 string to convert\n   * @return {Uint8Array} Byte sequence encoded by UTF-8\n   */\n  var stringToUtf8Bytes = function (str) {\n    // Max size of 1 character is 4 bytes\n    var bytes = new Uint8Array(new ArrayBuffer(str.length * 4));\n    var i = 0,\n      j = 0;\n    while (i < str.length) {\n      var unicode_code;\n      var utf16_code = str.charCodeAt(i++);\n      if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n        // surrogate pair\n        var upper = utf16_code; // high surrogate\n        var lower = str.charCodeAt(i++); // low surrogate\n\n        if (lower >= 0xDC00 && lower <= 0xDFFF) {\n          unicode_code = (upper - 0xD800) * (1 << 10) + (1 << 16) + (lower - 0xDC00);\n        } else {\n          // malformed surrogate pair\n          return null;\n        }\n      } else {\n        // not surrogate code\n        unicode_code = utf16_code;\n      }\n      if (unicode_code < 0x80) {\n        // 1-byte\n        bytes[j++] = unicode_code;\n      } else if (unicode_code < 1 << 11) {\n        // 2-byte\n        bytes[j++] = unicode_code >>> 6 | 0xC0;\n        bytes[j++] = unicode_code & 0x3F | 0x80;\n      } else if (unicode_code < 1 << 16) {\n        // 3-byte\n        bytes[j++] = unicode_code >>> 12 | 0xE0;\n        bytes[j++] = unicode_code >> 6 & 0x3f | 0x80;\n        bytes[j++] = unicode_code & 0x3F | 0x80;\n      } else if (unicode_code < 1 << 21) {\n        // 4-byte\n        bytes[j++] = unicode_code >>> 18 | 0xF0;\n        bytes[j++] = unicode_code >> 12 & 0x3F | 0x80;\n        bytes[j++] = unicode_code >> 6 & 0x3F | 0x80;\n        bytes[j++] = unicode_code & 0x3F | 0x80;\n      } else {\n        // malformed UCS4 code\n      }\n    }\n    return bytes.subarray(0, j);\n  };\n\n  /**\n   * Convert UTF-8 ArrayBuffer to String (UTF-16)\n   *\n   * @param {Uint8Array} bytes UTF-8 byte sequence to convert\n   * @return {String} String encoded by UTF-16\n   */\n  var utf8BytesToString = function (bytes) {\n    var str = \"\";\n    var code, b1, b2, b3, b4, upper, lower;\n    var i = 0;\n    while (i < bytes.length) {\n      b1 = bytes[i++];\n      if (b1 < 0x80) {\n        // 1 byte\n        code = b1;\n      } else if (b1 >> 5 === 0x06) {\n        // 2 bytes\n        b2 = bytes[i++];\n        code = (b1 & 0x1f) << 6 | b2 & 0x3f;\n      } else if (b1 >> 4 === 0x0e) {\n        // 3 bytes\n        b2 = bytes[i++];\n        b3 = bytes[i++];\n        code = (b1 & 0x0f) << 12 | (b2 & 0x3f) << 6 | b3 & 0x3f;\n      } else {\n        // 4 bytes\n        b2 = bytes[i++];\n        b3 = bytes[i++];\n        b4 = bytes[i++];\n        code = (b1 & 0x07) << 18 | (b2 & 0x3f) << 12 | (b3 & 0x3f) << 6 | b4 & 0x3f;\n      }\n      if (code < 0x10000) {\n        str += String.fromCharCode(code);\n      } else {\n        // surrogate pair\n        code -= 0x10000;\n        upper = 0xD800 | code >> 10;\n        lower = 0xDC00 | code & 0x3FF;\n        str += String.fromCharCode(upper, lower);\n      }\n    }\n    return str;\n  };\n\n  // public methods\n  var doublearray = {\n    builder: function (initial_size) {\n      return new DoubleArrayBuilder(initial_size);\n    },\n    load: function (base_buffer, check_buffer) {\n      var bc = newBC(0);\n      bc.loadBaseBuffer(base_buffer);\n      bc.loadCheckBuffer(check_buffer);\n      return new DoubleArray(bc);\n    }\n  };\n  if (\"undefined\" === typeof module) {\n    // In browser\n    window.doublearray = doublearray;\n  } else {\n    // In node\n    module.exports = doublearray;\n  }\n})();","map":{"version":3,"names":["TERM_CHAR","TERM_CODE","ROOT_ID","NOT_FOUND","BASE_SIGNED","CHECK_SIGNED","BASE_BYTES","CHECK_BYTES","MEMORY_EXPAND_RATIO","newBC","initial_size","initBase","_base","start","end","i","check","array","length","last_used_id","initCheck","_check","realloc","min_size","new_size","base_new_array","newArrayBuffer","base","signed","bytes","set","check_new_array","first_unused_node","getBaseBuffer","getCheckBuffer","loadBaseBuffer","base_buffer","loadCheckBuffer","check_buffer","size","Math","max","getBase","index","getCheck","setBase","base_value","setCheck","check_value","setFirstUnusedNode","getFirstUnusedNode","shrink","last_index","subarray","calc","unused_count","all","unused","efficiency","dump","dump_base","dump_check","console","log","DoubleArrayBuilder","bc","keys","prototype","append","key","record","push","k","v","build","sorted","DoubleArray","buff_keys","map","stringToUtf8Bytes","sort","k1","k2","b1","b2","min_length","min","pos","_build","parent_index","position","children_info","getChildrenInfo","findAllocatableBase","setBC","child_code","child_start","child_len","child_index","current_char","Int32Array","next_pos","start_pos","next_char","parent_id","code","child_id","prev_unused_id","next_unused_id","value","curr","empty_area_found","candidate_id","isUnusedNode","contain","buffer","parent","child","traverse","lookup","commonPrefixSearch","result","grand_child","r","utf8BytesToString","arrayCopy","Int8Array","Int16Array","RangeError","Uint8Array","Uint16Array","Uint32Array","src","src_offset","ArrayBuffer","dstU8","srcU8","str","j","unicode_code","utf16_code","charCodeAt","upper","lower","b3","b4","String","fromCharCode","doublearray","builder","load","module","window","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/doublearray/doublearray.js"],"sourcesContent":["// Copyright (c) 2014 Takuya Asano All Rights Reserved.\n\n(function () {\n\n    \"use strict\";\n\n    var TERM_CHAR = \"\\u0000\", // terminal character\n        TERM_CODE = 0,        // terminal character code\n        ROOT_ID = 0,          // index of root node\n        NOT_FOUND = -1,       // traverse() returns if no nodes found\n        BASE_SIGNED = true,\n        CHECK_SIGNED = true,\n        BASE_BYTES = 4,\n        CHECK_BYTES = 4,\n        MEMORY_EXPAND_RATIO = 2;\n\n\n    var newBC = function (initial_size) {\n\n        if (initial_size == null) {\n            initial_size = 1024;\n        }\n\n        var initBase = function (_base, start, end) {  // 'end' index does not include\n            for (var i = start; i < end; i++) {\n                _base[i] = - i + 1;  // inversed previous empty node index\n            }\n            if (0 < check.array[check.array.length - 1]) {\n                var last_used_id = check.array.length - 2;\n                while (0 < check.array[last_used_id]) {\n                    last_used_id--;\n                }\n                _base[start] = - last_used_id;\n            }\n        };\n\n        var initCheck = function (_check, start, end) {\n            for (var i = start; i < end; i++) {\n                _check[i] = - i - 1;  // inversed next empty node index\n            }\n        };\n\n        var realloc = function (min_size) {\n            // expand arrays size by given ratio\n            var new_size = min_size * MEMORY_EXPAND_RATIO;\n            // console.log('re-allocate memory to ' + new_size);\n\n            var base_new_array = newArrayBuffer(base.signed, base.bytes, new_size);\n            initBase(base_new_array, base.array.length, new_size);  // init BASE in new range\n            base_new_array.set(base.array);\n            base.array = null;  // explicit GC\n            base.array = base_new_array;\n\n            var check_new_array = newArrayBuffer(check.signed, check.bytes, new_size);\n            initCheck(check_new_array, check.array.length, new_size);  // init CHECK in new range\n            check_new_array.set(check.array);\n            check.array = null;  // explicit GC\n            check.array = check_new_array;\n        };\n\n        var first_unused_node = ROOT_ID + 1;\n\n        var base = {\n            signed: BASE_SIGNED,\n            bytes: BASE_BYTES,\n            array: newArrayBuffer(BASE_SIGNED, BASE_BYTES, initial_size)\n        };\n\n        var check = {\n            signed: CHECK_SIGNED,\n            bytes: CHECK_BYTES,\n            array: newArrayBuffer(CHECK_SIGNED, CHECK_BYTES, initial_size)\n        };\n\n        // init root node\n        base.array[ROOT_ID] = 1;\n        check.array[ROOT_ID] = ROOT_ID;\n\n        // init BASE\n        initBase(base.array, ROOT_ID + 1, base.array.length);\n\n        // init CHECK\n        initCheck(check.array, ROOT_ID + 1, check.array.length);\n\n        return {\n            getBaseBuffer: function () {\n                return base.array;\n            },\n            getCheckBuffer: function () {\n                return check.array;\n            },\n            loadBaseBuffer: function (base_buffer) {\n                base.array = base_buffer;\n                return this;\n            },\n            loadCheckBuffer: function (check_buffer) {\n                check.array = check_buffer;\n                return this;\n            },\n            size: function () {\n                return Math.max(base.array.length, check.array.length);\n            },\n            getBase: function (index) {\n                if (base.array.length - 1 < index) {\n                    return - index + 1;\n                    // realloc(index);\n                }\n                // if (!Number.isFinite(base.array[index])) {\n                //     console.log('getBase:' + index);\n                //     throw 'getBase' + index;\n                // }\n                return base.array[index];\n            },\n            getCheck: function (index) {\n                if (check.array.length - 1 < index) {\n                    return - index - 1;\n                    // realloc(index);\n                }\n                // if (!Number.isFinite(check.array[index])) {\n                //     console.log('getCheck:' + index);\n                //     throw 'getCheck' + index;\n                // }\n                return check.array[index];\n            },\n            setBase: function (index, base_value) {\n                if (base.array.length - 1 < index) {\n                    realloc(index);\n                }\n                base.array[index] = base_value;\n            },\n            setCheck: function (index, check_value) {\n                if (check.array.length - 1 < index) {\n                    realloc(index);\n                }\n                check.array[index] = check_value;\n            },\n            setFirstUnusedNode: function (index) {\n                // if (!Number.isFinite(index)) {\n                //     throw 'assertion error: setFirstUnusedNode ' + index + ' is not finite number';\n                // }\n                first_unused_node = index;\n            },\n            getFirstUnusedNode: function () {\n                // if (!Number.isFinite(first_unused_node)) {\n                //     throw 'assertion error: getFirstUnusedNode ' + first_unused_node + ' is not finite number';\n                // }\n                return first_unused_node;\n            },\n            shrink: function () {\n                var last_index = this.size() - 1;\n                while (true) {\n                    if (0 <= check.array[last_index]) {\n                        break;\n                    }\n                    last_index--;\n                }\n                base.array = base.array.subarray(0, last_index + 2);   // keep last unused node\n                check.array = check.array.subarray(0, last_index + 2); // keep last unused node\n            },\n            calc: function () {\n                var unused_count = 0;\n                var size = check.array.length;\n                for (var i = 0; i < size; i++) {\n                    if (check.array[i] < 0) {\n                        unused_count++;\n                    }\n                }\n                return {\n                    all: size,\n                    unused: unused_count,\n                    efficiency: (size - unused_count) / size\n                };\n            },\n            dump: function () {\n                // for debug\n                var dump_base = \"\";\n                var dump_check = \"\";\n\n                var i;\n                for (i = 0; i < base.array.length; i++) {\n                    dump_base = dump_base + \" \" + this.getBase(i);\n                }\n                for (i = 0; i < check.array.length; i++) {\n                    dump_check = dump_check + \" \" + this.getCheck(i);\n                }\n\n                console.log(\"base:\" + dump_base);\n                console.log(\"chck:\" + dump_check);\n\n                return \"base:\" + dump_base + \" chck:\" + dump_check;\n            }\n        };\n    };\n\n\n    /**\n     * Factory method of double array\n     */\n    function DoubleArrayBuilder(initial_size) {\n        this.bc = newBC(initial_size);  // BASE and CHECK\n        this.keys = [];\n    }\n\n\n    /**\n     * Append a key to initialize set\n     * (This method should be called by dictionary ordered key)\n     *\n     * @param {String} key\n     * @param {Number} value Integer value from 0 to max signed integer number - 1\n     */\n    DoubleArrayBuilder.prototype.append = function (key, record) {\n        this.keys.push({ k: key, v: record });\n        return this;\n    };\n\n    /**\n     * Build double array for given keys\n     *\n     * @param {Array} keys Array of keys. A key is a Object which has properties 'k', 'v'.\n     * 'k' is a key string, 'v' is a record assigned to that key.\n     * @return {DoubleArray} Compiled double array\n     */\n    DoubleArrayBuilder.prototype.build = function (keys, sorted) {\n\n        if (keys == null) {\n            keys = this.keys;\n        }\n\n        if (keys == null) {\n            return new DoubleArray(this.bc);\n        }\n\n        if (sorted == null) {\n            sorted = false;\n        }\n\n        // Convert key string to ArrayBuffer\n        var buff_keys =\n            keys.map(function (k) {\n                return {\n                    k: stringToUtf8Bytes(k.k + TERM_CHAR),\n                    v: k.v\n                };\n            });\n\n        // Sort keys by byte order\n        if (sorted) {\n            this.keys = buff_keys;\n        } else {\n            this.keys =\n                buff_keys.sort(function (k1, k2) {\n                    var b1 = k1.k;\n                    var b2 = k2.k;\n                    var min_length = Math.min(b1.length, b2.length);\n                    for (var pos = 0; pos < min_length; pos++) {\n                        if (b1[pos] === b2[pos]) {\n                            continue;\n                        }\n                        return b1[pos] - b2[pos];\n                    }\n                    return b1.length - b2.length;\n                });\n        }\n\n        buff_keys = null;  // explicit GC\n\n        this._build(ROOT_ID, 0, 0, this.keys.length);\n        return new DoubleArray(this.bc);\n    };\n\n    /**\n     * Append nodes to BASE and CHECK array recursively\n     */\n    DoubleArrayBuilder.prototype._build = function (parent_index, position, start, length) {\n\n        var children_info = this.getChildrenInfo(position, start, length);\n        var _base = this.findAllocatableBase(children_info);\n\n        this.setBC(parent_index, children_info, _base);\n\n        for (var i = 0; i < children_info.length; i = i + 3) {\n            var child_code = children_info[i];\n            if (child_code === TERM_CODE) {\n                continue;\n            }\n            var child_start = children_info[i + 1];\n            var child_len = children_info[i + 2];\n            var child_index = _base + child_code;\n            this._build(child_index, position + 1, child_start, child_len);\n        }\n    };\n\n    DoubleArrayBuilder.prototype.getChildrenInfo = function (position, start, length) {\n        var current_char = this.keys[start].k[position];\n        var i = 0;\n        var children_info = new Int32Array(length * 3);\n\n        children_info[i++] = current_char;  // char (current)\n        children_info[i++] = start;         // start index (current)\n\n        var next_pos = start;\n        var start_pos = start;\n        for (; next_pos < start + length; next_pos++) {\n            var next_char = this.keys[next_pos].k[position];\n            if (current_char !== next_char) {\n                children_info[i++] = next_pos - start_pos;  // length (current)\n\n                children_info[i++] = next_char;             // char (next)\n                children_info[i++] = next_pos;              // start index (next)\n                current_char = next_char;\n                start_pos = next_pos;\n            }\n        }\n        children_info[i++] = next_pos - start_pos;\n        children_info = children_info.subarray(0, i);\n\n        return children_info;\n    };\n\n    DoubleArrayBuilder.prototype.setBC = function (parent_id, children_info, _base) {\n\n        var bc = this.bc;\n\n        bc.setBase(parent_id, _base);  // Update BASE of parent node\n\n        var i;\n        for (i = 0; i < children_info.length; i = i + 3) {\n            var code = children_info[i];\n            var child_id = _base + code;\n\n            // Update linked list of unused nodes\n\n            // Assertion\n            // if (child_id < 0) {\n            //     throw 'assertion error: child_id is negative'\n            // }\n\n            var prev_unused_id = - bc.getBase(child_id);\n            var next_unused_id = - bc.getCheck(child_id);\n            // if (prev_unused_id < 0) {\n            //     throw 'assertion error: setBC'\n            // }\n            // if (next_unused_id < 0) {\n            //     throw 'assertion error: setBC'\n            // }\n            if (child_id !== bc.getFirstUnusedNode()) {\n                bc.setCheck(prev_unused_id, - next_unused_id);\n            } else {\n                // Update first_unused_node\n                bc.setFirstUnusedNode(next_unused_id);\n            }\n            bc.setBase(next_unused_id, - prev_unused_id);\n\n            var check = parent_id;         // CHECK is parent node index\n            bc.setCheck(child_id, check);  // Update CHECK of child node\n\n            // Update record\n            if (code === TERM_CODE) {\n                var start_pos = children_info[i + 1];\n                // var len = children_info[i + 2];\n                // if (len != 1) {\n                //     throw 'assertion error: there are multiple terminal nodes. len:' + len;\n                // }\n                var value = this.keys[start_pos].v;\n\n                if (value == null) {\n                    value = 0;\n                }\n\n                var base = - value - 1;       // BASE is inverted record value\n                bc.setBase(child_id, base);  // Update BASE of child(leaf) node\n            }\n        }\n    };\n\n\n    /**\n     * Find BASE value that all children are allocatable in double array's region\n     */\n    DoubleArrayBuilder.prototype.findAllocatableBase = function (children_info) {\n\n        var bc = this.bc;\n\n        // Assertion: keys are sorted by byte order\n        // var c = -1;\n        // for (var i = 0; i < children_info.length; i = i + 3) {\n        //     if (children_info[i] < c) {\n        //         throw 'assertion error: not sort key'\n        //     }\n        //     c = children_info[i];\n        // }\n\n        // iterate linked list of unused nodes\n        var _base;\n        var curr = bc.getFirstUnusedNode();  // current index\n        // if (curr < 0) {\n        //     throw 'assertion error: getFirstUnusedNode returns negative value'\n        // }\n\n        while (true) {\n            _base = curr - children_info[0];\n\n            if (_base < 0) {\n                curr = - bc.getCheck(curr);  // next\n\n                // if (curr < 0) {\n                //     throw 'assertion error: getCheck returns negative value'\n                // }\n\n                continue;\n            }\n\n            var empty_area_found = true;\n            for (var i = 0; i < children_info.length; i = i + 3) {\n                var code = children_info[i];\n                var candidate_id = _base + code;\n\n                if (!this.isUnusedNode(candidate_id)) {\n                    // candidate_id is used node\n                    // next\n                    curr = - bc.getCheck(curr);\n                    // if (curr < 0) {\n                    //     throw 'assertion error: getCheck returns negative value'\n                    // }\n\n                    empty_area_found = false;\n                    break;\n                }\n            }\n            if (empty_area_found) {\n                // Area is free\n                return _base;\n            }\n        }\n    };\n\n    /**\n     * Check this double array index is unused or not\n     */\n    DoubleArrayBuilder.prototype.isUnusedNode = function (index) {\n        var bc = this.bc;\n        var check = bc.getCheck(index);\n\n        // if (index < 0) {\n        //     throw 'assertion error: isUnusedNode index:' + index;\n        // }\n\n        if (index === ROOT_ID) {\n            // root node\n            return false;\n        }\n        if (check < 0) {\n            // unused\n            return true;\n        }\n\n        // used node (incl. leaf)\n        return false;\n    };\n\n\n    /**\n     * Factory method of double array\n     */\n    function DoubleArray(bc) {\n        this.bc = bc;       // BASE and CHECK\n        this.bc.shrink();\n    }\n\n\n    /**\n     * Look up a given key in this trie\n     *\n     * @param {String} key\n     * @return {Boolean} True if this trie contains a given key\n     */\n    DoubleArray.prototype.contain = function (key) {\n\n        var bc = this.bc;\n\n        key += TERM_CHAR;\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n\n            child = this.traverse(parent, code);\n            if (child === NOT_FOUND) {\n                return false;\n            }\n\n            if (bc.getBase(child) <= 0) {\n                // leaf node\n                return true;\n            } else {\n                // not leaf\n                parent = child;\n                continue;\n            }\n        }\n        return false;\n    };\n\n\n    /**\n     * Look up a given key in this trie\n     *\n     * @param {String} key\n     * @return {Number} Record value assgned to this key, -1 if this key does not contain\n     */\n    DoubleArray.prototype.lookup = function (key) {\n\n        key += TERM_CHAR;\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n            child = this.traverse(parent, code);\n            if (child === NOT_FOUND) {\n                return NOT_FOUND;\n            }\n            parent = child;\n        }\n\n        var base = this.bc.getBase(child);\n        if (base <= 0) {\n            // leaf node\n            return - base - 1;\n        } else {\n            // not leaf\n            return NOT_FOUND;\n        }\n    };\n\n\n    /**\n     * Common prefix search\n     *\n     * @param {String} key\n     * @return {Array} Each result object has 'k' and 'v' (key and record,\n     * respectively) properties assigned to matched string\n     */\n    DoubleArray.prototype.commonPrefixSearch = function (key) {\n\n        var buffer = stringToUtf8Bytes(key);\n\n        var parent = ROOT_ID;\n        var child = NOT_FOUND;\n\n        var result = [];\n\n        for (var i = 0; i < buffer.length; i++) {\n            var code = buffer[i];\n\n            child = this.traverse(parent, code);\n\n            if (child !== NOT_FOUND) {\n                parent = child;\n\n                // look forward by terminal character code to check this node is a leaf or not\n                var grand_child = this.traverse(child, TERM_CODE);\n\n                if (grand_child !== NOT_FOUND) {\n                    var base = this.bc.getBase(grand_child);\n\n                    var r = {};\n\n                    if (base <= 0) {\n                        // If child is a leaf node, add record to result\n                        r.v = - base - 1;\n                    }\n\n                    // If child is a leaf node, add word to result\n                    r.k = utf8BytesToString(arrayCopy(buffer, 0, i + 1));\n\n                    result.push(r);\n                }\n                continue;\n            } else {\n                break;\n            }\n        }\n\n        return result;\n    };\n\n    DoubleArray.prototype.traverse = function (parent, code) {\n        var child = this.bc.getBase(parent) + code;\n        if (this.bc.getCheck(child) === parent) {\n            return child;\n        } else {\n            return NOT_FOUND;\n        }\n    };\n\n    DoubleArray.prototype.size = function () {\n        return this.bc.size();\n    };\n\n    DoubleArray.prototype.calc = function () {\n        return this.bc.calc();\n    };\n\n    DoubleArray.prototype.dump = function () {\n        return this.bc.dump();\n    };\n\n\n    // Array utility functions\n\n    var newArrayBuffer = function (signed, bytes, size) {\n        if (signed) {\n            switch(bytes) {\n                case 1:\n                return new Int8Array(size);\n                case 2:\n                return new Int16Array(size);\n                case 4:\n                return new Int32Array(size);\n                default:\n                throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n            }\n        } else {\n            switch(bytes) {\n                case 1:\n                return new Uint8Array(size);\n                case 2:\n                return new Uint16Array(size);\n                case 4:\n                return new Uint32Array(size);\n                default:\n                throw new RangeError(\"Invalid newArray parameter element_bytes:\" + bytes);\n            }\n        }\n    };\n\n    var arrayCopy = function (src, src_offset, length) {\n        var buffer = new ArrayBuffer(length);\n        var dstU8 = new Uint8Array(buffer, 0, length);\n        var srcU8 = src.subarray(src_offset, length);\n        dstU8.set(srcU8);\n        return dstU8;\n    };\n\n\n    /**\n     * Convert String (UTF-16) to UTF-8 ArrayBuffer\n     *\n     * @param {String} str UTF-16 string to convert\n     * @return {Uint8Array} Byte sequence encoded by UTF-8\n     */\n    var stringToUtf8Bytes = function (str) {\n\n        // Max size of 1 character is 4 bytes\n        var bytes = new Uint8Array(new ArrayBuffer(str.length * 4));\n\n        var i = 0, j = 0;\n\n        while (i < str.length) {\n            var unicode_code;\n\n            var utf16_code = str.charCodeAt(i++);\n            if (utf16_code >= 0xD800 && utf16_code <= 0xDBFF) {\n                // surrogate pair\n                var upper = utf16_code;           // high surrogate\n                var lower = str.charCodeAt(i++);  // low surrogate\n\n                if (lower >= 0xDC00 && lower <= 0xDFFF) {\n                    unicode_code =\n                        (upper - 0xD800) * (1 << 10) + (1 << 16) +\n                        (lower - 0xDC00);\n                } else {\n                    // malformed surrogate pair\n                    return null;\n                }\n            } else {\n                // not surrogate code\n                unicode_code = utf16_code;\n            }\n\n            if (unicode_code < 0x80) {\n                // 1-byte\n                bytes[j++] = unicode_code;\n\n            } else if (unicode_code < (1 << 11)) {\n                // 2-byte\n                bytes[j++] = (unicode_code >>> 6) | 0xC0;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else if (unicode_code < (1 << 16)) {\n                // 3-byte\n                bytes[j++] = (unicode_code >>> 12) | 0xE0;\n                bytes[j++] = ((unicode_code >> 6) & 0x3f) | 0x80;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else if (unicode_code < (1 << 21)) {\n                // 4-byte\n                bytes[j++] = (unicode_code >>> 18) | 0xF0;\n                bytes[j++] = ((unicode_code >> 12) & 0x3F) | 0x80;\n                bytes[j++] = ((unicode_code >> 6) & 0x3F) | 0x80;\n                bytes[j++] = (unicode_code & 0x3F) | 0x80;\n\n            } else {\n                // malformed UCS4 code\n            }\n        }\n\n        return bytes.subarray(0, j);\n    };\n\n\n    /**\n     * Convert UTF-8 ArrayBuffer to String (UTF-16)\n     *\n     * @param {Uint8Array} bytes UTF-8 byte sequence to convert\n     * @return {String} String encoded by UTF-16\n     */\n    var utf8BytesToString = function (bytes) {\n\n        var str = \"\";\n        var code, b1, b2, b3, b4, upper, lower;\n        var i = 0;\n\n        while (i < bytes.length) {\n\n            b1 = bytes[i++];\n\n            if (b1 < 0x80) {\n                // 1 byte\n                code = b1;\n            } else if ((b1 >> 5) === 0x06) {\n                // 2 bytes\n                b2 = bytes[i++];\n                code = ((b1 & 0x1f) << 6) | (b2 & 0x3f);\n            } else if ((b1 >> 4) === 0x0e) {\n                // 3 bytes\n                b2 = bytes[i++];\n                b3 = bytes[i++];\n                code = ((b1 & 0x0f) << 12) | ((b2 & 0x3f) << 6) | (b3 & 0x3f);\n            } else {\n                // 4 bytes\n                b2 = bytes[i++];\n                b3 = bytes[i++];\n                b4 = bytes[i++];\n                code = ((b1 & 0x07) << 18) | ((b2 & 0x3f) << 12) | ((b3 & 0x3f) << 6) | (b4 & 0x3f);\n            }\n\n            if (code < 0x10000) {\n\t            str += String.fromCharCode(code);\n            } else {\n\t            // surrogate pair\n\t            code -= 0x10000;\n\t            upper = (0xD800 | (code >> 10));\n\t            lower = (0xDC00 | (code & 0x3FF));\n\t            str += String.fromCharCode(upper, lower);\n            }\n        }\n\n        return str;\n    };\n\n\n    // public methods\n    var doublearray = {\n        builder: function (initial_size) {\n            return new DoubleArrayBuilder(initial_size);\n        },\n        load: function (base_buffer, check_buffer) {\n            var bc = newBC(0);\n            bc.loadBaseBuffer(base_buffer);\n            bc.loadCheckBuffer(check_buffer);\n            return new DoubleArray(bc);\n        }\n    };\n\n    if (\"undefined\" === typeof module) {\n\t    // In browser\n        window.doublearray = doublearray;\n    } else {\n\t    // In node\n        module.exports = doublearray;\n    }\n\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}