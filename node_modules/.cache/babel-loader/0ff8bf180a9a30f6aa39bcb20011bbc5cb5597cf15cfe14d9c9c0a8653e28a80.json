{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  decomposeHangul,\n  composeHangul,\n  hasCoda\n} = require('./hangul');\nconst preEomis = [[...'게겠고구기긴길네다더던도든면자잖재져죠지진질'], [...'야서써도준'], [...'어었'], [...'아았'], [...'워웠'], [...'여였'], [...'노느니냐'], [...'러려며'], ['으'], ['은'], ['는'], ['운'], [...'세시실신셔습셨십'], [...[...'게겠고구기긴길네다더던도든면자잖재져죠지진질'], ...[...'노느니냐'], ...[...'러려며'], ...[...'세시실신셔습셨십']]];\nfunction build(lastChar, list) {\n  const result = [];\n  for (let i = 0; i < list.length; i += 1) {\n    const eomis = preEomis[list[i]];\n    for (let j = 0; j < eomis.length; j += 1) {\n      result.push(lastChar + eomis[j]);\n    }\n  }\n  return result;\n}\nfunction buildCommon(onset, vowel) {\n  return ['ㅂ', 'ㅆ', 'ㄹ', 'ㄴ', 'ㅁ'].map(coda => composeHangul(onset, vowel, coda));\n}\nfunction buildNoPast(onset, vowel) {\n  return ['ㅂ', 'ㄹ', 'ㄴ', 'ㅁ'].map(coda => composeHangul(onset, vowel, coda));\n}\nfunction conjugate(words, isAdjective) {\n  const expanded = [];\n  for (const word of words) {\n    const init = word.substr(0, word.length - 1);\n    const lastChar = word.substr(-1);\n    const lastCharDecomposed = decomposeHangul(lastChar);\n    const lastOnset = lastCharDecomposed.onset;\n    const lastVowel = lastCharDecomposed.vowel;\n    const lastCoda = lastCharDecomposed.coda;\n    let expandedLast;\n    if (lastChar === '하') {\n      expandedLast = [...build(lastChar, [0, 6, 10, 12]), ...['ㅂ', 'ㅆ', 'ㄹ', 'ㄴ', 'ㅁ'].map(coda => composeHangul('ㅎ', coda === 'ㅆ' ? 'ㅐ' : 'ㅏ', coda)), ...build('하', [13, 5, 10]), ...build('해', [1]), ...[...(isAdjective ? '합해히하' : '합해')]];\n    } else if (lastVowel === 'ㅗ' && lastCoda === ' ') {\n      expandedLast = [].concat(build(lastChar, [13, 6, 3, 10]), buildNoPast(lastOnset, 'ㅗ'), [composeHangul(lastOnset, 'ㅘ'), composeHangul(lastOnset, 'ㅘ', 'ㅆ'), lastChar]);\n    } else if (lastVowel === 'ㅜ' && lastCoda === ' ') {\n      expandedLast = [].concat(build(lastChar, [13, 2, 6, 10]), buildNoPast(lastOnset, 'ㅜ'), [composeHangul(lastOnset, 'ㅝ'), composeHangul(lastOnset, 'ㅝ', 'ㅆ'), lastChar]);\n    } else if (lastVowel === 'ㅡ' && lastCoda === ' ') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), buildNoPast(lastOnset, 'ㅡ'), [composeHangul(lastOnset, 'ㅝ'), composeHangul(lastOnset, 'ㅓ'), composeHangul(lastOnset, 'ㅏ'), composeHangul(lastOnset, 'ㅝ', 'ㅆ'), composeHangul(lastOnset, 'ㅓ', 'ㅆ'), composeHangul(lastOnset, 'ㅏ', 'ㅆ'), lastChar]);\n    } else if (lastChar === '귀') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), buildNoPast('ㄱ', 'ㅟ'), ['겨', '겼', lastChar]);\n    } else if (lastVowel === 'ㅟ' && lastCoda === ' ') {\n      expandedLast = [].concat(buildNoPast(lastOnset, 'ㅟ'), build(lastChar, [6, 10]), [lastChar]);\n    } else if (lastVowel === 'ㅣ' && lastCoda === ' ') {\n      expandedLast = [].concat(buildNoPast(lastOnset, 'ㅣ'), build(lastChar, [2, 6, 10]), [`${composeHangul(lastOnset, 'ㅣ', 'ㅂ')}니`, composeHangul(lastOnset, 'ㅕ'), composeHangul(lastOnset, 'ㅕ', 'ㅆ'), lastChar]);\n    } else if ((lastVowel === 'ㅞ' || lastVowel === 'ㅚ' || lastVowel === 'ㅙ') && lastCoda === ' ') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), buildCommon(lastOnset, lastVowel), [lastChar]);\n    } else if (lastCoda === ' ') {\n      expandedLast = [].concat(build(lastChar, [13, 1, 6, 10]), buildCommon(lastOnset, lastVowel), [lastChar]);\n    } else if (lastCoda === 'ㄹ' && (lastOnset === 'ㅁ' && lastVowel === 'ㅓ' || lastVowel === 'ㅡ' || lastVowel === 'ㅏ' || lastVowel === 'ㅜ')) {\n      expandedLast = [].concat(build(lastChar, [2, 7]), build(composeHangul(lastOnset, lastVowel), [6, 10, 12]), [composeHangul(lastOnset, lastVowel, 'ㄻ'), composeHangul(lastOnset, lastVowel, 'ㄴ'), lastChar]);\n    } else if (lastVowel === 'ㅏ' && lastCoda === 'ㅅ') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), build(composeHangul(lastOnset, 'ㅏ'), [8, 9]), [lastChar]);\n    } else if (lastChar === '묻') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), ['물', lastChar]);\n    } else if (lastVowel === 'ㅜ' && lastCoda === 'ㄷ') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), build(composeHangul(lastOnset, 'ㅜ'), [2, 4, 8, 9]), [composeHangul(lastOnset, 'ㅜ', 'ㄹ'), lastChar]);\n    } else if (lastVowel === 'ㅜ' && lastCoda === 'ㅂ') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), build(composeHangul(lastOnset, 'ㅜ'), [4, 8, 9]), [lastChar]);\n    } else if (lastVowel === 'ㅓ' && lastCoda === 'ㅂ' && isAdjective) {\n      expandedLast = [].concat(build(composeHangul(lastOnset, 'ㅓ'), [4, 11]), [composeHangul(lastOnset, 'ㅓ'), composeHangul(lastOnset, 'ㅓ', 'ㄴ'), lastChar]);\n    } else if (lastCoda === 'ㅂ' && isAdjective) {\n      expandedLast = [].concat(build(composeHangul(lastOnset, lastVowel), [4, 11]), [composeHangul(lastOnset, lastVowel), lastChar]);\n    } else if (lastVowel === 'ㅗ' && lastCoda === 'ㅎ') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), buildCommon(lastOnset, 'ㅗ'), [composeHangul(lastOnset, 'ㅘ'), composeHangul(lastOnset, 'ㅗ'), lastChar]);\n    } else if (lastCoda === 'ㅎ' && isAdjective) {\n      expandedLast = [].concat(buildCommon(lastOnset, lastVowel), ['ㅆ', 'ㄹ', 'ㅁ'].map(coda => composeHangul(lastOnset, 'ㅐ', coda)), [composeHangul(lastOnset, 'ㅐ'), composeHangul(lastOnset, lastVowel), lastChar]);\n    } else if (word.length === 1 || isAdjective && lastCoda === 'ㅆ') {\n      expandedLast = [].concat(build(lastChar, [0, 2, 3, 6, 8, 9, 10]), [lastChar]);\n      // eslint-disable-next-line no-dupe-else-if\n    } else if (word.length === 1 && isAdjective) {\n      expandedLast = [].concat(build(lastChar, [0, 2, 3, 6, 8, 9]), [lastChar]);\n    } else {\n      expandedLast = [lastChar];\n    }\n    let irregularExpansion = [];\n    const initLast = init[init.length - 1];\n    if (initLast && lastChar === '르' && !hasCoda(initLast)) {\n      const lastInitCharDecomposed = decomposeHangul(initLast);\n      const newInit = init.slice(0, -1) + composeHangul(lastInitCharDecomposed.onset, lastInitCharDecomposed.vowel, 'ㄹ');\n      const o = lastCharDecomposed.onset;\n      const conjugation = [].concat(build(lastChar, [6, 10]), buildNoPast(o, 'ㅡ'), [composeHangul(o, 'ㅝ'), composeHangul(o, 'ㅓ'), composeHangul(o, 'ㅏ'), composeHangul(o, 'ㅝ', 'ㅆ'), composeHangul(o, 'ㅓ', 'ㅆ'), composeHangul(o, 'ㅏ', 'ㅆ'), lastChar]);\n      irregularExpansion = conjugation.map(s => newInit + s);\n    }\n    expanded.push(...expandedLast.map(s => init + s));\n    expanded.push(...irregularExpansion);\n  }\n  const expandedMap = {};\n  for (let i = 0; i < expanded.length; i += 1) {\n    expandedMap[expanded[i]] = 1;\n  }\n  if (!isAdjective) {\n    delete expandedMap['아니'];\n    delete expandedMap['입'];\n    delete expandedMap['입니'];\n    delete expandedMap['나는'];\n  }\n  return expandedMap;\n}\nmodule.exports = {\n  conjugate\n};","map":{"version":3,"names":["decomposeHangul","composeHangul","hasCoda","require","preEomis","build","lastChar","list","result","i","length","eomis","j","push","buildCommon","onset","vowel","map","coda","buildNoPast","conjugate","words","isAdjective","expanded","word","init","substr","lastCharDecomposed","lastOnset","lastVowel","lastCoda","expandedLast","concat","irregularExpansion","initLast","lastInitCharDecomposed","newInit","slice","o","conjugation","s","expandedMap","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/lang-ko/src/korean-conjugation.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { decomposeHangul, composeHangul, hasCoda } = require('./hangul');\n\nconst preEomis = [\n  [...'게겠고구기긴길네다더던도든면자잖재져죠지진질'],\n  [...'야서써도준'],\n  [...'어었'],\n  [...'아았'],\n  [...'워웠'],\n  [...'여였'],\n  [...'노느니냐'],\n  [...'러려며'],\n  ['으'],\n  ['은'],\n  ['는'],\n  ['운'],\n  [...'세시실신셔습셨십'],\n  [\n    ...[...'게겠고구기긴길네다더던도든면자잖재져죠지진질'],\n    ...[...'노느니냐'],\n    ...[...'러려며'],\n    ...[...'세시실신셔습셨십'],\n  ],\n];\n\nfunction build(lastChar, list) {\n  const result = [];\n  for (let i = 0; i < list.length; i += 1) {\n    const eomis = preEomis[list[i]];\n    for (let j = 0; j < eomis.length; j += 1) {\n      result.push(lastChar + eomis[j]);\n    }\n  }\n  return result;\n}\n\nfunction buildCommon(onset, vowel) {\n  return ['ㅂ', 'ㅆ', 'ㄹ', 'ㄴ', 'ㅁ'].map((coda) =>\n    composeHangul(onset, vowel, coda)\n  );\n}\n\nfunction buildNoPast(onset, vowel) {\n  return ['ㅂ', 'ㄹ', 'ㄴ', 'ㅁ'].map((coda) =>\n    composeHangul(onset, vowel, coda)\n  );\n}\n\nfunction conjugate(words, isAdjective) {\n  const expanded = [];\n  for (const word of words) {\n    const init = word.substr(0, word.length - 1);\n    const lastChar = word.substr(-1);\n    const lastCharDecomposed = decomposeHangul(lastChar);\n    const lastOnset = lastCharDecomposed.onset;\n    const lastVowel = lastCharDecomposed.vowel;\n    const lastCoda = lastCharDecomposed.coda;\n    let expandedLast;\n    if (lastChar === '하') {\n      expandedLast = [\n        ...build(lastChar, [0, 6, 10, 12]),\n        ...['ㅂ', 'ㅆ', 'ㄹ', 'ㄴ', 'ㅁ'].map((coda) =>\n          composeHangul('ㅎ', coda === 'ㅆ' ? 'ㅐ' : 'ㅏ', coda)\n        ),\n        ...build('하', [13, 5, 10]),\n        ...build('해', [1]),\n        ...[...(isAdjective ? '합해히하' : '합해')],\n      ];\n    } else if (lastVowel === 'ㅗ' && lastCoda === ' ') {\n      expandedLast = [].concat(\n        build(lastChar, [13, 6, 3, 10]),\n        buildNoPast(lastOnset, 'ㅗ'),\n        [\n          composeHangul(lastOnset, 'ㅘ'),\n          composeHangul(lastOnset, 'ㅘ', 'ㅆ'),\n          lastChar,\n        ]\n      );\n    } else if (lastVowel === 'ㅜ' && lastCoda === ' ') {\n      expandedLast = [].concat(\n        build(lastChar, [13, 2, 6, 10]),\n        buildNoPast(lastOnset, 'ㅜ'),\n        [\n          composeHangul(lastOnset, 'ㅝ'),\n          composeHangul(lastOnset, 'ㅝ', 'ㅆ'),\n          lastChar,\n        ]\n      );\n    } else if (lastVowel === 'ㅡ' && lastCoda === ' ') {\n      expandedLast = [].concat(\n        build(lastChar, [6, 10]),\n        buildNoPast(lastOnset, 'ㅡ'),\n        [\n          composeHangul(lastOnset, 'ㅝ'),\n          composeHangul(lastOnset, 'ㅓ'),\n          composeHangul(lastOnset, 'ㅏ'),\n          composeHangul(lastOnset, 'ㅝ', 'ㅆ'),\n          composeHangul(lastOnset, 'ㅓ', 'ㅆ'),\n          composeHangul(lastOnset, 'ㅏ', 'ㅆ'),\n          lastChar,\n        ]\n      );\n    } else if (lastChar === '귀') {\n      expandedLast = [].concat(\n        build(lastChar, [6, 10]),\n        buildNoPast('ㄱ', 'ㅟ'),\n        ['겨', '겼', lastChar]\n      );\n    } else if (lastVowel === 'ㅟ' && lastCoda === ' ') {\n      expandedLast = [].concat(\n        buildNoPast(lastOnset, 'ㅟ'),\n        build(lastChar, [6, 10]),\n        [lastChar]\n      );\n    } else if (lastVowel === 'ㅣ' && lastCoda === ' ') {\n      expandedLast = [].concat(\n        buildNoPast(lastOnset, 'ㅣ'),\n        build(lastChar, [2, 6, 10]),\n        [\n          `${composeHangul(lastOnset, 'ㅣ', 'ㅂ')}니`,\n          composeHangul(lastOnset, 'ㅕ'),\n          composeHangul(lastOnset, 'ㅕ', 'ㅆ'),\n          lastChar,\n        ]\n      );\n    } else if (\n      (lastVowel === 'ㅞ' || lastVowel === 'ㅚ' || lastVowel === 'ㅙ') &&\n      lastCoda === ' '\n    ) {\n      expandedLast = [].concat(\n        build(lastChar, [6, 10]),\n        buildCommon(lastOnset, lastVowel),\n        [lastChar]\n      );\n    } else if (lastCoda === ' ') {\n      expandedLast = [].concat(\n        build(lastChar, [13, 1, 6, 10]),\n        buildCommon(lastOnset, lastVowel),\n        [lastChar]\n      );\n    } else if (\n      lastCoda === 'ㄹ' &&\n      ((lastOnset === 'ㅁ' && lastVowel === 'ㅓ') ||\n        lastVowel === 'ㅡ' ||\n        lastVowel === 'ㅏ' ||\n        lastVowel === 'ㅜ')\n    ) {\n      expandedLast = [].concat(\n        build(lastChar, [2, 7]),\n        build(composeHangul(lastOnset, lastVowel), [6, 10, 12]),\n        [\n          composeHangul(lastOnset, lastVowel, 'ㄻ'),\n          composeHangul(lastOnset, lastVowel, 'ㄴ'),\n          lastChar,\n        ]\n      );\n    } else if (lastVowel === 'ㅏ' && lastCoda === 'ㅅ') {\n      expandedLast = [].concat(\n        build(lastChar, [6, 10]),\n        build(composeHangul(lastOnset, 'ㅏ'), [8, 9]),\n        [lastChar]\n      );\n    } else if (lastChar === '묻') {\n      expandedLast = [].concat(build(lastChar, [6, 10]), ['물', lastChar]);\n    } else if (lastVowel === 'ㅜ' && lastCoda === 'ㄷ') {\n      expandedLast = [].concat(\n        build(lastChar, [6, 10]),\n        build(composeHangul(lastOnset, 'ㅜ'), [2, 4, 8, 9]),\n        [composeHangul(lastOnset, 'ㅜ', 'ㄹ'), lastChar]\n      );\n    } else if (lastVowel === 'ㅜ' && lastCoda === 'ㅂ') {\n      expandedLast = [].concat(\n        build(lastChar, [6, 10]),\n        build(composeHangul(lastOnset, 'ㅜ'), [4, 8, 9]),\n        [lastChar]\n      );\n    } else if (lastVowel === 'ㅓ' && lastCoda === 'ㅂ' && isAdjective) {\n      expandedLast = [].concat(build(composeHangul(lastOnset, 'ㅓ'), [4, 11]), [\n        composeHangul(lastOnset, 'ㅓ'),\n        composeHangul(lastOnset, 'ㅓ', 'ㄴ'),\n        lastChar,\n      ]);\n    } else if (lastCoda === 'ㅂ' && isAdjective) {\n      expandedLast = [].concat(\n        build(composeHangul(lastOnset, lastVowel), [4, 11]),\n        [composeHangul(lastOnset, lastVowel), lastChar]\n      );\n    } else if (lastVowel === 'ㅗ' && lastCoda === 'ㅎ') {\n      expandedLast = [].concat(\n        build(lastChar, [6, 10]),\n        buildCommon(lastOnset, 'ㅗ'),\n        [\n          composeHangul(lastOnset, 'ㅘ'),\n          composeHangul(lastOnset, 'ㅗ'),\n          lastChar,\n        ]\n      );\n    } else if (lastCoda === 'ㅎ' && isAdjective) {\n      expandedLast = [].concat(\n        buildCommon(lastOnset, lastVowel),\n        ['ㅆ', 'ㄹ', 'ㅁ'].map((coda) => composeHangul(lastOnset, 'ㅐ', coda)),\n        [\n          composeHangul(lastOnset, 'ㅐ'),\n          composeHangul(lastOnset, lastVowel),\n          lastChar,\n        ]\n      );\n    } else if (word.length === 1 || (isAdjective && lastCoda === 'ㅆ')) {\n      expandedLast = [].concat(build(lastChar, [0, 2, 3, 6, 8, 9, 10]), [\n        lastChar,\n      ]);\n      // eslint-disable-next-line no-dupe-else-if\n    } else if (word.length === 1 && isAdjective) {\n      expandedLast = [].concat(build(lastChar, [0, 2, 3, 6, 8, 9]), [lastChar]);\n    } else {\n      expandedLast = [lastChar];\n    }\n    let irregularExpansion = [];\n    const initLast = init[init.length - 1];\n    if (initLast && lastChar === '르' && !hasCoda(initLast)) {\n      const lastInitCharDecomposed = decomposeHangul(initLast);\n      const newInit =\n        init.slice(0, -1) +\n        composeHangul(\n          lastInitCharDecomposed.onset,\n          lastInitCharDecomposed.vowel,\n          'ㄹ'\n        );\n\n      const o = lastCharDecomposed.onset;\n      const conjugation = [].concat(\n        build(lastChar, [6, 10]),\n        buildNoPast(o, 'ㅡ'),\n        [\n          composeHangul(o, 'ㅝ'),\n          composeHangul(o, 'ㅓ'),\n          composeHangul(o, 'ㅏ'),\n          composeHangul(o, 'ㅝ', 'ㅆ'),\n          composeHangul(o, 'ㅓ', 'ㅆ'),\n          composeHangul(o, 'ㅏ', 'ㅆ'),\n          lastChar,\n        ]\n      );\n      irregularExpansion = conjugation.map((s) => newInit + s);\n    }\n    expanded.push(...expandedLast.map((s) => init + s));\n    expanded.push(...irregularExpansion);\n  }\n\n  const expandedMap = {};\n  for (let i = 0; i < expanded.length; i += 1) {\n    expandedMap[expanded[i]] = 1;\n  }\n  if (!isAdjective) {\n    delete expandedMap['아니'];\n    delete expandedMap['입'];\n    delete expandedMap['입니'];\n    delete expandedMap['나는'];\n  }\n  return expandedMap;\n}\n\nmodule.exports = {\n  conjugate,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}