{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  Clonable\n} = require('@nlpjs/core');\n\n/**\n * Action Manager.\n * It stores the actions that should be executed for a given intent.\n */\nclass ActionManager extends Clonable {\n  /**\n   * Constructor of the class\n   */\n  constructor(settings = {}, container) {\n    super({\n      settings: {},\n      container: settings.container || container\n    }, container);\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'action-manager';\n    }\n    this.registerDefault();\n    this.applySettings(this.settings, this.container.getConfiguration(this.settings.tag));\n    this.actions = {};\n    this.actionsMap = {};\n    this.applySettings(this, {\n      pipelineFind: this.getPipeline(`${this.settings.tag}-find`)\n    });\n  }\n  registerDefault() {}\n\n  /**\n   * Find the index of an action\n   * @param {String} intent Name of the intent.\n   * @param {String} action Name of the action.\n   * @param {any[]} parameters list of parameters of the action.\n   */\n  posAction(intent, action, parameters) {\n    if (!this.actions[intent]) {\n      return -1;\n    }\n    const actions = this.actions[intent];\n    for (let i = 0; i < actions.length; i += 1) {\n      if (actions[i].action === action && JSON.stringify(actions[i].parameters) === JSON.stringify(parameters)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Return an array of actions for the intent.\n   * @param {String} intent Name of the intent.\n   * @returns {Object[]} Actions for this intent.\n   */\n  findActions(intent) {\n    const dehydratedActions = this.actions[intent] || [];\n    return dehydratedActions.map(actionBundle => ({\n      ...actionBundle,\n      fn: this.actionsMap[actionBundle.action]\n    }));\n  }\n\n  /**\n   * Returns a processed answer after execute a list of given actions.\n   * @param {String} intent Name of the intent.\n   * @param {String|Object} input original answer data structure\n   */\n  async processActions(intent, input) {\n    const actionList = this.findActions(intent);\n    if (input && typeof input === 'object') {\n      input.actions = actionList.map(x => ({\n        action: x.action,\n        parameters: x.parameters\n      }));\n    }\n    let processedAnswer = input;\n    for (const {\n      fn,\n      parameters\n    } of actionList) {\n      if (fn) {\n        const newProcessedAnswer = await fn(processedAnswer, ...(parameters || []));\n        if (newProcessedAnswer) {\n          if (typeof processedAnswer === 'object') {\n            if (typeof newProcessedAnswer === 'object') {\n              processedAnswer = newProcessedAnswer;\n            } else {\n              processedAnswer.answer = newProcessedAnswer;\n            }\n          } else {\n            processedAnswer = newProcessedAnswer;\n          }\n        }\n      }\n    }\n    return processedAnswer;\n  }\n\n  /**\n   * Add an action to a given intent.\n   * @param {String} intent Name of the intent.\n   * @param {String} action Action to be executed\n   * @param {any[]} parameters Parameters of the action\n   * @param {function} [fn] Function of the action\n   */\n  addAction(intent, action, parameters, fn) {\n    if (this.posAction(intent, action, parameters) === -1) {\n      if (!this.actions[intent]) {\n        this.actions[intent] = [];\n      }\n      this.actions[intent].push({\n        action,\n        parameters\n      });\n      if (fn) {\n        this.actionsMap[action] = fn;\n      }\n    }\n  }\n\n  /**\n   * Remove an action.\n   * @param {String} intent Name of the intent\n   * @param {String} action Name of the action\n   * @param {Object[]} parameters Parameters of the action.\n   */\n  removeAction(intent, action, parameters) {\n    const index = this.posAction(intent, action, parameters);\n    if (index > -1) {\n      this.actions[intent].splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove all the actions of a given intent.\n   * @param {String} intent Name of the intent.\n   */\n  removeActions(intent) {\n    delete this.actions[intent];\n  }\n\n  /**\n   * Registers/Sets a function for a given action\n   * @param {String} action Name of the action.\n   * @param {function} [fn] Function of the action\n   */\n  registerActionInMap(action, fn) {\n    this.actionsMap[action] = fn;\n  }\n\n  /**\n   * Remove an action function from the actions map.\n   * @param {String} action Name of the action.\n   */\n  removeActionFromMap(action) {\n    delete this.actionsMap[action];\n  }\n  run(srcInput, settings) {\n    const input = srcInput;\n    input.settings = input.settings || settings || this.settings;\n    return this.processActions(srcInput.intent, input);\n  }\n  toJSON() {\n    const result = {\n      settings: {\n        ...this.settings\n      },\n      actions: this.actions\n    };\n    delete result.settings.container;\n    return result;\n  }\n  fromJSON(json) {\n    this.applySettings(this.settings, json.settings);\n    this.actions = json.actions;\n  }\n}\nmodule.exports = ActionManager;","map":{"version":3,"names":["Clonable","require","ActionManager","constructor","settings","container","applySettings","tag","registerDefault","getConfiguration","actions","actionsMap","pipelineFind","getPipeline","posAction","intent","action","parameters","i","length","JSON","stringify","findActions","dehydratedActions","map","actionBundle","fn","processActions","input","actionList","x","processedAnswer","newProcessedAnswer","answer","addAction","push","removeAction","index","splice","removeActions","registerActionInMap","removeActionFromMap","run","srcInput","toJSON","result","fromJSON","json","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/nlg/src/action-manager.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { Clonable } = require('@nlpjs/core');\n\n/**\n * Action Manager.\n * It stores the actions that should be executed for a given intent.\n */\nclass ActionManager extends Clonable {\n  /**\n   * Constructor of the class\n   */\n  constructor(settings = {}, container) {\n    super(\n      {\n        settings: {},\n        container: settings.container || container,\n      },\n      container\n    );\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'action-manager';\n    }\n    this.registerDefault();\n    this.applySettings(\n      this.settings,\n      this.container.getConfiguration(this.settings.tag)\n    );\n    this.actions = {};\n    this.actionsMap = {};\n    this.applySettings(this, {\n      pipelineFind: this.getPipeline(`${this.settings.tag}-find`),\n    });\n  }\n\n  registerDefault() {}\n\n  /**\n   * Find the index of an action\n   * @param {String} intent Name of the intent.\n   * @param {String} action Name of the action.\n   * @param {any[]} parameters list of parameters of the action.\n   */\n  posAction(intent, action, parameters) {\n    if (!this.actions[intent]) {\n      return -1;\n    }\n    const actions = this.actions[intent];\n    for (let i = 0; i < actions.length; i += 1) {\n      if (\n        actions[i].action === action &&\n        JSON.stringify(actions[i].parameters) === JSON.stringify(parameters)\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Return an array of actions for the intent.\n   * @param {String} intent Name of the intent.\n   * @returns {Object[]} Actions for this intent.\n   */\n  findActions(intent) {\n    const dehydratedActions = this.actions[intent] || [];\n\n    return dehydratedActions.map((actionBundle) => ({\n      ...actionBundle,\n      fn: this.actionsMap[actionBundle.action],\n    }));\n  }\n\n  /**\n   * Returns a processed answer after execute a list of given actions.\n   * @param {String} intent Name of the intent.\n   * @param {String|Object} input original answer data structure\n   */\n  async processActions(intent, input) {\n    const actionList = this.findActions(intent);\n    if (input && typeof input === 'object') {\n      input.actions = actionList.map((x) => ({\n        action: x.action,\n        parameters: x.parameters,\n      }));\n    }\n    let processedAnswer = input;\n\n    for (const { fn, parameters } of actionList) {\n      if (fn) {\n        const newProcessedAnswer = await fn(\n          processedAnswer,\n          ...(parameters || [])\n        );\n        if (newProcessedAnswer) {\n          if (typeof processedAnswer === 'object') {\n            if (typeof newProcessedAnswer === 'object') {\n              processedAnswer = newProcessedAnswer;\n            } else {\n              processedAnswer.answer = newProcessedAnswer;\n            }\n          } else {\n            processedAnswer = newProcessedAnswer;\n          }\n        }\n      }\n    }\n\n    return processedAnswer;\n  }\n\n  /**\n   * Add an action to a given intent.\n   * @param {String} intent Name of the intent.\n   * @param {String} action Action to be executed\n   * @param {any[]} parameters Parameters of the action\n   * @param {function} [fn] Function of the action\n   */\n  addAction(intent, action, parameters, fn) {\n    if (this.posAction(intent, action, parameters) === -1) {\n      if (!this.actions[intent]) {\n        this.actions[intent] = [];\n      }\n      this.actions[intent].push({ action, parameters });\n      if (fn) {\n        this.actionsMap[action] = fn;\n      }\n    }\n  }\n\n  /**\n   * Remove an action.\n   * @param {String} intent Name of the intent\n   * @param {String} action Name of the action\n   * @param {Object[]} parameters Parameters of the action.\n   */\n  removeAction(intent, action, parameters) {\n    const index = this.posAction(intent, action, parameters);\n    if (index > -1) {\n      this.actions[intent].splice(index, 1);\n    }\n  }\n\n  /**\n   * Remove all the actions of a given intent.\n   * @param {String} intent Name of the intent.\n   */\n  removeActions(intent) {\n    delete this.actions[intent];\n  }\n\n  /**\n   * Registers/Sets a function for a given action\n   * @param {String} action Name of the action.\n   * @param {function} [fn] Function of the action\n   */\n  registerActionInMap(action, fn) {\n    this.actionsMap[action] = fn;\n  }\n\n  /**\n   * Remove an action function from the actions map.\n   * @param {String} action Name of the action.\n   */\n  removeActionFromMap(action) {\n    delete this.actionsMap[action];\n  }\n\n  run(srcInput, settings) {\n    const input = srcInput;\n    input.settings = input.settings || settings || this.settings;\n    return this.processActions(srcInput.intent, input);\n  }\n\n  toJSON() {\n    const result = {\n      settings: { ...this.settings },\n      actions: this.actions,\n    };\n    delete result.settings.container;\n    return result;\n  }\n\n  fromJSON(json) {\n    this.applySettings(this.settings, json.settings);\n    this.actions = json.actions;\n  }\n}\n\nmodule.exports = ActionManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}