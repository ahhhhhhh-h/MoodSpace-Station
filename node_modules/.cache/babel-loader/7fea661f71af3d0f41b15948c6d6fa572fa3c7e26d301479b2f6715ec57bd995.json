{"ast":null,"code":"var _EmotionAnalyzer;\nimport { SentimentAnalyzer } from 'node-nlp';\nexport class EmotionAnalyzer {\n  constructor() {\n    this.analyzer = void 0;\n    this.lastAnalysis = null;\n    this.analysisHistory = [];\n    this.analyzer = new SentimentAnalyzer({\n      language: 'zh'\n      // 可选的配置参数\n      // stemmer: true,        // 词干提取\n      // tokenizer: true,      // 分词\n    });\n\n    // 添加自定义词典\n    this.initializeCustomDictionary();\n  }\n  static getInstance() {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n  initializeCustomDictionary() {\n    // 这里可以添加自定义的情感词典\n    // 注意：node-nlp 的 addWord 方法可能在某些版本中不可用\n    try {\n      // @ts-ignore\n      if (typeof this.analyzer.addWord === 'function') {\n        // 添加积极情感词\n        [{\n          word: '开心',\n          score: 2\n        }, {\n          word: '快乐',\n          score: 2\n        }, {\n          word: '高兴',\n          score: 2\n        }, {\n          word: '喜欢',\n          score: 1.5\n        }, {\n          word: '爱',\n          score: 2\n        }, {\n          word: '棒',\n          score: 1.5\n        }, {\n          word: '好',\n          score: 1\n        }, {\n          word: '优秀',\n          score: 1.5\n        }, {\n          word: '感恩',\n          score: 1.5\n        }, {\n          word: '希望',\n          score: 1\n        }, {\n          word: '加油',\n          score: 1.5\n        }, {\n          word: '美好',\n          score: 1.5\n        }, {\n          word: '温暖',\n          score: 1.5\n        }].forEach(({\n          word,\n          score\n        }) => {\n          // @ts-ignore\n          this.analyzer.addWord(word, score);\n        });\n\n        // 添加消极情感词\n        [{\n          word: '难过',\n          score: -2\n        }, {\n          word: '伤心',\n          score: -2\n        }, {\n          word: '痛苦',\n          score: -2\n        }, {\n          word: '讨厌',\n          score: -1.5\n        }, {\n          word: '烦',\n          score: -1.5\n        }, {\n          word: '糟糕',\n          score: -1.5\n        }, {\n          word: '失望',\n          score: -1.5\n        }, {\n          word: '焦虑',\n          score: -1.5\n        }, {\n          word: '生气',\n          score: -1.5\n        }, {\n          word: '疲惫',\n          score: -1\n        }, {\n          word: '孤独',\n          score: -1.5\n        }, {\n          word: '压力',\n          score: -1\n        }, {\n          word: '担心',\n          score: -1\n        }].forEach(({\n          word,\n          score\n        }) => {\n          // @ts-ignore\n          this.analyzer.addWord(word, score);\n        });\n      }\n    } catch (error) {\n      console.warn('添加自定义词典失败，将使用默认词典', error);\n    }\n  }\n  adjustScoreBasedOnContext(text, score) {\n    let adjustedScore = score;\n\n    // 1. 检查表情符号\n    const positiveEmojis = ['😊', '😄', '😃', '😀', '😁', '😆', '😅', '😂', '🤣', '❤️', '🥰', '✨'];\n    const negativeEmojis = ['😢', '😭', '😞', '😔', '😟', '😕', '😣', '😖', '😫', '😩', '😱', '😨'];\n    positiveEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore += 0.2;\n    });\n    negativeEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore -= 0.2;\n    });\n\n    // 2. 检查标点符号\n    const exclamationCount = (text.match(/!|！/g) || []).length;\n    adjustedScore += exclamationCount * 0.1; // 感叹号通常表示强烈情感\n\n    // 3. 检查程度词\n    const degreeWords = {\n      '非常': 0.3,\n      '很': 0.2,\n      '特别': 0.2,\n      '真': 0.2,\n      '太': 0.2,\n      '好': 0.1\n    };\n    Object.entries(degreeWords).forEach(([word, value]) => {\n      if (text.includes(word)) {\n        adjustedScore = adjustedScore > 0 ? adjustedScore + value : adjustedScore - value;\n      }\n    });\n\n    // 4. 考虑历史分析结果（情感连续性）\n    if (this.lastAnalysis && this.lastAnalysis.result === 'positive') {\n      adjustedScore += 0.1; // 轻微偏向上一次的情感\n    } else if (this.lastAnalysis && this.lastAnalysis.result === 'negative') {\n      adjustedScore -= 0.1;\n    }\n    return adjustedScore;\n  }\n  async analyzeEmotion(text) {\n    try {\n      const result = await this.analyzer.getSentiment(text);\n\n      // 1. 获取基础分数\n      let score = result.score;\n\n      // 2. 根据上下文调整分数\n      score = this.adjustScoreBasedOnContext(text, score);\n\n      // 3. 确定情感类型\n      let emotionType;\n      if (score > 0.15) {\n        // 提高积极情感的阈值\n        emotionType = 'positive';\n      } else if (score < -0.1) {\n        // 降低消极情感的阈值，使系统更容易识别消极情感\n        emotionType = 'negative';\n      } else {\n        // 对于中性情感，我们根据更多特征来判断\n        const hasPositiveWords = result.positive.length > 0;\n        const hasNegativeWords = result.negative.length > 0;\n        if (hasPositiveWords && !hasNegativeWords) {\n          emotionType = 'positive';\n        } else if (hasNegativeWords && !hasPositiveWords) {\n          emotionType = 'negative';\n        } else {\n          // 如果还是无法判断，保持积极倾向\n          emotionType = 'positive';\n        }\n      }\n\n      // 4. 更新分析历史\n      this.lastAnalysis = {\n        text,\n        result: emotionType\n      };\n      this.analysisHistory.push({\n        text,\n        result: emotionType\n      });\n      if (this.analysisHistory.length > 10) {\n        this.analysisHistory.shift(); // 保持历史记录在合理范围内\n      }\n      return emotionType;\n    } catch (error) {\n      console.error('情感分析出错:', error);\n      // 如果分析出错，根据历史记录返回一个可能的结果\n      if (this.lastAnalysis) {\n        return this.lastAnalysis.result;\n      }\n      // 如果没有历史记录，返回积极\n      return 'positive';\n    }\n  }\n\n  // 用于调试和优化的方法\n  getAnalysisStats() {\n    return {\n      historyLength: this.analysisHistory.length,\n      positiveCount: this.analysisHistory.filter(item => item.result === 'positive').length,\n      negativeCount: this.analysisHistory.filter(item => item.result === 'negative').length,\n      lastAnalysis: this.lastAnalysis\n    };\n  }\n}\n_EmotionAnalyzer = EmotionAnalyzer;\nEmotionAnalyzer.instance = void 0;","map":{"version":3,"names":["SentimentAnalyzer","EmotionAnalyzer","constructor","analyzer","lastAnalysis","analysisHistory","language","initializeCustomDictionary","getInstance","instance","addWord","word","score","forEach","error","console","warn","adjustScoreBasedOnContext","text","adjustedScore","positiveEmojis","negativeEmojis","emoji","includes","exclamationCount","match","length","degreeWords","Object","entries","value","result","analyzeEmotion","getSentiment","emotionType","hasPositiveWords","positive","hasNegativeWords","negative","push","shift","getAnalysisStats","historyLength","positiveCount","filter","item","negativeCount","_EmotionAnalyzer"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/src/utils/EmotionAnalyzer.ts"],"sourcesContent":["import { SentimentAnalyzer } from 'node-nlp';\nimport { EmotionType } from '../types';\n\nexport class EmotionAnalyzer {\n  private analyzer: SentimentAnalyzer;\n  private static instance: EmotionAnalyzer;\n  private lastAnalysis: { text: string; result: EmotionType } | null = null;\n  private analysisHistory: Array<{ text: string; result: EmotionType }> = [];\n\n  private constructor() {\n    this.analyzer = new SentimentAnalyzer({ \n      language: 'zh',\n      // 可选的配置参数\n      // stemmer: true,        // 词干提取\n      // tokenizer: true,      // 分词\n    });\n\n    // 添加自定义词典\n    this.initializeCustomDictionary();\n  }\n\n  public static getInstance(): EmotionAnalyzer {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n\n  private initializeCustomDictionary() {\n    // 这里可以添加自定义的情感词典\n    // 注意：node-nlp 的 addWord 方法可能在某些版本中不可用\n    try {\n      // @ts-ignore\n      if (typeof this.analyzer.addWord === 'function') {\n        // 添加积极情感词\n        [\n          { word: '开心', score: 2 },\n          { word: '快乐', score: 2 },\n          { word: '高兴', score: 2 },\n          { word: '喜欢', score: 1.5 },\n          { word: '爱', score: 2 },\n          { word: '棒', score: 1.5 },\n          { word: '好', score: 1 },\n          { word: '优秀', score: 1.5 },\n          { word: '感恩', score: 1.5 },\n          { word: '希望', score: 1 },\n          { word: '加油', score: 1.5 },\n          { word: '美好', score: 1.5 },\n          { word: '温暖', score: 1.5 }\n        ].forEach(({ word, score }) => {\n          // @ts-ignore\n          this.analyzer.addWord(word, score);\n        });\n\n        // 添加消极情感词\n        [\n          { word: '难过', score: -2 },\n          { word: '伤心', score: -2 },\n          { word: '痛苦', score: -2 },\n          { word: '讨厌', score: -1.5 },\n          { word: '烦', score: -1.5 },\n          { word: '糟糕', score: -1.5 },\n          { word: '失望', score: -1.5 },\n          { word: '焦虑', score: -1.5 },\n          { word: '生气', score: -1.5 },\n          { word: '疲惫', score: -1 },\n          { word: '孤独', score: -1.5 },\n          { word: '压力', score: -1 },\n          { word: '担心', score: -1 }\n        ].forEach(({ word, score }) => {\n          // @ts-ignore\n          this.analyzer.addWord(word, score);\n        });\n      }\n    } catch (error) {\n      console.warn('添加自定义词典失败，将使用默认词典', error);\n    }\n  }\n\n  private adjustScoreBasedOnContext(text: string, score: number): number {\n    let adjustedScore = score;\n\n    // 1. 检查表情符号\n    const positiveEmojis = ['😊', '😄', '😃', '😀', '😁', '😆', '😅', '😂', '🤣', '❤️', '🥰', '✨'];\n    const negativeEmojis = ['😢', '😭', '😞', '😔', '😟', '😕', '😣', '😖', '😫', '😩', '😱', '😨'];\n\n    positiveEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore += 0.2;\n    });\n    negativeEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore -= 0.2;\n    });\n\n    // 2. 检查标点符号\n    const exclamationCount = (text.match(/!|！/g) || []).length;\n    adjustedScore += exclamationCount * 0.1; // 感叹号通常表示强烈情感\n\n    // 3. 检查程度词\n    const degreeWords = {\n      '非常': 0.3,\n      '很': 0.2,\n      '特别': 0.2,\n      '真': 0.2,\n      '太': 0.2,\n      '好': 0.1\n    };\n\n    Object.entries(degreeWords).forEach(([word, value]) => {\n      if (text.includes(word)) {\n        adjustedScore = adjustedScore > 0 ? adjustedScore + value : adjustedScore - value;\n      }\n    });\n\n    // 4. 考虑历史分析结果（情感连续性）\n    if (this.lastAnalysis && this.lastAnalysis.result === 'positive') {\n      adjustedScore += 0.1; // 轻微偏向上一次的情感\n    } else if (this.lastAnalysis && this.lastAnalysis.result === 'negative') {\n      adjustedScore -= 0.1;\n    }\n\n    return adjustedScore;\n  }\n\n  public async analyzeEmotion(text: string): Promise<EmotionType> {\n    try {\n      const result = await this.analyzer.getSentiment(text);\n      \n      // 1. 获取基础分数\n      let score = result.score;\n      \n      // 2. 根据上下文调整分数\n      score = this.adjustScoreBasedOnContext(text, score);\n      \n      // 3. 确定情感类型\n      let emotionType: EmotionType;\n      if (score > 0.15) { // 提高积极情感的阈值\n        emotionType = 'positive';\n      } else if (score < -0.1) { // 降低消极情感的阈值，使系统更容易识别消极情感\n        emotionType = 'negative';\n      } else {\n        // 对于中性情感，我们根据更多特征来判断\n        const hasPositiveWords = result.positive.length > 0;\n        const hasNegativeWords = result.negative.length > 0;\n        \n        if (hasPositiveWords && !hasNegativeWords) {\n          emotionType = 'positive';\n        } else if (hasNegativeWords && !hasPositiveWords) {\n          emotionType = 'negative';\n        } else {\n          // 如果还是无法判断，保持积极倾向\n          emotionType = 'positive';\n        }\n      }\n\n      // 4. 更新分析历史\n      this.lastAnalysis = { text, result: emotionType };\n      this.analysisHistory.push({ text, result: emotionType });\n      if (this.analysisHistory.length > 10) {\n        this.analysisHistory.shift(); // 保持历史记录在合理范围内\n      }\n\n      return emotionType;\n    } catch (error) {\n      console.error('情感分析出错:', error);\n      // 如果分析出错，根据历史记录返回一个可能的结果\n      if (this.lastAnalysis) {\n        return this.lastAnalysis.result;\n      }\n      // 如果没有历史记录，返回积极\n      return 'positive';\n    }\n  }\n\n  // 用于调试和优化的方法\n  public getAnalysisStats() {\n    return {\n      historyLength: this.analysisHistory.length,\n      positiveCount: this.analysisHistory.filter(item => item.result === 'positive').length,\n      negativeCount: this.analysisHistory.filter(item => item.result === 'negative').length,\n      lastAnalysis: this.lastAnalysis\n    };\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}