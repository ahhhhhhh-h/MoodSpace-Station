{"ast":null,"code":"var _EmotionAnalyzer;\nimport Sentiment from 'sentiment';\nexport class EmotionAnalyzer {\n  constructor() {\n    this.analyzer = void 0;\n    this.lastAnalysis = null;\n    this.analysisHistory = [];\n    this.analyzer = new Sentiment();\n\n    // 添加中文情感词典\n    this.analyzer.registerLanguage('zh', {\n      // 积极情感词\n      labels: {\n        '开心': 2,\n        '快乐': 2,\n        '高兴': 2,\n        '喜欢': 2,\n        '爱': 2,\n        '棒': 2,\n        '好': 1,\n        '优秀': 2,\n        '感恩': 2,\n        '希望': 1,\n        '加油': 2,\n        '美好': 2,\n        '温暖': 2,\n        '厉害': 2,\n        '出色': 2,\n        '精彩': 2,\n        '完美': 2,\n        '成功': 2,\n        '幸福': 2,\n        '可爱': 1,\n        '赞': 1,\n        '帅': 1,\n        '酷': 1,\n        '牛': 1,\n        '强': 1\n      },\n      // 消极情感词\n      negators: {\n        '难过': -2,\n        '伤心': -2,\n        '痛苦': -2,\n        '讨厌': -2,\n        '烦': -2,\n        '糟糕': -2,\n        '失望': -2,\n        '焦虑': -2,\n        '生气': -2,\n        '疲惫': -1,\n        '孤独': -2,\n        '压力': -1,\n        '担心': -1,\n        '害怕': -2,\n        '恐惧': -2,\n        '悲伤': -2,\n        '绝望': -2,\n        '崩溃': -2,\n        '痛': -1,\n        '累': -1,\n        '怕': -1,\n        '惨': -2,\n        '差': -1,\n        '弱': -1\n      }\n    });\n  }\n  static getInstance() {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n  adjustScoreBasedOnContext(text, score) {\n    let adjustedScore = score;\n\n    // 1. 检查表情符号\n    const positiveEmojis = ['😊', '😄', '😃', '😀', '😁', '😆', '😅', '😂', '🤣', '❤️', '🥰', '✨'];\n    const negativeEmojis = ['😢', '😭', '😞', '😔', '😟', '😕', '😣', '😖', '😫', '😩', '😱', '😨'];\n    positiveEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore += 2;\n    });\n    negativeEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore -= 2;\n    });\n\n    // 2. 检查标点符号\n    const exclamationCount = (text.match(/!|！/g) || []).length;\n    if (adjustedScore > 0) {\n      adjustedScore += exclamationCount; // 正面情感的感叹号加强正面效果\n    } else if (adjustedScore < 0) {\n      adjustedScore -= exclamationCount; // 负面情感的感叹号加强负面效果\n    }\n\n    // 3. 检查程度词\n    const degreeWords = {\n      '非常': 2,\n      '很': 1.5,\n      '特别': 1.5,\n      '真': 1.5,\n      '太': 1.5,\n      '超': 1.5,\n      '好': 1\n    };\n    Object.entries(degreeWords).forEach(([word, value]) => {\n      if (text.includes(word)) {\n        adjustedScore = adjustedScore > 0 ? adjustedScore + value : adjustedScore - value;\n      }\n    });\n\n    // 4. 考虑历史分析结果（情感连续性）\n    if (this.lastAnalysis && this.lastAnalysis.result === 'positive') {\n      adjustedScore += 0.5;\n    } else if (this.lastAnalysis && this.lastAnalysis.result === 'negative') {\n      adjustedScore -= 0.5;\n    }\n    return adjustedScore;\n  }\n  analyzeEmotion(text) {\n    try {\n      // 1. 获取基础分数\n      const result = this.analyzer.analyze(text);\n      let score = result.score;\n\n      // 2. 根据上下文调整分数\n      score = this.adjustScoreBasedOnContext(text, score);\n\n      // 3. 确定情感类型\n      let emotionType;\n      if (score > 0) {\n        emotionType = 'positive';\n      } else if (score < 0) {\n        emotionType = 'negative';\n      } else {\n        // 对于中性情感，我们根据更多特征来判断\n        const hasPositiveWords = result.positive.length > 0;\n        const hasNegativeWords = result.negative.length > 0;\n        if (hasPositiveWords && !hasNegativeWords) {\n          emotionType = 'positive';\n        } else if (hasNegativeWords && !hasPositiveWords) {\n          emotionType = 'negative';\n        } else {\n          // 如果同时存在积极词和消极词，根据词的数量和权重来判断\n          const positiveWeight = result.positive.reduce((sum, word) => {\n            var _result$calculation$f;\n            return sum + (((_result$calculation$f = result.calculation.find(c => c[word])) === null || _result$calculation$f === void 0 ? void 0 : _result$calculation$f[word]) || 0);\n          }, 0);\n          const negativeWeight = result.negative.reduce((sum, word) => {\n            var _result$calculation$f2;\n            return sum + (((_result$calculation$f2 = result.calculation.find(c => c[word])) === null || _result$calculation$f2 === void 0 ? void 0 : _result$calculation$f2[word]) || 0);\n          }, 0);\n          if (positiveWeight > Math.abs(negativeWeight)) {\n            emotionType = 'positive';\n          } else if (Math.abs(negativeWeight) > positiveWeight) {\n            emotionType = 'negative';\n          } else {\n            // 如果权重相等，返回中性\n            emotionType = 'received';\n          }\n        }\n      }\n\n      // 4. 更新分析历史\n      this.lastAnalysis = {\n        text,\n        result: emotionType\n      };\n      this.analysisHistory.push({\n        text,\n        result: emotionType\n      });\n      if (this.analysisHistory.length > 10) {\n        this.analysisHistory.shift();\n      }\n      return emotionType;\n    } catch (error) {\n      console.error('情感分析出错:', error);\n      // 如果分析出错，根据历史记录返回一个可能的结果\n      if (this.lastAnalysis) {\n        return this.lastAnalysis.result;\n      }\n      // 如果没有历史记录，返回中性\n      return 'received';\n    }\n  }\n\n  // 用于调试和优化的方法\n  getAnalysisStats() {\n    return {\n      historyLength: this.analysisHistory.length,\n      positiveCount: this.analysisHistory.filter(item => item.result === 'positive').length,\n      negativeCount: this.analysisHistory.filter(item => item.result === 'negative').length,\n      lastAnalysis: this.lastAnalysis\n    };\n  }\n}\n_EmotionAnalyzer = EmotionAnalyzer;\nEmotionAnalyzer.instance = void 0;","map":{"version":3,"names":["Sentiment","EmotionAnalyzer","constructor","analyzer","lastAnalysis","analysisHistory","registerLanguage","labels","negators","getInstance","instance","adjustScoreBasedOnContext","text","score","adjustedScore","positiveEmojis","negativeEmojis","forEach","emoji","includes","exclamationCount","match","length","degreeWords","Object","entries","word","value","result","analyzeEmotion","analyze","emotionType","hasPositiveWords","positive","hasNegativeWords","negative","positiveWeight","reduce","sum","_result$calculation$f","calculation","find","c","negativeWeight","_result$calculation$f2","Math","abs","push","shift","error","console","getAnalysisStats","historyLength","positiveCount","filter","item","negativeCount","_EmotionAnalyzer"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/src/utils/EmotionAnalyzer.ts"],"sourcesContent":["import Sentiment from 'sentiment';\nimport { EmotionType } from '../types';\n\nexport class EmotionAnalyzer {\n  private analyzer: Sentiment;\n  private static instance: EmotionAnalyzer;\n  private lastAnalysis: { text: string; result: EmotionType } | null = null;\n  private analysisHistory: Array<{ text: string; result: EmotionType }> = [];\n\n  private constructor() {\n    this.analyzer = new Sentiment();\n    \n    // 添加中文情感词典\n    this.analyzer.registerLanguage('zh', {\n      // 积极情感词\n      labels: {\n        '开心': 2,\n        '快乐': 2,\n        '高兴': 2,\n        '喜欢': 2,\n        '爱': 2,\n        '棒': 2,\n        '好': 1,\n        '优秀': 2,\n        '感恩': 2,\n        '希望': 1,\n        '加油': 2,\n        '美好': 2,\n        '温暖': 2,\n        '厉害': 2,\n        '出色': 2,\n        '精彩': 2,\n        '完美': 2,\n        '成功': 2,\n        '幸福': 2,\n        '可爱': 1,\n        '赞': 1,\n        '帅': 1,\n        '酷': 1,\n        '牛': 1,\n        '强': 1\n      },\n      // 消极情感词\n      negators: {\n        '难过': -2,\n        '伤心': -2,\n        '痛苦': -2,\n        '讨厌': -2,\n        '烦': -2,\n        '糟糕': -2,\n        '失望': -2,\n        '焦虑': -2,\n        '生气': -2,\n        '疲惫': -1,\n        '孤独': -2,\n        '压力': -1,\n        '担心': -1,\n        '害怕': -2,\n        '恐惧': -2,\n        '悲伤': -2,\n        '绝望': -2,\n        '崩溃': -2,\n        '痛': -1,\n        '累': -1,\n        '怕': -1,\n        '惨': -2,\n        '差': -1,\n        '弱': -1\n      }\n    });\n  }\n\n  public static getInstance(): EmotionAnalyzer {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n\n  private adjustScoreBasedOnContext(text: string, score: number): number {\n    let adjustedScore = score;\n\n    // 1. 检查表情符号\n    const positiveEmojis = ['😊', '😄', '😃', '😀', '😁', '😆', '😅', '😂', '🤣', '❤️', '🥰', '✨'];\n    const negativeEmojis = ['😢', '😭', '😞', '😔', '😟', '😕', '😣', '😖', '😫', '😩', '😱', '😨'];\n\n    positiveEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore += 2;\n    });\n    negativeEmojis.forEach(emoji => {\n      if (text.includes(emoji)) adjustedScore -= 2;\n    });\n\n    // 2. 检查标点符号\n    const exclamationCount = (text.match(/!|！/g) || []).length;\n    if (adjustedScore > 0) {\n      adjustedScore += exclamationCount; // 正面情感的感叹号加强正面效果\n    } else if (adjustedScore < 0) {\n      adjustedScore -= exclamationCount; // 负面情感的感叹号加强负面效果\n    }\n\n    // 3. 检查程度词\n    const degreeWords = {\n      '非常': 2,\n      '很': 1.5,\n      '特别': 1.5,\n      '真': 1.5,\n      '太': 1.5,\n      '超': 1.5,\n      '好': 1\n    };\n\n    Object.entries(degreeWords).forEach(([word, value]) => {\n      if (text.includes(word)) {\n        adjustedScore = adjustedScore > 0 ? adjustedScore + value : adjustedScore - value;\n      }\n    });\n\n    // 4. 考虑历史分析结果（情感连续性）\n    if (this.lastAnalysis && this.lastAnalysis.result === 'positive') {\n      adjustedScore += 0.5;\n    } else if (this.lastAnalysis && this.lastAnalysis.result === 'negative') {\n      adjustedScore -= 0.5;\n    }\n\n    return adjustedScore;\n  }\n\n  public analyzeEmotion(text: string): EmotionType {\n    try {\n      // 1. 获取基础分数\n      const result = this.analyzer.analyze(text);\n      let score = result.score;\n      \n      // 2. 根据上下文调整分数\n      score = this.adjustScoreBasedOnContext(text, score);\n      \n      // 3. 确定情感类型\n      let emotionType: EmotionType;\n      if (score > 0) {\n        emotionType = 'positive';\n      } else if (score < 0) {\n        emotionType = 'negative';\n      } else {\n        // 对于中性情感，我们根据更多特征来判断\n        const hasPositiveWords = result.positive.length > 0;\n        const hasNegativeWords = result.negative.length > 0;\n        \n        if (hasPositiveWords && !hasNegativeWords) {\n          emotionType = 'positive';\n        } else if (hasNegativeWords && !hasPositiveWords) {\n          emotionType = 'negative';\n        } else {\n          // 如果同时存在积极词和消极词，根据词的数量和权重来判断\n          const positiveWeight = result.positive.reduce((sum, word) => sum + (result.calculation.find(c => c[word])?.[word] || 0), 0);\n          const negativeWeight = result.negative.reduce((sum, word) => sum + (result.calculation.find(c => c[word])?.[word] || 0), 0);\n          \n          if (positiveWeight > Math.abs(negativeWeight)) {\n            emotionType = 'positive';\n          } else if (Math.abs(negativeWeight) > positiveWeight) {\n            emotionType = 'negative';\n          } else {\n            // 如果权重相等，返回中性\n            emotionType = 'received';\n          }\n        }\n      }\n\n      // 4. 更新分析历史\n      this.lastAnalysis = { text, result: emotionType };\n      this.analysisHistory.push({ text, result: emotionType });\n      if (this.analysisHistory.length > 10) {\n        this.analysisHistory.shift();\n      }\n\n      return emotionType;\n    } catch (error) {\n      console.error('情感分析出错:', error);\n      // 如果分析出错，根据历史记录返回一个可能的结果\n      if (this.lastAnalysis) {\n        return this.lastAnalysis.result;\n      }\n      // 如果没有历史记录，返回中性\n      return 'received';\n    }\n  }\n\n  // 用于调试和优化的方法\n  public getAnalysisStats() {\n    return {\n      historyLength: this.analysisHistory.length,\n      positiveCount: this.analysisHistory.filter(item => item.result === 'positive').length,\n      negativeCount: this.analysisHistory.filter(item => item.result === 'negative').length,\n      lastAnalysis: this.lastAnalysis\n    };\n  }\n} "],"mappings":";AAAA,OAAOA,SAAS,MAAM,WAAW;AAGjC,OAAO,MAAMC,eAAe,CAAC;EAMnBC,WAAWA,CAAA,EAAG;IAAA,KALdC,QAAQ;IAAA,KAERC,YAAY,GAAiD,IAAI;IAAA,KACjEC,eAAe,GAAiD,EAAE;IAGxE,IAAI,CAACF,QAAQ,GAAG,IAAIH,SAAS,CAAC,CAAC;;IAE/B;IACA,IAAI,CAACG,QAAQ,CAACG,gBAAgB,CAAC,IAAI,EAAE;MACnC;MACAC,MAAM,EAAE;QACN,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE;MACP,CAAC;MACD;MACAC,QAAQ,EAAE;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,GAAG,EAAE,CAAC,CAAC;QACP,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,IAAI,EAAE,CAAC,CAAC;QACR,GAAG,EAAE,CAAC,CAAC;QACP,GAAG,EAAE,CAAC,CAAC;QACP,GAAG,EAAE,CAAC,CAAC;QACP,GAAG,EAAE,CAAC,CAAC;QACP,GAAG,EAAE,CAAC,CAAC;QACP,GAAG,EAAE,CAAC;MACR;IACF,CAAC,CAAC;EACJ;EAEA,OAAcC,WAAWA,CAAA,EAAoB;IAC3C,IAAI,CAACR,eAAe,CAACS,QAAQ,EAAE;MAC7BT,eAAe,CAACS,QAAQ,GAAG,IAAIT,eAAe,CAAC,CAAC;IAClD;IACA,OAAOA,eAAe,CAACS,QAAQ;EACjC;EAEQC,yBAAyBA,CAACC,IAAY,EAAEC,KAAa,EAAU;IACrE,IAAIC,aAAa,GAAGD,KAAK;;IAEzB;IACA,MAAME,cAAc,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;IAC9F,MAAMC,cAAc,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAE/FD,cAAc,CAACE,OAAO,CAACC,KAAK,IAAI;MAC9B,IAAIN,IAAI,CAACO,QAAQ,CAACD,KAAK,CAAC,EAAEJ,aAAa,IAAI,CAAC;IAC9C,CAAC,CAAC;IACFE,cAAc,CAACC,OAAO,CAACC,KAAK,IAAI;MAC9B,IAAIN,IAAI,CAACO,QAAQ,CAACD,KAAK,CAAC,EAAEJ,aAAa,IAAI,CAAC;IAC9C,CAAC,CAAC;;IAEF;IACA,MAAMM,gBAAgB,GAAG,CAACR,IAAI,CAACS,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,EAAEC,MAAM;IAC1D,IAAIR,aAAa,GAAG,CAAC,EAAE;MACrBA,aAAa,IAAIM,gBAAgB,CAAC,CAAC;IACrC,CAAC,MAAM,IAAIN,aAAa,GAAG,CAAC,EAAE;MAC5BA,aAAa,IAAIM,gBAAgB,CAAC,CAAC;IACrC;;IAEA;IACA,MAAMG,WAAW,GAAG;MAClB,IAAI,EAAE,CAAC;MACP,GAAG,EAAE,GAAG;MACR,IAAI,EAAE,GAAG;MACT,GAAG,EAAE,GAAG;MACR,GAAG,EAAE,GAAG;MACR,GAAG,EAAE,GAAG;MACR,GAAG,EAAE;IACP,CAAC;IAEDC,MAAM,CAACC,OAAO,CAACF,WAAW,CAAC,CAACN,OAAO,CAAC,CAAC,CAACS,IAAI,EAAEC,KAAK,CAAC,KAAK;MACrD,IAAIf,IAAI,CAACO,QAAQ,CAACO,IAAI,CAAC,EAAE;QACvBZ,aAAa,GAAGA,aAAa,GAAG,CAAC,GAAGA,aAAa,GAAGa,KAAK,GAAGb,aAAa,GAAGa,KAAK;MACnF;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,IAAI,CAACvB,YAAY,IAAI,IAAI,CAACA,YAAY,CAACwB,MAAM,KAAK,UAAU,EAAE;MAChEd,aAAa,IAAI,GAAG;IACtB,CAAC,MAAM,IAAI,IAAI,CAACV,YAAY,IAAI,IAAI,CAACA,YAAY,CAACwB,MAAM,KAAK,UAAU,EAAE;MACvEd,aAAa,IAAI,GAAG;IACtB;IAEA,OAAOA,aAAa;EACtB;EAEOe,cAAcA,CAACjB,IAAY,EAAe;IAC/C,IAAI;MACF;MACA,MAAMgB,MAAM,GAAG,IAAI,CAACzB,QAAQ,CAAC2B,OAAO,CAAClB,IAAI,CAAC;MAC1C,IAAIC,KAAK,GAAGe,MAAM,CAACf,KAAK;;MAExB;MACAA,KAAK,GAAG,IAAI,CAACF,yBAAyB,CAACC,IAAI,EAAEC,KAAK,CAAC;;MAEnD;MACA,IAAIkB,WAAwB;MAC5B,IAAIlB,KAAK,GAAG,CAAC,EAAE;QACbkB,WAAW,GAAG,UAAU;MAC1B,CAAC,MAAM,IAAIlB,KAAK,GAAG,CAAC,EAAE;QACpBkB,WAAW,GAAG,UAAU;MAC1B,CAAC,MAAM;QACL;QACA,MAAMC,gBAAgB,GAAGJ,MAAM,CAACK,QAAQ,CAACX,MAAM,GAAG,CAAC;QACnD,MAAMY,gBAAgB,GAAGN,MAAM,CAACO,QAAQ,CAACb,MAAM,GAAG,CAAC;QAEnD,IAAIU,gBAAgB,IAAI,CAACE,gBAAgB,EAAE;UACzCH,WAAW,GAAG,UAAU;QAC1B,CAAC,MAAM,IAAIG,gBAAgB,IAAI,CAACF,gBAAgB,EAAE;UAChDD,WAAW,GAAG,UAAU;QAC1B,CAAC,MAAM;UACL;UACA,MAAMK,cAAc,GAAGR,MAAM,CAACK,QAAQ,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEZ,IAAI;YAAA,IAAAa,qBAAA;YAAA,OAAKD,GAAG,IAAI,EAAAC,qBAAA,GAAAX,MAAM,CAACY,WAAW,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,IAAI,CAAC,CAAC,cAAAa,qBAAA,uBAArCA,qBAAA,CAAwCb,IAAI,CAAC,KAAI,CAAC,CAAC;UAAA,GAAE,CAAC,CAAC;UAC3H,MAAMiB,cAAc,GAAGf,MAAM,CAACO,QAAQ,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEZ,IAAI;YAAA,IAAAkB,sBAAA;YAAA,OAAKN,GAAG,IAAI,EAAAM,sBAAA,GAAAhB,MAAM,CAACY,WAAW,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAChB,IAAI,CAAC,CAAC,cAAAkB,sBAAA,uBAArCA,sBAAA,CAAwClB,IAAI,CAAC,KAAI,CAAC,CAAC;UAAA,GAAE,CAAC,CAAC;UAE3H,IAAIU,cAAc,GAAGS,IAAI,CAACC,GAAG,CAACH,cAAc,CAAC,EAAE;YAC7CZ,WAAW,GAAG,UAAU;UAC1B,CAAC,MAAM,IAAIc,IAAI,CAACC,GAAG,CAACH,cAAc,CAAC,GAAGP,cAAc,EAAE;YACpDL,WAAW,GAAG,UAAU;UAC1B,CAAC,MAAM;YACL;YACAA,WAAW,GAAG,UAAU;UAC1B;QACF;MACF;;MAEA;MACA,IAAI,CAAC3B,YAAY,GAAG;QAAEQ,IAAI;QAAEgB,MAAM,EAAEG;MAAY,CAAC;MACjD,IAAI,CAAC1B,eAAe,CAAC0C,IAAI,CAAC;QAAEnC,IAAI;QAAEgB,MAAM,EAAEG;MAAY,CAAC,CAAC;MACxD,IAAI,IAAI,CAAC1B,eAAe,CAACiB,MAAM,GAAG,EAAE,EAAE;QACpC,IAAI,CAACjB,eAAe,CAAC2C,KAAK,CAAC,CAAC;MAC9B;MAEA,OAAOjB,WAAW;IACpB,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B;MACA,IAAI,IAAI,CAAC7C,YAAY,EAAE;QACrB,OAAO,IAAI,CAACA,YAAY,CAACwB,MAAM;MACjC;MACA;MACA,OAAO,UAAU;IACnB;EACF;;EAEA;EACOuB,gBAAgBA,CAAA,EAAG;IACxB,OAAO;MACLC,aAAa,EAAE,IAAI,CAAC/C,eAAe,CAACiB,MAAM;MAC1C+B,aAAa,EAAE,IAAI,CAAChD,eAAe,CAACiD,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC3B,MAAM,KAAK,UAAU,CAAC,CAACN,MAAM;MACrFkC,aAAa,EAAE,IAAI,CAACnD,eAAe,CAACiD,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC3B,MAAM,KAAK,UAAU,CAAC,CAACN,MAAM;MACrFlB,YAAY,EAAE,IAAI,CAACA;IACrB,CAAC;EACH;AACF;AAACqD,gBAAA,GAjMYxD,eAAe;AAAfA,eAAe,CAEXS,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}