{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  Tokenizer\n} = require('@nlpjs/core');\nclass TokenizerEn extends Tokenizer {\n  constructor(container, shouldNormalize) {\n    super(container, shouldNormalize);\n    this.name = 'tokenizer-en';\n  }\n  replace(text) {\n    let result = text.replace(/n't([ ,:;.!?]|$)/gi, ' not ');\n    result = result.replace(/can't([ ,:;.!?]|$)/gi, 'can not ');\n    result = result.replace(/'ll([ ,:;.!?]|$)/gi, ' will ');\n    result = result.replace(/'s([ ,:;.!?]|$)/gi, ' is ');\n    result = result.replace(/'re([ ,:;.!?]|$)/gi, ' are ');\n    result = result.replace(/'ve([ ,:;.!?]|$)/gi, ' have ');\n    result = result.replace(/'m([ ,:;.!?]|$)/gi, ' am ');\n    result = result.replace(/'d([ ,:;.!?]|$)/gi, ' had ');\n    return result;\n  }\n  replaceContractions(arr) {\n    const contractionsBase = {\n      cannot: ['can', 'not'],\n      gonna: ['going', 'to'],\n      wanna: ['want', 'to']\n    };\n    const result = [];\n    arr.forEach(item => {\n      const lowitem = item.toLowerCase();\n      if (Object.prototype.hasOwnProperty.call(contractionsBase, lowitem)) {\n        result.push(...contractionsBase[lowitem]);\n      } else {\n        result.push(item);\n      }\n    });\n    return result;\n  }\n  innerTokenize(text) {\n    const replaced = this.replace(text);\n    const arr = replaced.split(/[\\s,.!?;:([\\]'\"¡¿)/]+/).filter(x => x);\n    return this.replaceContractions(arr, text);\n  }\n}\nmodule.exports = TokenizerEn;","map":{"version":3,"names":["Tokenizer","require","TokenizerEn","constructor","container","shouldNormalize","name","replace","text","result","replaceContractions","arr","contractionsBase","cannot","gonna","wanna","forEach","item","lowitem","toLowerCase","Object","prototype","hasOwnProperty","call","push","innerTokenize","replaced","split","filter","x","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/lang-en-min/src/tokenizer-en.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { Tokenizer } = require('@nlpjs/core');\n\nclass TokenizerEn extends Tokenizer {\n  constructor(container, shouldNormalize) {\n    super(container, shouldNormalize);\n    this.name = 'tokenizer-en';\n  }\n\n  replace(text) {\n    let result = text.replace(/n't([ ,:;.!?]|$)/gi, ' not ');\n    result = result.replace(/can't([ ,:;.!?]|$)/gi, 'can not ');\n    result = result.replace(/'ll([ ,:;.!?]|$)/gi, ' will ');\n    result = result.replace(/'s([ ,:;.!?]|$)/gi, ' is ');\n    result = result.replace(/'re([ ,:;.!?]|$)/gi, ' are ');\n    result = result.replace(/'ve([ ,:;.!?]|$)/gi, ' have ');\n    result = result.replace(/'m([ ,:;.!?]|$)/gi, ' am ');\n    result = result.replace(/'d([ ,:;.!?]|$)/gi, ' had ');\n    return result;\n  }\n\n  replaceContractions(arr) {\n    const contractionsBase = {\n      cannot: ['can', 'not'],\n      gonna: ['going', 'to'],\n      wanna: ['want', 'to'],\n    };\n\n    const result = [];\n    arr.forEach((item) => {\n      const lowitem = item.toLowerCase();\n      if (Object.prototype.hasOwnProperty.call(contractionsBase, lowitem)) {\n        result.push(...contractionsBase[lowitem]);\n      } else {\n        result.push(item);\n      }\n    });\n    return result;\n  }\n\n  innerTokenize(text) {\n    const replaced = this.replace(text);\n    const arr = replaced.split(/[\\s,.!?;:([\\]'\"¡¿)/]+/).filter((x) => x);\n    return this.replaceContractions(arr, text);\n  }\n}\n\nmodule.exports = TokenizerEn;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AAE5C,MAAMC,WAAW,SAASF,SAAS,CAAC;EAClCG,WAAWA,CAACC,SAAS,EAAEC,eAAe,EAAE;IACtC,KAAK,CAACD,SAAS,EAAEC,eAAe,CAAC;IACjC,IAAI,CAACC,IAAI,GAAG,cAAc;EAC5B;EAEAC,OAAOA,CAACC,IAAI,EAAE;IACZ,IAAIC,MAAM,GAAGD,IAAI,CAACD,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC;IACxDE,MAAM,GAAGA,MAAM,CAACF,OAAO,CAAC,sBAAsB,EAAE,UAAU,CAAC;IAC3DE,MAAM,GAAGA,MAAM,CAACF,OAAO,CAAC,oBAAoB,EAAE,QAAQ,CAAC;IACvDE,MAAM,GAAGA,MAAM,CAACF,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC;IACpDE,MAAM,GAAGA,MAAM,CAACF,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC;IACtDE,MAAM,GAAGA,MAAM,CAACF,OAAO,CAAC,oBAAoB,EAAE,QAAQ,CAAC;IACvDE,MAAM,GAAGA,MAAM,CAACF,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC;IACpDE,MAAM,GAAGA,MAAM,CAACF,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC;IACrD,OAAOE,MAAM;EACf;EAEAC,mBAAmBA,CAACC,GAAG,EAAE;IACvB,MAAMC,gBAAgB,GAAG;MACvBC,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;MACtBC,KAAK,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;MACtBC,KAAK,EAAE,CAAC,MAAM,EAAE,IAAI;IACtB,CAAC;IAED,MAAMN,MAAM,GAAG,EAAE;IACjBE,GAAG,CAACK,OAAO,CAAEC,IAAI,IAAK;MACpB,MAAMC,OAAO,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;MAClC,IAAIC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACX,gBAAgB,EAAEM,OAAO,CAAC,EAAE;QACnET,MAAM,CAACe,IAAI,CAAC,GAAGZ,gBAAgB,CAACM,OAAO,CAAC,CAAC;MAC3C,CAAC,MAAM;QACLT,MAAM,CAACe,IAAI,CAACP,IAAI,CAAC;MACnB;IACF,CAAC,CAAC;IACF,OAAOR,MAAM;EACf;EAEAgB,aAAaA,CAACjB,IAAI,EAAE;IAClB,MAAMkB,QAAQ,GAAG,IAAI,CAACnB,OAAO,CAACC,IAAI,CAAC;IACnC,MAAMG,GAAG,GAAGe,QAAQ,CAACC,KAAK,CAAC,uBAAuB,CAAC,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC;IACpE,OAAO,IAAI,CAACnB,mBAAmB,CAACC,GAAG,EAAEH,IAAI,CAAC;EAC5C;AACF;AAEAsB,MAAM,CAACC,OAAO,GAAG7B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}