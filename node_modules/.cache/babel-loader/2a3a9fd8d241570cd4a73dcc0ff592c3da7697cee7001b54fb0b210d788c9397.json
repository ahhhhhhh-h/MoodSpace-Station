{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ConnectionCosts = require(\"../ConnectionCosts\");\n\n/**\n * Builder class for constructing ConnectionCosts object\n * @constructor\n */\nfunction ConnectionCostsBuilder() {\n  this.lines = 0;\n  this.connection_cost = null;\n}\nConnectionCostsBuilder.prototype.putLine = function (line) {\n  if (this.lines === 0) {\n    var dimensions = line.split(\" \");\n    var forward_dimension = dimensions[0];\n    var backward_dimension = dimensions[1];\n    if (forward_dimension < 0 || backward_dimension < 0) {\n      throw \"Parse error of matrix.def\";\n    }\n    this.connection_cost = new ConnectionCosts(forward_dimension, backward_dimension);\n    this.lines++;\n    return this;\n  }\n  var costs = line.split(\" \");\n  if (costs.length !== 3) {\n    return this;\n  }\n  var forward_id = parseInt(costs[0]);\n  var backward_id = parseInt(costs[1]);\n  var cost = parseInt(costs[2]);\n  if (forward_id < 0 || backward_id < 0 || !isFinite(forward_id) || !isFinite(backward_id) || this.connection_cost.forward_dimension <= forward_id || this.connection_cost.backward_dimension <= backward_id) {\n    throw \"Parse error of matrix.def\";\n  }\n  this.connection_cost.put(forward_id, backward_id, cost);\n  this.lines++;\n  return this;\n};\nConnectionCostsBuilder.prototype.build = function () {\n  return this.connection_cost;\n};\nmodule.exports = ConnectionCostsBuilder;","map":{"version":3,"names":["ConnectionCosts","require","ConnectionCostsBuilder","lines","connection_cost","prototype","putLine","line","dimensions","split","forward_dimension","backward_dimension","costs","length","forward_id","parseInt","backward_id","cost","isFinite","put","build","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/kuromoji/src/dict/builder/ConnectionCostsBuilder.js"],"sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ConnectionCosts = require(\"../ConnectionCosts\");\n\n/**\n * Builder class for constructing ConnectionCosts object\n * @constructor\n */\nfunction ConnectionCostsBuilder() {\n    this.lines = 0;\n    this.connection_cost = null;\n}\n\nConnectionCostsBuilder.prototype.putLine = function (line) {\n    if (this.lines === 0) {\n        var dimensions = line.split(\" \");\n        var forward_dimension = dimensions[0];\n        var backward_dimension = dimensions[1];\n\n        if (forward_dimension < 0 || backward_dimension < 0) {\n            throw \"Parse error of matrix.def\";\n        }\n\n        this.connection_cost = new ConnectionCosts(forward_dimension, backward_dimension);\n        this.lines++;\n        return this;\n    }\n\n    var costs = line.split(\" \");\n\n    if (costs.length !== 3) {\n        return this;\n    }\n\n    var forward_id = parseInt(costs[0]);\n    var backward_id = parseInt(costs[1]);\n    var cost = parseInt(costs[2]);\n\n    if (forward_id < 0 || backward_id < 0 || !isFinite(forward_id) || !isFinite(backward_id) ||\n        this.connection_cost.forward_dimension <= forward_id || this.connection_cost.backward_dimension <= backward_id) {\n        throw \"Parse error of matrix.def\";\n    }\n\n    this.connection_cost.put(forward_id, backward_id, cost);\n    this.lines++;\n    return this;\n};\n\nConnectionCostsBuilder.prototype.build = function () {\n    return this.connection_cost;\n};\n\nmodule.exports = ConnectionCostsBuilder;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,eAAe,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAEnD;AACA;AACA;AACA;AACA,SAASC,sBAAsBA,CAAA,EAAG;EAC9B,IAAI,CAACC,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,eAAe,GAAG,IAAI;AAC/B;AAEAF,sBAAsB,CAACG,SAAS,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAE;EACvD,IAAI,IAAI,CAACJ,KAAK,KAAK,CAAC,EAAE;IAClB,IAAIK,UAAU,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;IAChC,IAAIC,iBAAiB,GAAGF,UAAU,CAAC,CAAC,CAAC;IACrC,IAAIG,kBAAkB,GAAGH,UAAU,CAAC,CAAC,CAAC;IAEtC,IAAIE,iBAAiB,GAAG,CAAC,IAAIC,kBAAkB,GAAG,CAAC,EAAE;MACjD,MAAM,2BAA2B;IACrC;IAEA,IAAI,CAACP,eAAe,GAAG,IAAIJ,eAAe,CAACU,iBAAiB,EAAEC,kBAAkB,CAAC;IACjF,IAAI,CAACR,KAAK,EAAE;IACZ,OAAO,IAAI;EACf;EAEA,IAAIS,KAAK,GAAGL,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;EAE3B,IAAIG,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACpB,OAAO,IAAI;EACf;EAEA,IAAIC,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;EACnC,IAAII,WAAW,GAAGD,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;EACpC,IAAIK,IAAI,GAAGF,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;EAE7B,IAAIE,UAAU,GAAG,CAAC,IAAIE,WAAW,GAAG,CAAC,IAAI,CAACE,QAAQ,CAACJ,UAAU,CAAC,IAAI,CAACI,QAAQ,CAACF,WAAW,CAAC,IACpF,IAAI,CAACZ,eAAe,CAACM,iBAAiB,IAAII,UAAU,IAAI,IAAI,CAACV,eAAe,CAACO,kBAAkB,IAAIK,WAAW,EAAE;IAChH,MAAM,2BAA2B;EACrC;EAEA,IAAI,CAACZ,eAAe,CAACe,GAAG,CAACL,UAAU,EAAEE,WAAW,EAAEC,IAAI,CAAC;EACvD,IAAI,CAACd,KAAK,EAAE;EACZ,OAAO,IAAI;AACf,CAAC;AAEDD,sBAAsB,CAACG,SAAS,CAACe,KAAK,GAAG,YAAY;EACjD,OAAO,IAAI,CAAChB,eAAe;AAC/B,CAAC;AAEDiB,MAAM,CAACC,OAAO,GAAGpB,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}