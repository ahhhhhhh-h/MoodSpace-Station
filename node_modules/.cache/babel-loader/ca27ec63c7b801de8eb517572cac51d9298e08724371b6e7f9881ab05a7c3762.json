{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst languageData = require('./languages.json');\nconst data = require('./data.json');\nconst scripts = {\n  cmn: /[\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uF900-\\uFA6D\\uFA70-\\uFAD9]|[\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/g,\n  Latin: /[A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A]/g,\n  Cyrillic: /[\\u0400-\\u0484\\u0487-\\u052F\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69D\\uA69F]/g,\n  Arabic: /[\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u065F\\u066A-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B2\\u08E4-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC]|\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]/g,\n  ben: /[\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FB]/g,\n  Devanagari: /[\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FB]/g,\n  jpn: /[\\u3041-\\u3096\\u309D-\\u309F]|\\uD82C\\uDC01|\\uD83C\\uDE00|[\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D]|\\uD82C\\uDC00/g,\n  kor: /[\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/g,\n  tel: /[\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F]/g,\n  tam: /[\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA]/g,\n  guj: /[\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1]/g,\n  kan: /[\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2]/g,\n  mal: /[\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D75\\u0D79-\\u0D7F]/g,\n  Myanmar: /[\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F]/g,\n  ori: /[\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77]/g,\n  pan: /[\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75]/g,\n  Ethiopic: /[\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E]/g,\n  tha: /[\\u0E01-\\u0E3A\\u0E40-\\u0E5B]/g,\n  sin: /[\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4]|\\uD804[\\uDDE1-\\uDDF4]/g,\n  ell: /[\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65]|\\uD800[\\uDD40-\\uDD8C\\uDDA0]|\\uD834[\\uDE00-\\uDE45]/g,\n  khm: /[\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF]/g,\n  hye: /[\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u058A\\u058D-\\u058F\\uFB13-\\uFB17]/g,\n  sat: /[\\u1C50-\\u1C7F]/g,\n  bod: /[\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA]/g,\n  Hebrew: /[\\u0591-\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F]/g,\n  kat: /[\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u2D00-\\u2D25\\u2D27\\u2D2D]/g,\n  lao: /[\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF]/g,\n  zgh: /[\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F]/g,\n  iii: /[\\uA000-\\uA48C\\uA490-\\uA4C6]/g,\n  aii: /[\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F]/g\n};\nconst scriptKeys = Object.keys(scripts);\nconst und = () => [['und', 1]];\nclass Language {\n  constructor() {\n    this.languagesAlpha3 = {};\n    this.languagesAlpha2 = {};\n    this.extraSentences = [];\n    this.buildData();\n  }\n  static getTrigrams(srcValue) {\n    const result = [];\n    const value = srcValue ? ` ${String(srcValue).replace(/[\\u0021-\\u0040]+/g, ' ').replace(/\\s+/g, ' ').trim().toLowerCase()} ` : '';\n    if (!value || value.length < 3) {\n      return result;\n    }\n    for (let i = 0, l = value.length - 2; i < l; i += 1) {\n      result[i] = value.substr(i, 3);\n    }\n    return result;\n  }\n  static asTuples(value) {\n    const dictionary = Language.getTrigrams(value).reduce((srcprev, current) => {\n      const prev = srcprev;\n      prev[current] = (prev[current] || 0) + 1;\n      return prev;\n    }, {});\n    const tuples = [];\n    Object.keys(dictionary).forEach(key => {\n      tuples.push([key, dictionary[key]]);\n    });\n    tuples.sort((a, b) => a[1] - b[1]);\n    return tuples;\n  }\n  static getDistance(trigrams, model) {\n    let distance = 0;\n    trigrams.forEach(currentTrigram => {\n      distance += currentTrigram[0] in model ? Math.abs(currentTrigram[1] - model[currentTrigram[0]] - 1) : 300;\n    });\n    return distance;\n  }\n  static getOccurrence(value, expression) {\n    const count = value.match(expression);\n    return (count ? count.length : 0) / value.length || 0;\n  }\n  static isLatin(value) {\n    let total = 0;\n    const half = value.length / 2;\n    for (let i = 0; i < value.length; i += 1) {\n      const c = value.charCodeAt(i);\n      if (c >= 32 && c <= 126) {\n        total += 1;\n        if (total > half) {\n          return true;\n        }\n      }\n    }\n    return total > half;\n  }\n  static getTopScript(value) {\n    if (Language.isLatin(value)) {\n      return ['Latin', 1];\n    }\n    let topCount = -1;\n    let topScript;\n    for (let i = 0; i < scriptKeys.length; i += 1) {\n      const script = scriptKeys[i];\n      const count = Language.getOccurrence(value, scripts[script]);\n      if (count > topCount) {\n        topCount = count;\n        topScript = script;\n        if (topCount === 1) {\n          return [topScript, topCount];\n        }\n      }\n    }\n    return [topScript, topCount];\n  }\n  static filterLanguages(languages, allowList, denyList) {\n    if (allowList.length === 0 && denyList.length === 0) {\n      return languages;\n    }\n    const filteredLanguages = {};\n    Object.keys(languages).forEach(language => {\n      if ((allowList.length === 0 || allowList.indexOf(language) > -1) && denyList.indexOf(language) === -1) {\n        filteredLanguages[language] = languages[language];\n      }\n    });\n    return filteredLanguages;\n  }\n  static getDistances(trigrams, srcLanguages, options) {\n    const distances = [];\n    const allowList = options.allowList || [];\n    const denyList = options.denyList || [];\n    const languages = Language.filterLanguages(srcLanguages, allowList, denyList);\n    if (!languages) {\n      return und();\n    }\n    Object.keys(languages).forEach(language => {\n      distances.push([language, Language.getDistance(trigrams, languages[language])]);\n    });\n    return distances.sort((a, b) => a[1] - b[1]);\n  }\n  static detectAll(srcValue, settings = {}) {\n    const minLength = settings.minLength || 10;\n    if (!srcValue || srcValue.length < minLength) {\n      return und();\n    }\n    const value = srcValue.substr(0, 2048);\n    const script = Language.getTopScript(value);\n    if (!(script[0] in data) && script[1] > 0.5) {\n      if (settings.allowList) {\n        if (settings.allowList.includes(script[0])) {\n          return [[script[0], 1]];\n        }\n        if (script[0] === 'cmn' && settings.allowList.includes('jpn')) {\n          return [['jpn', 1]];\n        }\n      } else {\n        return [[script[0], 1]];\n      }\n    }\n    if (data[script[0]]) {\n      const distances = Language.getDistances(Language.asTuples(value), data[script[0]], settings);\n      if (distances[0][0] === 'und') {\n        return [[script[0], 1]];\n      }\n      const min = distances[0][1];\n      const max = value.length * 300 - min;\n      return distances.map(d => [d[0], 1 - (d[1] - min) / max || 0]);\n    }\n    return [[script[0], 1]];\n  }\n  buildData() {\n    for (let i = 0; i < languageData.length; i += 1) {\n      const language = {\n        alpha2: languageData[i][0],\n        alpha3: languageData[i][1],\n        name: languageData[i][2]\n      };\n      this.languagesAlpha3[language.alpha3] = language;\n      this.languagesAlpha2[language.alpha2] = language;\n    }\n  }\n  transformAllowList(allowList) {\n    const result = [];\n    for (let i = 0; i < allowList.length; i += 1) {\n      if (allowList[i].length === 3) {\n        result.push(allowList[i]);\n      } else {\n        const language = this.languagesAlpha2[allowList[i]];\n        if (language) {\n          result.push(language.alpha3);\n        }\n      }\n    }\n    return result;\n  }\n  guess(utterance, allowList, limit) {\n    const options = {};\n    if (utterance.length < 10) {\n      options.minLength = utterance.length;\n    }\n    if (allowList && allowList.length && allowList.length > 0) {\n      options.allowList = this.transformAllowList(allowList);\n    }\n    const scores = Language.detectAll(utterance, options);\n    const result = [];\n    for (let i = 0; i < scores.length; i += 1) {\n      const language = this.languagesAlpha3[scores[i][0]];\n      if (language) {\n        result.push({\n          alpha3: language.alpha3,\n          alpha2: language.alpha2,\n          language: language.name,\n          score: scores[i][1]\n        });\n        if (limit && result.length >= limit) {\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Given an utterance, an allow list of iso codes and the limit of results,\n   * return the language with the best score.\n   * The allowList is optional.\n   * @param {String} utterance Utterance wich we want to guess the language.\n   * @param {String[]} allowList allowList of accepted languages.\n   * @return {Object} Best guess.\n   */\n  guessBest(utterance, allowList) {\n    return this.guess(utterance, allowList, 1)[0];\n  }\n  addTrigrams(locale, sentence) {\n    const language = this.languagesAlpha2[locale];\n    const iso3 = language ? language.alpha3 : locale;\n    const script = Language.getTopScript(sentence)[0];\n    const trigrams = Language.getTrigrams(sentence);\n    if (data[script]) {\n      if (!data[script][iso3]) {\n        data[script][iso3] = {};\n      }\n      trigrams.forEach(trigram => {\n        data[script][iso3][trigram] = 1;\n      });\n    }\n  }\n  addExtraSentence(locale, sentence) {\n    this.extraSentences.push([locale, sentence]);\n    this.addTrigrams(locale, sentence);\n  }\n  processExtraSentences() {\n    this.extraSentences.forEach(item => {\n      this.addTrigrams(item[0], item[1]);\n    });\n  }\n  static lansplit(s) {\n    if (s.includes('|')) {\n      return s.split('|');\n    }\n    const result = [];\n    for (let i = 0; i < s.length; i += 3) {\n      result.push(s.substr(i, 3));\n    }\n    return result;\n  }\n  static addModel(script, name, value) {\n    const languages = data[script];\n    const model = Language.lansplit(value);\n    let weight = model.length;\n    const trigrams = {};\n    while (weight > 0) {\n      weight -= 1;\n      trigrams[model[weight]] = weight;\n    }\n    languages[name] = trigrams;\n  }\n  addModel(script, name, value) {\n    Language.addModel(script, name, value);\n  }\n  static buildModel() {\n    Object.keys(data).forEach(script => {\n      const languages = data[script];\n      Object.keys(languages).forEach(name => {\n        Language.addModel(script, name, languages[name]);\n      });\n    });\n  }\n}\nLanguage.buildModel();\nmodule.exports = Language;","map":{"version":3,"names":["languageData","require","data","scripts","cmn","Latin","Cyrillic","Arabic","ben","Devanagari","jpn","kor","tel","tam","guj","kan","mal","Myanmar","ori","pan","Ethiopic","tha","sin","ell","khm","hye","sat","bod","Hebrew","kat","lao","zgh","iii","aii","scriptKeys","Object","keys","und","Language","constructor","languagesAlpha3","languagesAlpha2","extraSentences","buildData","getTrigrams","srcValue","result","value","String","replace","trim","toLowerCase","length","i","l","substr","asTuples","dictionary","reduce","srcprev","current","prev","tuples","forEach","key","push","sort","a","b","getDistance","trigrams","model","distance","currentTrigram","Math","abs","getOccurrence","expression","count","match","isLatin","total","half","c","charCodeAt","getTopScript","topCount","topScript","script","filterLanguages","languages","allowList","denyList","filteredLanguages","language","indexOf","getDistances","srcLanguages","options","distances","detectAll","settings","minLength","includes","min","max","map","d","alpha2","alpha3","name","transformAllowList","guess","utterance","limit","scores","score","guessBest","addTrigrams","locale","sentence","iso3","trigram","addExtraSentence","processExtraSentences","item","lansplit","s","split","addModel","weight","buildModel","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/language-min/src/language.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst languageData = require('./languages.json');\nconst data = require('./data.json');\n\nconst scripts = {\n  cmn: /[\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uF900-\\uFA6D\\uFA70-\\uFAD9]|[\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/g,\n  Latin:\n    /[A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A]/g,\n  Cyrillic:\n    /[\\u0400-\\u0484\\u0487-\\u052F\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69D\\uA69F]/g,\n  Arabic:\n    /[\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u065F\\u066A-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B2\\u08E4-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC]|\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]/g,\n  ben: /[\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FB]/g,\n  Devanagari: /[\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FB]/g,\n  jpn: /[\\u3041-\\u3096\\u309D-\\u309F]|\\uD82C\\uDC01|\\uD83C\\uDE00|[\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D]|\\uD82C\\uDC00/g,\n  kor: /[\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/g,\n  tel: /[\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F]/g,\n  tam: /[\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA]/g,\n  guj: /[\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1]/g,\n  kan: /[\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2]/g,\n  mal: /[\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D75\\u0D79-\\u0D7F]/g,\n  Myanmar: /[\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F]/g,\n  ori: /[\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77]/g,\n  pan: /[\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75]/g,\n  Ethiopic:\n    /[\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E]/g,\n  tha: /[\\u0E01-\\u0E3A\\u0E40-\\u0E5B]/g,\n  sin: /[\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4]|\\uD804[\\uDDE1-\\uDDF4]/g,\n  ell: /[\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65]|\\uD800[\\uDD40-\\uDD8C\\uDDA0]|\\uD834[\\uDE00-\\uDE45]/g,\n  khm: /[\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF]/g,\n  hye: /[\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u058A\\u058D-\\u058F\\uFB13-\\uFB17]/g,\n  sat: /[\\u1C50-\\u1C7F]/g,\n  bod: /[\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA]/g,\n  Hebrew:\n    /[\\u0591-\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F]/g,\n  kat: /[\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u2D00-\\u2D25\\u2D27\\u2D2D]/g,\n  lao: /[\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF]/g,\n  zgh: /[\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F]/g,\n  iii: /[\\uA000-\\uA48C\\uA490-\\uA4C6]/g,\n  aii: /[\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F]/g,\n};\n\nconst scriptKeys = Object.keys(scripts);\n\nconst und = () => [['und', 1]];\n\nclass Language {\n  constructor() {\n    this.languagesAlpha3 = {};\n    this.languagesAlpha2 = {};\n    this.extraSentences = [];\n    this.buildData();\n  }\n\n  static getTrigrams(srcValue) {\n    const result = [];\n    const value = srcValue\n      ? ` ${String(srcValue)\n          .replace(/[\\u0021-\\u0040]+/g, ' ')\n          .replace(/\\s+/g, ' ')\n          .trim()\n          .toLowerCase()} `\n      : '';\n    if (!value || value.length < 3) {\n      return result;\n    }\n    for (let i = 0, l = value.length - 2; i < l; i += 1) {\n      result[i] = value.substr(i, 3);\n    }\n    return result;\n  }\n\n  static asTuples(value) {\n    const dictionary = Language.getTrigrams(value).reduce(\n      (srcprev, current) => {\n        const prev = srcprev;\n        prev[current] = (prev[current] || 0) + 1;\n        return prev;\n      },\n      {}\n    );\n    const tuples = [];\n    Object.keys(dictionary).forEach((key) => {\n      tuples.push([key, dictionary[key]]);\n    });\n    tuples.sort((a, b) => a[1] - b[1]);\n    return tuples;\n  }\n\n  static getDistance(trigrams, model) {\n    let distance = 0;\n    trigrams.forEach((currentTrigram) => {\n      distance +=\n        currentTrigram[0] in model\n          ? Math.abs(currentTrigram[1] - model[currentTrigram[0]] - 1)\n          : 300;\n    });\n    return distance;\n  }\n\n  static getOccurrence(value, expression) {\n    const count = value.match(expression);\n    return (count ? count.length : 0) / value.length || 0;\n  }\n\n  static isLatin(value) {\n    let total = 0;\n    const half = value.length / 2;\n    for (let i = 0; i < value.length; i += 1) {\n      const c = value.charCodeAt(i);\n      if (c >= 32 && c <= 126) {\n        total += 1;\n        if (total > half) {\n          return true;\n        }\n      }\n    }\n    return total > half;\n  }\n\n  static getTopScript(value) {\n    if (Language.isLatin(value)) {\n      return ['Latin', 1];\n    }\n    let topCount = -1;\n    let topScript;\n    for (let i = 0; i < scriptKeys.length; i += 1) {\n      const script = scriptKeys[i];\n      const count = Language.getOccurrence(value, scripts[script]);\n      if (count > topCount) {\n        topCount = count;\n        topScript = script;\n        if (topCount === 1) {\n          return [topScript, topCount];\n        }\n      }\n    }\n    return [topScript, topCount];\n  }\n\n  static filterLanguages(languages, allowList, denyList) {\n    if (allowList.length === 0 && denyList.length === 0) {\n      return languages;\n    }\n    const filteredLanguages = {};\n    Object.keys(languages).forEach((language) => {\n      if (\n        (allowList.length === 0 || allowList.indexOf(language) > -1) &&\n        denyList.indexOf(language) === -1\n      ) {\n        filteredLanguages[language] = languages[language];\n      }\n    });\n    return filteredLanguages;\n  }\n\n  static getDistances(trigrams, srcLanguages, options) {\n    const distances = [];\n    const allowList = options.allowList || [];\n    const denyList = options.denyList || [];\n    const languages = Language.filterLanguages(\n      srcLanguages,\n      allowList,\n      denyList\n    );\n    if (!languages) {\n      return und();\n    }\n    Object.keys(languages).forEach((language) => {\n      distances.push([\n        language,\n        Language.getDistance(trigrams, languages[language]),\n      ]);\n    });\n    return distances.sort((a, b) => a[1] - b[1]);\n  }\n\n  static detectAll(srcValue, settings = {}) {\n    const minLength = settings.minLength || 10;\n    if (!srcValue || srcValue.length < minLength) {\n      return und();\n    }\n    const value = srcValue.substr(0, 2048);\n    const script = Language.getTopScript(value);\n    if (!(script[0] in data) && script[1] > 0.5) {\n      if (settings.allowList) {\n        if (settings.allowList.includes(script[0])) {\n          return [[script[0], 1]];\n        }\n        if (script[0] === 'cmn' && settings.allowList.includes('jpn')) {\n          return [['jpn', 1]];\n        }\n      } else {\n        return [[script[0], 1]];\n      }\n    }\n\n    if (data[script[0]]) {\n      const distances = Language.getDistances(\n        Language.asTuples(value),\n        data[script[0]],\n        settings\n      );\n      if (distances[0][0] === 'und') {\n        return [[script[0], 1]];\n      }\n      const min = distances[0][1];\n      const max = value.length * 300 - min;\n      return distances.map((d) => [d[0], 1 - (d[1] - min) / max || 0]);\n    }\n    return [[script[0], 1]];\n  }\n\n  buildData() {\n    for (let i = 0; i < languageData.length; i += 1) {\n      const language = {\n        alpha2: languageData[i][0],\n        alpha3: languageData[i][1],\n        name: languageData[i][2],\n      };\n      this.languagesAlpha3[language.alpha3] = language;\n      this.languagesAlpha2[language.alpha2] = language;\n    }\n  }\n\n  transformAllowList(allowList) {\n    const result = [];\n    for (let i = 0; i < allowList.length; i += 1) {\n      if (allowList[i].length === 3) {\n        result.push(allowList[i]);\n      } else {\n        const language = this.languagesAlpha2[allowList[i]];\n        if (language) {\n          result.push(language.alpha3);\n        }\n      }\n    }\n    return result;\n  }\n\n  guess(utterance, allowList, limit) {\n    const options = {};\n    if (utterance.length < 10) {\n      options.minLength = utterance.length;\n    }\n    if (allowList && allowList.length && allowList.length > 0) {\n      options.allowList = this.transformAllowList(allowList);\n    }\n    const scores = Language.detectAll(utterance, options);\n    const result = [];\n    for (let i = 0; i < scores.length; i += 1) {\n      const language = this.languagesAlpha3[scores[i][0]];\n      if (language) {\n        result.push({\n          alpha3: language.alpha3,\n          alpha2: language.alpha2,\n          language: language.name,\n          score: scores[i][1],\n        });\n        if (limit && result.length >= limit) {\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Given an utterance, an allow list of iso codes and the limit of results,\n   * return the language with the best score.\n   * The allowList is optional.\n   * @param {String} utterance Utterance wich we want to guess the language.\n   * @param {String[]} allowList allowList of accepted languages.\n   * @return {Object} Best guess.\n   */\n  guessBest(utterance, allowList) {\n    return this.guess(utterance, allowList, 1)[0];\n  }\n\n  addTrigrams(locale, sentence) {\n    const language = this.languagesAlpha2[locale];\n    const iso3 = language ? language.alpha3 : locale;\n    const script = Language.getTopScript(sentence)[0];\n    const trigrams = Language.getTrigrams(sentence);\n    if (data[script]) {\n      if (!data[script][iso3]) {\n        data[script][iso3] = {};\n      }\n      trigrams.forEach((trigram) => {\n        data[script][iso3][trigram] = 1;\n      });\n    }\n  }\n\n  addExtraSentence(locale, sentence) {\n    this.extraSentences.push([locale, sentence]);\n    this.addTrigrams(locale, sentence);\n  }\n\n  processExtraSentences() {\n    this.extraSentences.forEach((item) => {\n      this.addTrigrams(item[0], item[1]);\n    });\n  }\n\n  static lansplit(s) {\n    if (s.includes('|')) {\n      return s.split('|');\n    }\n    const result = [];\n    for (let i = 0; i < s.length; i += 3) {\n      result.push(s.substr(i, 3));\n    }\n    return result;\n  }\n\n  static addModel(script, name, value) {\n    const languages = data[script];\n    const model = Language.lansplit(value);\n    let weight = model.length;\n    const trigrams = {};\n    while (weight > 0) {\n      weight -= 1;\n      trigrams[model[weight]] = weight;\n    }\n    languages[name] = trigrams;\n  }\n\n  addModel(script, name, value) {\n    Language.addModel(script, name, value);\n  }\n\n  static buildModel() {\n    Object.keys(data).forEach((script) => {\n      const languages = data[script];\n      Object.keys(languages).forEach((name) => {\n        Language.addModel(script, name, languages[name]);\n      });\n    });\n  }\n}\n\nLanguage.buildModel();\n\nmodule.exports = Language;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}