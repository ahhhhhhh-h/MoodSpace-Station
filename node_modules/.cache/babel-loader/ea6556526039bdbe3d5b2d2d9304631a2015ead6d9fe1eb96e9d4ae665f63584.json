{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  NeuralNetwork\n} = require('@nlpjs/neural');\nconst Nlu = require('./nlu');\nclass NeuralNlu extends Nlu {\n  async innerTrain(srcInput) {\n    const input = srcInput;\n    this.neuralNetwork = new NeuralNetwork(input.settings, this.container);\n    input.status = await this.neuralNetwork.train(input.corpus);\n    return input;\n  }\n  innerProcess(srcInput) {\n    const input = srcInput;\n    input.classifications = this.neuralNetwork ? this.neuralNetwork.run(input.tokens) || {\n      None: 1\n    } : {\n      None: 1\n    };\n    this.convertToArray(input);\n    const {\n      intent\n    } = input.classifications[0];\n    if (input.settings && input.settings.returnExplanation && intent && this.neuralNetwork && intent !== 'None') {\n      input.explanation = this.neuralNetwork.explain(input.tokens, intent);\n    }\n    return input;\n  }\n  registerDefault() {\n    super.registerDefault();\n    this.container.register('NeuralNlu', NeuralNlu, false);\n  }\n  toJSON() {\n    const result = super.toJSON();\n    result.neuralNetwork = this.neuralNetwork ? this.neuralNetwork.toJSON() : undefined;\n    return result;\n  }\n  fromJSON(json) {\n    super.fromJSON(json);\n    if (json.neuralNetwork) {\n      this.neuralNetwork = new NeuralNetwork();\n      this.neuralNetwork.fromJSON(json.neuralNetwork);\n    }\n  }\n}\nmodule.exports = NeuralNlu;","map":{"version":3,"names":["NeuralNetwork","require","Nlu","NeuralNlu","innerTrain","srcInput","input","neuralNetwork","settings","container","status","train","corpus","innerProcess","classifications","run","tokens","None","convertToArray","intent","returnExplanation","explanation","explain","registerDefault","register","toJSON","result","undefined","fromJSON","json","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/nlu/src/nlu-neural.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { NeuralNetwork } = require('@nlpjs/neural');\nconst Nlu = require('./nlu');\n\nclass NeuralNlu extends Nlu {\n  async innerTrain(srcInput) {\n    const input = srcInput;\n    this.neuralNetwork = new NeuralNetwork(input.settings, this.container);\n    input.status = await this.neuralNetwork.train(input.corpus);\n    return input;\n  }\n\n  innerProcess(srcInput) {\n    const input = srcInput;\n    input.classifications = this.neuralNetwork\n      ? this.neuralNetwork.run(input.tokens) || { None: 1 }\n      : { None: 1 };\n    this.convertToArray(input);\n    const { intent } = input.classifications[0];\n    if (\n      input.settings &&\n      input.settings.returnExplanation &&\n      intent &&\n      this.neuralNetwork &&\n      intent !== 'None'\n    ) {\n      input.explanation = this.neuralNetwork.explain(input.tokens, intent);\n    }\n    return input;\n  }\n\n  registerDefault() {\n    super.registerDefault();\n    this.container.register('NeuralNlu', NeuralNlu, false);\n  }\n\n  toJSON() {\n    const result = super.toJSON();\n    result.neuralNetwork = this.neuralNetwork\n      ? this.neuralNetwork.toJSON()\n      : undefined;\n    return result;\n  }\n\n  fromJSON(json) {\n    super.fromJSON(json);\n    if (json.neuralNetwork) {\n      this.neuralNetwork = new NeuralNetwork();\n      this.neuralNetwork.fromJSON(json.neuralNetwork);\n    }\n  }\n}\n\nmodule.exports = NeuralNlu;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;AAClD,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE5B,MAAME,SAAS,SAASD,GAAG,CAAC;EAC1B,MAAME,UAAUA,CAACC,QAAQ,EAAE;IACzB,MAAMC,KAAK,GAAGD,QAAQ;IACtB,IAAI,CAACE,aAAa,GAAG,IAAIP,aAAa,CAACM,KAAK,CAACE,QAAQ,EAAE,IAAI,CAACC,SAAS,CAAC;IACtEH,KAAK,CAACI,MAAM,GAAG,MAAM,IAAI,CAACH,aAAa,CAACI,KAAK,CAACL,KAAK,CAACM,MAAM,CAAC;IAC3D,OAAON,KAAK;EACd;EAEAO,YAAYA,CAACR,QAAQ,EAAE;IACrB,MAAMC,KAAK,GAAGD,QAAQ;IACtBC,KAAK,CAACQ,eAAe,GAAG,IAAI,CAACP,aAAa,GACtC,IAAI,CAACA,aAAa,CAACQ,GAAG,CAACT,KAAK,CAACU,MAAM,CAAC,IAAI;MAAEC,IAAI,EAAE;IAAE,CAAC,GACnD;MAAEA,IAAI,EAAE;IAAE,CAAC;IACf,IAAI,CAACC,cAAc,CAACZ,KAAK,CAAC;IAC1B,MAAM;MAAEa;IAAO,CAAC,GAAGb,KAAK,CAACQ,eAAe,CAAC,CAAC,CAAC;IAC3C,IACER,KAAK,CAACE,QAAQ,IACdF,KAAK,CAACE,QAAQ,CAACY,iBAAiB,IAChCD,MAAM,IACN,IAAI,CAACZ,aAAa,IAClBY,MAAM,KAAK,MAAM,EACjB;MACAb,KAAK,CAACe,WAAW,GAAG,IAAI,CAACd,aAAa,CAACe,OAAO,CAAChB,KAAK,CAACU,MAAM,EAAEG,MAAM,CAAC;IACtE;IACA,OAAOb,KAAK;EACd;EAEAiB,eAAeA,CAAA,EAAG;IAChB,KAAK,CAACA,eAAe,CAAC,CAAC;IACvB,IAAI,CAACd,SAAS,CAACe,QAAQ,CAAC,WAAW,EAAErB,SAAS,EAAE,KAAK,CAAC;EACxD;EAEAsB,MAAMA,CAAA,EAAG;IACP,MAAMC,MAAM,GAAG,KAAK,CAACD,MAAM,CAAC,CAAC;IAC7BC,MAAM,CAACnB,aAAa,GAAG,IAAI,CAACA,aAAa,GACrC,IAAI,CAACA,aAAa,CAACkB,MAAM,CAAC,CAAC,GAC3BE,SAAS;IACb,OAAOD,MAAM;EACf;EAEAE,QAAQA,CAACC,IAAI,EAAE;IACb,KAAK,CAACD,QAAQ,CAACC,IAAI,CAAC;IACpB,IAAIA,IAAI,CAACtB,aAAa,EAAE;MACtB,IAAI,CAACA,aAAa,GAAG,IAAIP,aAAa,CAAC,CAAC;MACxC,IAAI,CAACO,aAAa,CAACqB,QAAQ,CAACC,IAAI,CAACtB,aAAa,CAAC;IACjD;EACF;AACF;AAEAuB,MAAM,CAACC,OAAO,GAAG5B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}