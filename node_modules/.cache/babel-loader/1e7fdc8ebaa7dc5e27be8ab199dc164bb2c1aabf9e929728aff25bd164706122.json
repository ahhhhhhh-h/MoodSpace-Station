{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nconst {\n  defaultContainer\n} = require('./container');\nconst Tokenizer = require('./tokenizer');\n\n/* eslint-disable */\nclass BaseStemmer {\n  constructor(container = defaultContainer, dictionary) {\n    this.container = container.container || container;\n    this.cache = {};\n    this.setCurrent(\"\");\n    this.dictionary = dictionary || {\n      before: {},\n      after: {}\n    };\n  }\n  setCurrent(value) {\n    this.current = value;\n    this.cursor = 0;\n    this.limit = this.current.length;\n    this.limit_backward = 0;\n    this.bra = this.cursor;\n    this.ket = this.limit;\n  }\n  getCurrent() {\n    return this.current;\n  }\n  bc(s, ch) {\n    if ((s[ch >>> 3] & 0x1 << (ch & 0x7)) == 0) {\n      return true;\n    }\n    return false;\n  }\n  in_grouping(s, min, max) {\n    if (this.cursor >= this.limit) return false;\n    let ch = this.current.charCodeAt(this.cursor);\n    if (ch > max || ch < min) return false;\n    ch -= min;\n    if (this.bc(s, ch)) return false;\n    this.cursor++;\n    return true;\n  }\n  in_grouping_b(s, min, max) {\n    if (this.cursor <= this.limit_backward) return false;\n    let ch = this.current.charCodeAt(this.cursor - 1);\n    if (ch > max || ch < min) return false;\n    ch -= min;\n    if (this.bc(s, ch)) return false;\n    this.cursor--;\n    return true;\n  }\n  out_grouping(s, min, max) {\n    if (this.cursor >= this.limit) return false;\n    let ch = this.current.charCodeAt(this.cursor);\n    if (ch > max || ch < min) {\n      this.cursor++;\n      return true;\n    }\n    ch -= min;\n    if (this.bc(s, ch)) {\n      this.cursor++;\n      return true;\n    }\n    return false;\n  }\n  out_grouping_b(s, min, max) {\n    if (this.cursor <= this.limit_backward) return false;\n    let ch = this.current.charCodeAt(this.cursor - 1);\n    if (ch > max || ch < min) {\n      this.cursor--;\n      return true;\n    }\n    ch -= min;\n    if (this.bc(s, ch)) {\n      this.cursor--;\n      return true;\n    }\n    return false;\n  }\n  eq_s(s_size, s) {\n    if (typeof s_size === 'string') {\n      s = s_size;\n      s_size = s.length;\n    }\n    if (this.limit - this.cursor < s_size || this.current.slice(this.cursor, this.cursor + s_size) != s) {\n      return false;\n    }\n    this.cursor += s_size;\n    return true;\n  }\n  eq_s_b(s_size, s) {\n    if (typeof s_size === 'string') {\n      s = s_size;\n      s_size = s.length;\n    }\n    if (this.cursor - this.limit_backward < s_size || this.current.slice(this.cursor - s_size, this.cursor) != s) {\n      return false;\n    }\n    this.cursor -= s_size;\n    return true;\n  }\n  find_among(v, v_size) {\n    let i = 0;\n    let j = v_size || v.length;\n    const c = this.cursor;\n    const l = this.limit;\n    let common_i = 0;\n    let common_j = 0;\n    let first_key_inspected = false;\n    while (true) {\n      const k = i + (j - i >>> 1);\n      let diff = 0;\n      let common = common_i < common_j ? common_i : common_j; // smaller\n      var w = v[k];\n      var i2;\n      for (i2 = common; i2 < w.s_size; i2++) {\n        if (c + common == l) {\n          diff = -1;\n          break;\n        }\n        diff = this.current.charCodeAt(c + common) - w.s.charCodeAt(i2);\n        if (diff != 0) break;\n        common++;\n      }\n      if (diff < 0) {\n        j = k;\n        common_j = common;\n      } else {\n        i = k;\n        common_i = common;\n      }\n      if (j - i <= 1) {\n        if (i > 0) break; // v->s has been inspected\n        if (j == i) break; // only one item in v\n\n        // - but now we need to go round once more to get\n        // v->s inspected. This looks messy, but is actually\n        // the optimal approach.\n\n        if (first_key_inspected) break;\n        first_key_inspected = true;\n      }\n    }\n    while (true) {\n      var w = v[i];\n      if (common_i >= w.s_size) {\n        this.cursor = c + w.s_size;\n        if (w.method == null) {\n          return w.result;\n        }\n        const res = w.method(w.instance);\n        this.cursor = c + w.s_size;\n        if (res) {\n          return w.result;\n        }\n      }\n      i = w.substring_i;\n      if (i < 0) return 0;\n    }\n    return -1; // not reachable\n  }\n\n  // find_among_b is for backwards processing. Same comments apply\n  find_among_b(v, v_size) {\n    let i = 0;\n    let j = v_size || v.length;\n    const c = this.cursor;\n    const lb = this.limit_backward;\n    let common_i = 0;\n    let common_j = 0;\n    let first_key_inspected = false;\n    while (true) {\n      const k = i + (j - i >> 1);\n      let diff = 0;\n      let common = common_i < common_j ? common_i : common_j;\n      var w = v[k];\n      var i2;\n      for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n        if (c - common == lb) {\n          diff = -1;\n          break;\n        }\n        diff = this.current.charCodeAt(c - 1 - common) - w.s.charCodeAt(i2);\n        if (diff != 0) break;\n        common++;\n      }\n      if (diff < 0) {\n        j = k;\n        common_j = common;\n      } else {\n        i = k;\n        common_i = common;\n      }\n      if (j - i <= 1) {\n        if (i > 0) break;\n        if (j == i) break;\n        if (first_key_inspected) break;\n        first_key_inspected = true;\n      }\n    }\n    while (true) {\n      var w = v[i];\n      if (common_i >= w.s_size) {\n        this.cursor = c - w.s_size;\n        if (w.method == null) return w.result;\n        const res = w.method(this);\n        this.cursor = c - w.s_size;\n        if (res) return w.result;\n      }\n      i = w.substring_i;\n      if (i < 0) return 0;\n    }\n    return -1; // not reachable\n  }\n\n  /* to replace chars between c_bra and c_ket in this.current by the\n   * chars in s.\n   */\n  replace_s(c_bra, c_ket, s) {\n    const adjustment = s.length - (c_ket - c_bra);\n    this.current = this.current.slice(0, c_bra) + s + this.current.slice(c_ket);\n    this.limit += adjustment;\n    if (this.cursor >= c_ket) this.cursor += adjustment;else if (this.cursor > c_bra) this.cursor = c_bra;\n    return adjustment;\n  }\n  slice_check() {\n    if (this.bra < 0 || this.bra > this.ket || this.ket > this.limit || this.limit > this.current.length) {\n      return false;\n    }\n    return true;\n  }\n  slice_from(s) {\n    if (this.slice_check()) {\n      this.replace_s(this.bra, this.ket, s);\n      return true;\n    }\n    return false;\n  }\n  slice_del() {\n    return this.slice_from(\"\");\n  }\n  insert(c_bra, c_ket, s) {\n    const adjustment = this.replace_s(c_bra, c_ket, s);\n    if (c_bra <= this.bra) this.bra += adjustment;\n    if (c_bra <= this.ket) this.ket += adjustment;\n  }\n\n  /* Copy the slice into the supplied StringBuffer */\n  slice_to(s) {\n    let result = \"\";\n    if (this.slice_check()) {\n      result = this.current.slice(this.bra, this.ket);\n    }\n    return result;\n  }\n  stemWord(word) {\n    let result = this.cache[`.${word}`];\n    if (result == null) {\n      if (this.dictionary.before.hasOwnProperty(word)) {\n        result = this.dictionary.before[word];\n      } else {\n        this.setCurrent(word);\n        this.innerStem();\n        result = this.getCurrent();\n        if (this.dictionary.after.hasOwnProperty(result)) {\n          result = this.dictionary.after[result];\n        }\n      }\n      this.cache[`.${word}`] = result;\n    }\n    return result;\n  }\n  stemWords(words) {\n    const results = [];\n    for (let i = 0; i < words.length; i++) {\n      const stemmed = this.stemWord(words[i]);\n      if (stemmed) {\n        results.push(stemmed.trim());\n      }\n    }\n    return results;\n  }\n  stem(tokens) {\n    if (tokens === undefined || tokens === null) {\n      return tokens;\n    }\n    if (!Array.isArray(tokens)) {\n      return this.stemWords([tokens])[0];\n    }\n    return this.stemWords(tokens);\n  }\n  getTokenizer() {\n    if (!this.tokenizer) {\n      this.tokenizer = this.container.get(`tokenizer-${this.name.slice(-2)}`) || new Tokenizer();\n    }\n    return this.tokenizer;\n  }\n  getStopwords() {\n    if (!this.stopwords) {\n      this.stopwords = this.container.get(`tokenizer-${this.name.slice(-2)}`);\n    }\n    return this.stopwords;\n  }\n  tokenizeAndStem(text, keepStops = true) {\n    const tokenizer = this.getTokenizer();\n    let tokens = tokenizer.tokenize(text, true);\n    if (!keepStops) {\n      const stopwords = this.getStopwords();\n      if (stopwords) {\n        tokens = stopwords.removeStopwords(tokens);\n      }\n    }\n    return this.stemWords(tokens);\n  }\n}\nmodule.exports = BaseStemmer;","map":{"version":3,"names":["defaultContainer","require","Tokenizer","BaseStemmer","constructor","container","dictionary","cache","setCurrent","before","after","value","current","cursor","limit","length","limit_backward","bra","ket","getCurrent","bc","s","ch","in_grouping","min","max","charCodeAt","in_grouping_b","out_grouping","out_grouping_b","eq_s","s_size","slice","eq_s_b","find_among","v","v_size","i","j","c","l","common_i","common_j","first_key_inspected","k","diff","common","w","i2","method","result","res","instance","substring_i","find_among_b","lb","replace_s","c_bra","c_ket","adjustment","slice_check","slice_from","slice_del","insert","slice_to","stemWord","word","hasOwnProperty","innerStem","stemWords","words","results","stemmed","push","trim","stem","tokens","undefined","Array","isArray","getTokenizer","tokenizer","get","name","getStopwords","stopwords","tokenizeAndStem","text","keepStops","tokenize","removeStopwords","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/core/src/base-stemmer.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nconst { defaultContainer } = require('./container');\nconst Tokenizer = require('./tokenizer');\n\n/* eslint-disable */\nclass BaseStemmer {\n  constructor(container = defaultContainer, dictionary) {\n    this.container = container.container || container;\n    this.cache = {};\n    this.setCurrent(\"\");\n    this.dictionary = dictionary || { before: {}, after: {}};\n  }\n\n  setCurrent(value) {\n    this.current = value;\n    this.cursor = 0;\n    this.limit = this.current.length;\n    this.limit_backward = 0;\n    this.bra = this.cursor;\n    this.ket = this.limit;\n  }\n\n  getCurrent() {\n    return this.current;\n  }\n\n  bc(s, ch) {\n    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) {\n      return true;\n    }\n    return false;\n  }\n\n  in_grouping(s, min, max) {\n    if (this.cursor >= this.limit) return false;\n    let ch = this.current.charCodeAt(this.cursor);\n    if (ch > max || ch < min) return false;\n    ch -= min;\n    if (this.bc(s, ch)) return false;\n    this.cursor++;\n    return true;\n  }\n\n  in_grouping_b(s, min, max) {\n    if (this.cursor <= this.limit_backward) return false;\n    let ch = this.current.charCodeAt(this.cursor - 1);\n    if (ch > max || ch < min) return false;\n    ch -= min;\n    if (this.bc(s, ch)) return false;\n    this.cursor--;\n    return true;\n  }\n\n  out_grouping(s, min, max) {\n    if (this.cursor >= this.limit) return false;\n    let ch = this.current.charCodeAt(this.cursor);\n    if (ch > max || ch < min) {\n      this.cursor++;\n      return true;\n    }\n    ch -= min;\n    if (this.bc(s, ch)) {\n      this.cursor++;\n      return true;\n    }\n    return false;\n  }\n\n  out_grouping_b(s, min, max) {\n    if (this.cursor <= this.limit_backward) return false;\n    let ch = this.current.charCodeAt(this.cursor - 1);\n    if (ch > max || ch < min) {\n      this.cursor--;\n      return true;\n    }\n    ch -= min;\n    if (this.bc(s, ch)) {\n      this.cursor--;\n      return true;\n    }\n    return false;\n  }\n\n  eq_s(s_size, s) {\n    if (typeof s_size === 'string') {\n      s = s_size;\n      s_size = s.length;\n    }\n    if ((this.limit - this.cursor < s_size) || (this.current.slice(this.cursor, this.cursor + s_size) != s)) {\n      return false;\n    }\n    this.cursor += s_size;\n    return true;\n  }\n\n  eq_s_b(s_size, s) {\n    if (typeof s_size === 'string') {\n      s = s_size;\n      s_size = s.length;\n    }\n    if ((this.cursor - this.limit_backward < s_size) || (this.current.slice(this.cursor - s_size, this.cursor) != s)) {\n      return false;\n    }\n    this.cursor -= s_size;\n    return true;\n  }\n\n  find_among(v, v_size) {\n    let i = 0;\n    let j = v_size || v.length;\n\n    const c = this.cursor;\n    const l = this.limit;\n\n    let common_i = 0;\n    let common_j = 0;\n\n    let first_key_inspected = false;\n\n    while (true) {\n      const k = i + ((j - i) >>> 1);\n      let diff = 0;\n      let common = common_i < common_j ? common_i : common_j; // smaller\n      var w = v[k];\n      var i2;\n      for (i2 = common; i2 < w.s_size; i2++) {\n        if (c + common == l) {\n          diff = -1;\n          break;\n        }\n        diff = this.current.charCodeAt(c + common) - w.s.charCodeAt(i2);\n        if (diff != 0) break;\n        common++;\n      }\n      if (diff < 0) {\n        j = k;\n        common_j = common;\n      } else {\n        i = k;\n        common_i = common;\n      }\n      if (j - i <= 1) {\n        if (i > 0) break; // v->s has been inspected\n        if (j == i) break; // only one item in v\n\n        // - but now we need to go round once more to get\n        // v->s inspected. This looks messy, but is actually\n        // the optimal approach.\n\n        if (first_key_inspected) break;\n        first_key_inspected = true;\n      }\n    }\n    while (true) {\n      var w = v[i];\n      if (common_i >= w.s_size) {\n        this.cursor = c + w.s_size;\n        if (w.method == null) {\n          return w.result;\n        }\n        const res = w.method(w.instance);\n        this.cursor = c + w.s_size;\n        if (res) {\n          return w.result;\n        }\n      }\n      i = w.substring_i;\n      if (i < 0) return 0;\n    }\n    return -1; // not reachable\n  }\n\n  // find_among_b is for backwards processing. Same comments apply\n  find_among_b(v, v_size) {\n    let i = 0;\n    let j = v_size || v.length;\n\n    const c = this.cursor;\n    const lb = this.limit_backward;\n\n    let common_i = 0;\n    let common_j = 0;\n\n    let first_key_inspected = false;\n\n    while (true) {\n      const k = i + ((j - i) >> 1);\n      let diff = 0;\n      let common = common_i < common_j ? common_i : common_j;\n      var w = v[k];\n      var i2;\n      for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {\n        if (c - common == lb) {\n          diff = -1;\n          break;\n        }\n        diff = this.current.charCodeAt(c - 1 - common) - w.s.charCodeAt(i2);\n        if (diff != 0) break;\n        common++;\n      }\n      if (diff < 0) {\n        j = k;\n        common_j = common;\n      } else {\n        i = k;\n        common_i = common;\n      }\n      if (j - i <= 1) {\n        if (i > 0) break;\n        if (j == i) break;\n        if (first_key_inspected) break;\n        first_key_inspected = true;\n      }\n    }\n    while (true) {\n      var w = v[i];\n      if (common_i >= w.s_size) {\n        this.cursor = c - w.s_size;\n        if (w.method == null) return w.result;\n        const res = w.method(this);\n        this.cursor = c - w.s_size;\n        if (res) return w.result;\n      }\n      i = w.substring_i;\n      if (i < 0) return 0;\n    }\n    return -1; // not reachable\n  }\n\n  /* to replace chars between c_bra and c_ket in this.current by the\n   * chars in s.\n   */\n  replace_s(c_bra, c_ket, s) {\n    const adjustment = s.length - (c_ket - c_bra);\n    this.current = this.current.slice(0, c_bra) + s + this.current.slice(c_ket);\n    this.limit += adjustment;\n    if (this.cursor >= c_ket) this.cursor += adjustment;\n    else if (this.cursor > c_bra) this.cursor = c_bra;\n    return adjustment;\n  }\n\n  slice_check() {\n    if (\n      this.bra < 0 ||\n      this.bra > this.ket ||\n      this.ket > this.limit ||\n      this.limit > this.current.length\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  slice_from(s) {\n    if (this.slice_check()) {\n      this.replace_s(this.bra, this.ket, s);\n      return true;\n    }\n    return false;\n  }\n\n  slice_del() {\n    return this.slice_from(\"\");\n  }\n\n  insert(c_bra, c_ket, s) {\n    const adjustment = this.replace_s(c_bra, c_ket, s);\n    if (c_bra <= this.bra) this.bra += adjustment;\n    if (c_bra <= this.ket) this.ket += adjustment;\n  }\n\n  /* Copy the slice into the supplied StringBuffer */\n  slice_to(s) {\n    let result = \"\";\n    if (this.slice_check()) {\n      result = this.current.slice(this.bra, this.ket);\n    }\n    return result;\n  }\n\n  stemWord(word) {\n    let result = this.cache[`.${word}`];\n    if (result == null) {\n      if (this.dictionary.before.hasOwnProperty(word)) {\n        result = this.dictionary.before[word];\n      } else {\n        this.setCurrent(word);\n        this.innerStem();\n        result = this.getCurrent();\n        if (this.dictionary.after.hasOwnProperty(result)) {\n          result = this.dictionary.after[result];\n        }\n      }\n      this.cache[`.${word}`] = result;\n    }\n    return result;\n  }\n\n  stemWords(words) {\n    const results = [];\n    for (let i = 0; i < words.length; i++) {\n      const stemmed = this.stemWord(words[i]);\n      if (stemmed) {\n        results.push(stemmed.trim());\n      }\n    }\n    return results;\n  }\n\n  stem(tokens) {\n    if (tokens === undefined || tokens === null) {\n      return tokens;\n    }\n    if (!Array.isArray(tokens)) {\n      return this.stemWords([tokens])[0];\n    }\n    return this.stemWords(tokens);\n  }\n\n  getTokenizer() {\n    if (!this.tokenizer) {\n      this.tokenizer =\n        this.container.get(`tokenizer-${this.name.slice(-2)}`) ||\n        new Tokenizer();\n    }\n    return this.tokenizer;\n  }\n\n  getStopwords() {\n    if (!this.stopwords) {\n      this.stopwords = this.container.get(`tokenizer-${this.name.slice(-2)}`);\n    }\n    return this.stopwords;\n  }\n\n  tokenizeAndStem(text, keepStops = true) {\n    const tokenizer = this.getTokenizer();\n    let tokens = tokenizer.tokenize(text, true);\n    if (!keepStops) {\n      const stopwords = this.getStopwords();\n      if (stopwords) {\n        tokens = stopwords.removeStopwords(tokens);\n      }\n    }\n    return this.stemWords(tokens);\n  }\n}\n\nmodule.exports = BaseStemmer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}