{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  generate: unparse\n} = require('escodegen');\nconst {\n  parse\n} = require('esprima');\nclass Evaluator {\n  constructor(context) {\n    this.defaultContext = context || {};\n    this.failResult = {};\n  }\n  walkLiteral(node) {\n    return node.value;\n  }\n  walkUnary(node, context) {\n    switch (node.operator) {\n      case '+':\n        return +this.walk(node.argument, context);\n      case '-':\n        return -this.walk(node.argument, context);\n      case '~':\n        /* eslint-disable no-bitwise */\n        return ~this.walk(node.argument, context);\n      case '!':\n        return !this.walk(node.argument, context);\n      default:\n        return this.failResult;\n    }\n  }\n  walkArray(node, context) {\n    const result = [];\n    for (let i = 0, l = node.elements.length; i < l; i += 1) {\n      const x = this.walk(node.elements[i], context);\n      if (x === this.failResult) {\n        return this.failResult;\n      }\n      result.push(x);\n    }\n    return result;\n  }\n  walkObject(node, context) {\n    const result = {};\n    for (let i = 0, l = node.properties.length; i < l; i += 1) {\n      const prop = node.properties[i];\n      const value = this.walk(prop.value, context);\n      if (value === this.failResult) {\n        return this.failResult;\n      }\n      result[prop.key.value || prop.key.name] = value;\n    }\n    return result;\n  }\n  walkBinary(node, context) {\n    const left = this.walk(node.left, context);\n    if (left === this.failResult) {\n      return this.failResult;\n    }\n    if (node.operator === '&&' && !left) {\n      return false;\n    }\n    if (node.operator === '||' && left) {\n      return true;\n    }\n    const right = this.walk(node.right, context);\n    if (right === this.failResult) {\n      return this.failResult;\n    }\n    switch (node.operator) {\n      case '==':\n        /* eslint-disable eqeqeq */\n        return left == right;\n      case '===':\n        return left === right;\n      case '!=':\n        /* eslint-disable eqeqeq */\n        return left != right;\n      case '!==':\n        return left !== right;\n      case '+':\n        return left + right;\n      case '-':\n        return left - right;\n      case '*':\n        return left * right;\n      case '/':\n        return left / right;\n      case '%':\n        return left % right;\n      case '<':\n        return left < right;\n      case '<=':\n        return left <= right;\n      case '>':\n        return left > right;\n      case '>=':\n        return left >= right;\n      case '|':\n        /* eslint-disable no-bitwise */\n        return left | right;\n      case '&':\n        /* eslint-disable no-bitwise */\n        return left & right;\n      case '^':\n        /* eslint-disable no-bitwise */\n        return left ^ right;\n      case '||':\n        return left || right;\n      case '&&':\n        return left && right;\n      default:\n        return this.failResult;\n    }\n  }\n  walkIdentifier(node, context) {\n    if ({}.hasOwnProperty.call(context, node.name)) {\n      return context[node.name];\n    }\n    return undefined;\n  }\n  walkThis(node, context) {\n    if ({}.hasOwnProperty.call(context, 'this')) {\n      // eslint-disable-next-line\n      return context[\"this\"];\n    }\n    return undefined;\n  }\n  walkCall(node, context) {\n    const callee = this.walk(node.callee, context);\n    if (callee === this.failResult || typeof callee !== 'function') {\n      return this.failResult;\n    }\n    let ctx = node.callee.object ? this.walk(node.callee.object, context) : this.failResult;\n    if (ctx === this.failResult) {\n      ctx = null;\n    }\n    const args = [];\n    for (let i = 0, l = node.arguments.length; i < l; i += 1) {\n      const x = this.walk(node.arguments[i], context);\n      if (x === this.failResult) {\n        return this.failResult;\n      }\n      args.push(x);\n    }\n    return callee.apply(ctx, args);\n  }\n  walkMember(node, context) {\n    const obj = this.walk(node.object, context);\n    if (obj === this.failResult || typeof obj === 'function') {\n      return this.failResult;\n    }\n    if (node.property.type === 'Identifier' && node.object.type !== 'ObjectExpression') {\n      return obj[node.property.name];\n    }\n    const prop = this.walk(node.property, context);\n    if (prop === this.failResult) {\n      return this.failResult;\n    }\n    return obj ? obj[prop] : this.failResult;\n  }\n  walkConditional(node, context) {\n    const value = this.walk(node.test, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    if (value) {\n      return this.walk(node.consequent, context);\n    }\n    if (!node.alternate) {\n      return undefined;\n    }\n    return this.walk(node.alternate, context);\n  }\n  walkExpression(node, context) {\n    const value = this.walk(node.expression, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    return value;\n  }\n  walkReturn(node, context) {\n    return this.walk(node.argument, context);\n  }\n  walkFunction(node, context) {\n    const newContext = {};\n    const keys = Object.keys(context);\n    keys.forEach(element => {\n      newContext[element] = context[element];\n    });\n    node.params.forEach(key => {\n      if (key.type === 'Identifier') {\n        newContext[key.name] = null;\n      }\n    });\n    const bodies = node.body.body;\n    for (let i = 0, l = bodies.length; i < l; i += 1) {\n      if (this.walk(bodies[i], newContext) === this.failResult) {\n        return this.failResult;\n      }\n    }\n    const vals = keys.map(key => context[key]);\n    // eslint-disable-next-line\n    return Function(keys.join(', '), 'return ' + unparse(node)).apply(null, vals);\n  }\n  walkTemplateLiteral(node, context) {\n    let str = '';\n    for (let i = 0; i < node.expressions.length; i += 1) {\n      str += this.walk(node.quasis[i], context);\n      str += this.walk(node.expressions[i], context);\n    }\n    return str;\n  }\n  walkTemplateElement(node) {\n    return node.value.cooked;\n  }\n  walkTaggedTemplate(node, context) {\n    const tag = this.walk(node.tag, context);\n    const {\n      quasi\n    } = node;\n    const strings = quasi.quasis.map(q => this.walk(q, context));\n    const values = quasi.expressions.map(e => this.walk(e, context));\n    // eslint-disable-next-line\n    return tag.apply(null, [strings].concat(values));\n  }\n  walkUpdateExpression(node, context) {\n    let value = this.walk(node.argument, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    switch (node.operator) {\n      case '++':\n        value += 1;\n        return this.walkSet(node.argument, context, value);\n      case '--':\n        value -= 1;\n        return this.walkSet(node.argument, context, value);\n      default:\n        return this.failResult;\n    }\n  }\n  walkAssignmentExpression(node, context) {\n    const value = this.walk(node.right, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    let leftValue = this.walk(node.left, context);\n    if (leftValue === this.failResult) {\n      leftValue = 0;\n    }\n    switch (node.operator) {\n      case '=':\n        this.walkSet(node.left, context, value);\n        return value;\n      case '+=':\n        leftValue += value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '-=':\n        leftValue -= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '*=':\n        leftValue *= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '/=':\n        leftValue /= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '%=':\n        leftValue %= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '|=':\n        // eslint-disable-next-line\n        leftValue |= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '&=':\n        // eslint-disable-next-line\n        leftValue &= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '^=':\n        // eslint-disable-next-line\n        leftValue ^= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      default:\n        return this.failResult;\n    }\n  }\n  walkBlock(node, context) {\n    if (Array.isArray(node.body)) {\n      let result;\n      for (let i = 0; i < node.body.length; i += 1) {\n        result = this.walk(node.body[i], context);\n      }\n      return result;\n    }\n    return this.walk(node.body, context);\n  }\n  walk(node, context) {\n    switch (node.type) {\n      case 'Literal':\n        return this.walkLiteral(node, context);\n      case 'UnaryExpression':\n        return this.walkUnary(node, context);\n      case 'ArrayExpression':\n        return this.walkArray(node, context);\n      case 'ObjectExpression':\n        return this.walkObject(node, context);\n      case 'BinaryExpression':\n      case 'LogicalExpression':\n        return this.walkBinary(node, context);\n      case 'Identifier':\n        return this.walkIdentifier(node, context);\n      case 'ThisExpression':\n        return this.walkThis(node, context);\n      case 'CallExpression':\n        return this.walkCall(node, context);\n      case 'MemberExpression':\n        return this.walkMember(node, context);\n      case 'ConditionalExpression':\n        return this.walkConditional(node, context);\n      case 'ExpressionStatement':\n        return this.walkExpression(node, context);\n      case 'ReturnStatement':\n        return this.walkReturn(node, context);\n      case 'FunctionExpression':\n        return this.walkFunction(node, context);\n      case 'TemplateLiteral':\n        return this.walkTemplateLiteral(node, context);\n      case 'TemplateElement':\n        return this.walkTemplateElement(node, context);\n      case 'TaggedTemplateExpression':\n        return this.walkTaggedTemplate(node, context);\n      case 'UpdateExpression':\n        return this.walkUpdateExpression(node, context);\n      case 'AssignmentExpression':\n        return this.walkAssignmentExpression(node, context);\n      case 'IfStatement':\n        return this.walkConditional(node, context);\n      case 'BlockStatement':\n        return this.walkBlock(node, context);\n      default:\n        return this.failResult;\n    }\n  }\n  walkSetIdentifier(node, context, value) {\n    const newContext = context;\n    newContext[node.name] = value;\n    return value;\n  }\n  walkSetMember(node, context, value) {\n    const obj = this.walk(node.object, context);\n    if (obj === this.failResult || typeof obj === 'function') {\n      return this.failResult;\n    }\n    if (node.property.type === 'Identifier') {\n      obj[node.property.name] = value;\n      return value;\n    }\n    const prop = this.walk(node.property, context);\n    if (prop === this.failResult) {\n      return this.failResult;\n    }\n    if (!obj) {\n      return this.failResult;\n    }\n    obj[prop] = value;\n    return value;\n  }\n  walkSet(node, context, value) {\n    switch (node.type) {\n      case 'Identifier':\n        return this.walkSetIdentifier(node, context, value);\n      case 'MemberExpression':\n        return this.walkSetMember(node, context, value);\n      default:\n        return this.failResult;\n    }\n  }\n  evaluateAll(str, context) {\n    const result = [];\n    const newContext = context || this.context;\n    const compiled = parse(str);\n    for (let i = 0; i < compiled.body.length; i += 1) {\n      const expression = compiled.body[i].expression ? compiled.body[i].expression : compiled.body[i];\n      const value = this.walk(expression, newContext);\n      result.push(value === this.failResult ? undefined : value);\n    }\n    return result;\n  }\n  evaluate(str, context) {\n    const result = this.evaluateAll(str, context);\n    if (!result || result.length === 0) {\n      return undefined;\n    }\n    return result[result.length - 1];\n  }\n}\nmodule.exports = Evaluator;","map":{"version":3,"names":["generate","unparse","require","parse","Evaluator","constructor","context","defaultContext","failResult","walkLiteral","node","value","walkUnary","operator","walk","argument","walkArray","result","i","l","elements","length","x","push","walkObject","properties","prop","key","name","walkBinary","left","right","walkIdentifier","hasOwnProperty","call","undefined","walkThis","walkCall","callee","ctx","object","args","arguments","apply","walkMember","obj","property","type","walkConditional","test","consequent","alternate","walkExpression","expression","walkReturn","walkFunction","newContext","keys","Object","forEach","element","params","bodies","body","vals","map","Function","join","walkTemplateLiteral","str","expressions","quasis","walkTemplateElement","cooked","walkTaggedTemplate","tag","quasi","strings","q","values","e","concat","walkUpdateExpression","walkSet","walkAssignmentExpression","leftValue","walkBlock","Array","isArray","walkSetIdentifier","walkSetMember","evaluateAll","compiled","evaluate","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/evaluator/src/evaluator.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { generate: unparse } = require('escodegen');\nconst { parse } = require('esprima');\n\nclass Evaluator {\n  constructor(context) {\n    this.defaultContext = context || {};\n    this.failResult = {};\n  }\n\n  walkLiteral(node) {\n    return node.value;\n  }\n\n  walkUnary(node, context) {\n    switch (node.operator) {\n      case '+':\n        return +this.walk(node.argument, context);\n      case '-':\n        return -this.walk(node.argument, context);\n      case '~':\n        /* eslint-disable no-bitwise */\n        return ~this.walk(node.argument, context);\n      case '!':\n        return !this.walk(node.argument, context);\n      default:\n        return this.failResult;\n    }\n  }\n\n  walkArray(node, context) {\n    const result = [];\n    for (let i = 0, l = node.elements.length; i < l; i += 1) {\n      const x = this.walk(node.elements[i], context);\n      if (x === this.failResult) {\n        return this.failResult;\n      }\n      result.push(x);\n    }\n    return result;\n  }\n\n  walkObject(node, context) {\n    const result = {};\n    for (let i = 0, l = node.properties.length; i < l; i += 1) {\n      const prop = node.properties[i];\n      const value = this.walk(prop.value, context);\n      if (value === this.failResult) {\n        return this.failResult;\n      }\n      result[prop.key.value || prop.key.name] = value;\n    }\n    return result;\n  }\n\n  walkBinary(node, context) {\n    const left = this.walk(node.left, context);\n    if (left === this.failResult) {\n      return this.failResult;\n    }\n    if (node.operator === '&&' && !left) {\n      return false;\n    }\n    if (node.operator === '||' && left) {\n      return true;\n    }\n    const right = this.walk(node.right, context);\n    if (right === this.failResult) {\n      return this.failResult;\n    }\n    switch (node.operator) {\n      case '==':\n        /* eslint-disable eqeqeq */\n        return left == right;\n      case '===':\n        return left === right;\n      case '!=':\n        /* eslint-disable eqeqeq */\n        return left != right;\n      case '!==':\n        return left !== right;\n      case '+':\n        return left + right;\n      case '-':\n        return left - right;\n      case '*':\n        return left * right;\n      case '/':\n        return left / right;\n      case '%':\n        return left % right;\n      case '<':\n        return left < right;\n      case '<=':\n        return left <= right;\n      case '>':\n        return left > right;\n      case '>=':\n        return left >= right;\n      case '|':\n        /* eslint-disable no-bitwise */\n        return left | right;\n      case '&':\n        /* eslint-disable no-bitwise */\n        return left & right;\n      case '^':\n        /* eslint-disable no-bitwise */\n        return left ^ right;\n      case '||':\n        return left || right;\n      case '&&':\n        return left && right;\n      default:\n        return this.failResult;\n    }\n  }\n\n  walkIdentifier(node, context) {\n    if ({}.hasOwnProperty.call(context, node.name)) {\n      return context[node.name];\n    }\n    return undefined;\n  }\n\n  walkThis(node, context) {\n    if ({}.hasOwnProperty.call(context, 'this')) {\n      // eslint-disable-next-line\n      return context[\"this\"];\n    }\n    return undefined;\n  }\n\n  walkCall(node, context) {\n    const callee = this.walk(node.callee, context);\n    if (callee === this.failResult || typeof callee !== 'function') {\n      return this.failResult;\n    }\n    let ctx = node.callee.object\n      ? this.walk(node.callee.object, context)\n      : this.failResult;\n    if (ctx === this.failResult) {\n      ctx = null;\n    }\n    const args = [];\n    for (let i = 0, l = node.arguments.length; i < l; i += 1) {\n      const x = this.walk(node.arguments[i], context);\n      if (x === this.failResult) {\n        return this.failResult;\n      }\n      args.push(x);\n    }\n    return callee.apply(ctx, args);\n  }\n\n  walkMember(node, context) {\n    const obj = this.walk(node.object, context);\n    if (obj === this.failResult || typeof obj === 'function') {\n      return this.failResult;\n    }\n    if (\n      node.property.type === 'Identifier' &&\n      node.object.type !== 'ObjectExpression'\n    ) {\n      return obj[node.property.name];\n    }\n    const prop = this.walk(node.property, context);\n    if (prop === this.failResult) {\n      return this.failResult;\n    }\n    return obj ? obj[prop] : this.failResult;\n  }\n\n  walkConditional(node, context) {\n    const value = this.walk(node.test, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    if (value) {\n      return this.walk(node.consequent, context);\n    }\n    if (!node.alternate) {\n      return undefined;\n    }\n    return this.walk(node.alternate, context);\n  }\n\n  walkExpression(node, context) {\n    const value = this.walk(node.expression, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    return value;\n  }\n\n  walkReturn(node, context) {\n    return this.walk(node.argument, context);\n  }\n\n  walkFunction(node, context) {\n    const newContext = {};\n    const keys = Object.keys(context);\n    keys.forEach((element) => {\n      newContext[element] = context[element];\n    });\n    node.params.forEach((key) => {\n      if (key.type === 'Identifier') {\n        newContext[key.name] = null;\n      }\n    });\n    const bodies = node.body.body;\n    for (let i = 0, l = bodies.length; i < l; i += 1) {\n      if (this.walk(bodies[i], newContext) === this.failResult) {\n        return this.failResult;\n      }\n    }\n    const vals = keys.map((key) => context[key]);\n    // eslint-disable-next-line\n    return Function(keys.join(', '), 'return ' + unparse(node)).apply(\n      null,\n      vals\n    );\n  }\n\n  walkTemplateLiteral(node, context) {\n    let str = '';\n    for (let i = 0; i < node.expressions.length; i += 1) {\n      str += this.walk(node.quasis[i], context);\n      str += this.walk(node.expressions[i], context);\n    }\n    return str;\n  }\n\n  walkTemplateElement(node) {\n    return node.value.cooked;\n  }\n\n  walkTaggedTemplate(node, context) {\n    const tag = this.walk(node.tag, context);\n    const { quasi } = node;\n    const strings = quasi.quasis.map((q) => this.walk(q, context));\n    const values = quasi.expressions.map((e) => this.walk(e, context));\n    // eslint-disable-next-line\n    return tag.apply(null, [strings].concat(values));\n  }\n\n  walkUpdateExpression(node, context) {\n    let value = this.walk(node.argument, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    switch (node.operator) {\n      case '++':\n        value += 1;\n        return this.walkSet(node.argument, context, value);\n      case '--':\n        value -= 1;\n        return this.walkSet(node.argument, context, value);\n      default:\n        return this.failResult;\n    }\n  }\n\n  walkAssignmentExpression(node, context) {\n    const value = this.walk(node.right, context);\n    if (value === this.failResult) {\n      return this.failResult;\n    }\n    let leftValue = this.walk(node.left, context);\n    if (leftValue === this.failResult) {\n      leftValue = 0;\n    }\n    switch (node.operator) {\n      case '=':\n        this.walkSet(node.left, context, value);\n        return value;\n      case '+=':\n        leftValue += value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '-=':\n        leftValue -= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '*=':\n        leftValue *= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '/=':\n        leftValue /= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '%=':\n        leftValue %= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '|=':\n        // eslint-disable-next-line\n        leftValue |= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '&=':\n        // eslint-disable-next-line\n        leftValue &= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      case '^=':\n        // eslint-disable-next-line\n        leftValue ^= value;\n        this.walkSet(node.left, context, leftValue);\n        return leftValue;\n      default:\n        return this.failResult;\n    }\n  }\n\n  walkBlock(node, context) {\n    if (Array.isArray(node.body)) {\n      let result;\n      for (let i = 0; i < node.body.length; i += 1) {\n        result = this.walk(node.body[i], context);\n      }\n      return result;\n    }\n    return this.walk(node.body, context);\n  }\n\n  walk(node, context) {\n    switch (node.type) {\n      case 'Literal':\n        return this.walkLiteral(node, context);\n      case 'UnaryExpression':\n        return this.walkUnary(node, context);\n      case 'ArrayExpression':\n        return this.walkArray(node, context);\n      case 'ObjectExpression':\n        return this.walkObject(node, context);\n      case 'BinaryExpression':\n      case 'LogicalExpression':\n        return this.walkBinary(node, context);\n      case 'Identifier':\n        return this.walkIdentifier(node, context);\n      case 'ThisExpression':\n        return this.walkThis(node, context);\n      case 'CallExpression':\n        return this.walkCall(node, context);\n      case 'MemberExpression':\n        return this.walkMember(node, context);\n      case 'ConditionalExpression':\n        return this.walkConditional(node, context);\n      case 'ExpressionStatement':\n        return this.walkExpression(node, context);\n      case 'ReturnStatement':\n        return this.walkReturn(node, context);\n      case 'FunctionExpression':\n        return this.walkFunction(node, context);\n      case 'TemplateLiteral':\n        return this.walkTemplateLiteral(node, context);\n      case 'TemplateElement':\n        return this.walkTemplateElement(node, context);\n      case 'TaggedTemplateExpression':\n        return this.walkTaggedTemplate(node, context);\n      case 'UpdateExpression':\n        return this.walkUpdateExpression(node, context);\n      case 'AssignmentExpression':\n        return this.walkAssignmentExpression(node, context);\n      case 'IfStatement':\n        return this.walkConditional(node, context);\n      case 'BlockStatement':\n        return this.walkBlock(node, context);\n      default:\n        return this.failResult;\n    }\n  }\n\n  walkSetIdentifier(node, context, value) {\n    const newContext = context;\n    newContext[node.name] = value;\n    return value;\n  }\n\n  walkSetMember(node, context, value) {\n    const obj = this.walk(node.object, context);\n    if (obj === this.failResult || typeof obj === 'function') {\n      return this.failResult;\n    }\n    if (node.property.type === 'Identifier') {\n      obj[node.property.name] = value;\n      return value;\n    }\n    const prop = this.walk(node.property, context);\n    if (prop === this.failResult) {\n      return this.failResult;\n    }\n    if (!obj) {\n      return this.failResult;\n    }\n    obj[prop] = value;\n    return value;\n  }\n\n  walkSet(node, context, value) {\n    switch (node.type) {\n      case 'Identifier':\n        return this.walkSetIdentifier(node, context, value);\n      case 'MemberExpression':\n        return this.walkSetMember(node, context, value);\n      default:\n        return this.failResult;\n    }\n  }\n\n  evaluateAll(str, context) {\n    const result = [];\n    const newContext = context || this.context;\n    const compiled = parse(str);\n    for (let i = 0; i < compiled.body.length; i += 1) {\n      const expression = compiled.body[i].expression\n        ? compiled.body[i].expression\n        : compiled.body[i];\n      const value = this.walk(expression, newContext);\n      result.push(value === this.failResult ? undefined : value);\n    }\n    return result;\n  }\n\n  evaluate(str, context) {\n    const result = this.evaluateAll(str, context);\n    if (!result || result.length === 0) {\n      return undefined;\n    }\n    return result[result.length - 1];\n  }\n}\n\nmodule.exports = Evaluator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}