{"ast":null,"code":"/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Connection costs matrix from cc.dat file.\n * 2 dimension matrix [forward_id][backward_id] -> cost\n * @constructor\n * @param {number} forward_dimension\n * @param {number} backward_dimension\n */\nfunction ConnectionCosts(forward_dimension, backward_dimension) {\n  this.forward_dimension = forward_dimension;\n  this.backward_dimension = backward_dimension;\n\n  // leading 2 integers for forward_dimension, backward_dimension, respectively\n  this.buffer = new Int16Array(forward_dimension * backward_dimension + 2);\n  this.buffer[0] = forward_dimension;\n  this.buffer[1] = backward_dimension;\n}\nConnectionCosts.prototype.put = function (forward_id, backward_id, cost) {\n  var index = forward_id * this.backward_dimension + backward_id + 2;\n  if (this.buffer.length < index + 1) {\n    throw \"ConnectionCosts buffer overflow\";\n  }\n  this.buffer[index] = cost;\n};\nConnectionCosts.prototype.get = function (forward_id, backward_id) {\n  var index = forward_id * this.backward_dimension + backward_id + 2;\n  if (this.buffer.length < index + 1) {\n    throw \"ConnectionCosts buffer overflow\";\n  }\n  return this.buffer[index];\n};\nConnectionCosts.prototype.loadConnectionCosts = function (connection_costs_buffer) {\n  this.forward_dimension = connection_costs_buffer[0];\n  this.backward_dimension = connection_costs_buffer[1];\n  this.buffer = connection_costs_buffer;\n};\nmodule.exports = ConnectionCosts;","map":{"version":3,"names":["ConnectionCosts","forward_dimension","backward_dimension","buffer","Int16Array","prototype","put","forward_id","backward_id","cost","index","length","get","loadConnectionCosts","connection_costs_buffer","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/kuromoji/src/dict/ConnectionCosts.js"],"sourcesContent":["/*\n * Copyright 2014 Takuya Asano\n * Copyright 2010-2014 Atilika Inc. and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Connection costs matrix from cc.dat file.\n * 2 dimension matrix [forward_id][backward_id] -> cost\n * @constructor\n * @param {number} forward_dimension\n * @param {number} backward_dimension\n */\nfunction ConnectionCosts(forward_dimension, backward_dimension) {\n    this.forward_dimension = forward_dimension;\n    this.backward_dimension = backward_dimension;\n\n    // leading 2 integers for forward_dimension, backward_dimension, respectively\n    this.buffer = new Int16Array(forward_dimension * backward_dimension + 2);\n    this.buffer[0] = forward_dimension;\n    this.buffer[1] = backward_dimension;\n}\n\nConnectionCosts.prototype.put = function (forward_id, backward_id, cost) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    this.buffer[index] = cost;\n};\n\nConnectionCosts.prototype.get = function (forward_id, backward_id) {\n    var index = forward_id * this.backward_dimension + backward_id + 2;\n    if (this.buffer.length < index + 1) {\n        throw \"ConnectionCosts buffer overflow\";\n    }\n    return this.buffer[index];\n};\n\nConnectionCosts.prototype.loadConnectionCosts = function (connection_costs_buffer) {\n    this.forward_dimension = connection_costs_buffer[0];\n    this.backward_dimension = connection_costs_buffer[1];\n    this.buffer = connection_costs_buffer;\n};\n\nmodule.exports = ConnectionCosts;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAeA,CAACC,iBAAiB,EAAEC,kBAAkB,EAAE;EAC5D,IAAI,CAACD,iBAAiB,GAAGA,iBAAiB;EAC1C,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;;EAE5C;EACA,IAAI,CAACC,MAAM,GAAG,IAAIC,UAAU,CAACH,iBAAiB,GAAGC,kBAAkB,GAAG,CAAC,CAAC;EACxE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,GAAGF,iBAAiB;EAClC,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,GAAGD,kBAAkB;AACvC;AAEAF,eAAe,CAACK,SAAS,CAACC,GAAG,GAAG,UAAUC,UAAU,EAAEC,WAAW,EAAEC,IAAI,EAAE;EACrE,IAAIC,KAAK,GAAGH,UAAU,GAAG,IAAI,CAACL,kBAAkB,GAAGM,WAAW,GAAG,CAAC;EAClE,IAAI,IAAI,CAACL,MAAM,CAACQ,MAAM,GAAGD,KAAK,GAAG,CAAC,EAAE;IAChC,MAAM,iCAAiC;EAC3C;EACA,IAAI,CAACP,MAAM,CAACO,KAAK,CAAC,GAAGD,IAAI;AAC7B,CAAC;AAEDT,eAAe,CAACK,SAAS,CAACO,GAAG,GAAG,UAAUL,UAAU,EAAEC,WAAW,EAAE;EAC/D,IAAIE,KAAK,GAAGH,UAAU,GAAG,IAAI,CAACL,kBAAkB,GAAGM,WAAW,GAAG,CAAC;EAClE,IAAI,IAAI,CAACL,MAAM,CAACQ,MAAM,GAAGD,KAAK,GAAG,CAAC,EAAE;IAChC,MAAM,iCAAiC;EAC3C;EACA,OAAO,IAAI,CAACP,MAAM,CAACO,KAAK,CAAC;AAC7B,CAAC;AAEDV,eAAe,CAACK,SAAS,CAACQ,mBAAmB,GAAG,UAAUC,uBAAuB,EAAE;EAC/E,IAAI,CAACb,iBAAiB,GAAGa,uBAAuB,CAAC,CAAC,CAAC;EACnD,IAAI,CAACZ,kBAAkB,GAAGY,uBAAuB,CAAC,CAAC,CAAC;EACpD,IAAI,CAACX,MAAM,GAAGW,uBAAuB;AACzC,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGhB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}