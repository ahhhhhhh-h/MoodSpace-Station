{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst CorpusLookup = require('./corpus-lookup');\nconst defaultSettings = {\n  iterations: 20000,\n  errorThresh: 0.00005,\n  deltaErrorThresh: 0.000001,\n  learningRate: 0.6,\n  momentum: 0.5,\n  alpha: 0.07,\n  log: false\n};\nclass NeuralNetwork {\n  constructor(settings = {}) {\n    this.settings = settings;\n    this.applySettings(this.settings, defaultSettings);\n    if (this.settings.log === true) {\n      this.logFn = (status, time) => console.log(`Epoch ${status.iterations} loss ${status.error} time ${time}ms`);\n    } else if (typeof this.settings.log === 'function') {\n      this.logFn = this.settings.log;\n    }\n  }\n  applySettings(obj = {}, settings = {}) {\n    Object.keys(settings).forEach(key => {\n      if (obj[key] === undefined) {\n        obj[key] = settings[key];\n      }\n    });\n    return obj;\n  }\n  initialize(numInputs, outputNames) {\n    this.perceptronsByName = {};\n    this.perceptrons = [];\n    this.outputs = {};\n    this.numPerceptrons = outputNames.length;\n    for (let i = 0; i < outputNames.length; i += 1) {\n      const name = outputNames[i];\n      this.outputs[name] = 0;\n      const perceptron = {\n        name,\n        id: i,\n        weights: new Float32Array(numInputs),\n        changes: new Float32Array(numInputs),\n        bias: 0\n      };\n      this.perceptrons.push(perceptron);\n      this.perceptronsByName[name] = perceptron;\n    }\n  }\n  runInputPerceptron(perceptron, input) {\n    const sum = input.keys.reduce((prev, key) => prev + input.data[key] * perceptron.weights[key], perceptron.bias);\n    return sum <= 0 ? 0 : this.settings.alpha * sum;\n  }\n  runInput(input) {\n    for (let i = 0; i < this.numPerceptrons; i += 1) {\n      this.outputs[this.perceptrons[i].name] = this.runInputPerceptron(this.perceptrons[i], input);\n    }\n    return this.outputs;\n  }\n  get isRunnable() {\n    return !!this.numPerceptrons;\n  }\n  run(input) {\n    return this.numPerceptrons ? this.runInput(this.lookup.transformInput(input)) : undefined;\n  }\n  prepareCorpus(corpus) {\n    this.lookup = new CorpusLookup();\n    return this.lookup.build(corpus);\n  }\n  verifyIsInitialized() {\n    if (!this.perceptrons) {\n      this.initialize(this.lookup.numInputs, this.lookup.outputLookup.items);\n    }\n  }\n  trainPerceptron(perceptron, data) {\n    const {\n      alpha,\n      momentum\n    } = this.settings;\n    const {\n      changes,\n      weights\n    } = perceptron;\n    let error = 0;\n    for (let i = 0; i < data.length; i += 1) {\n      const {\n        input,\n        output\n      } = data[i];\n      const actualOutput = this.runInputPerceptron(perceptron, input);\n      const expectedOutput = output.data[perceptron.id] || 0;\n      const currentError = expectedOutput - actualOutput;\n      if (currentError) {\n        error += currentError ** 2;\n        const delta = (actualOutput > 0 ? 1 : alpha) * currentError * this.decayLearningRate;\n        for (let j = 0; j < input.keys.length; j += 1) {\n          const key = input.keys[j];\n          const change = delta * input.data[key] + momentum * changes[key];\n          changes[key] = change;\n          weights[key] += change;\n        }\n        perceptron.bias += delta;\n      }\n    }\n    return error;\n  }\n  train(corpus) {\n    if (!corpus || !corpus.length) {\n      return {};\n    }\n    const useNoneFeature = corpus[corpus.length - 1].input.nonefeature !== undefined;\n    if (useNoneFeature) {\n      const intents = {};\n      for (let i = 0; i < corpus.length - 1; i += 1) {\n        const tokens = Object.keys(corpus[i].output);\n        for (let j = 0; j < tokens.length; j += 1) {\n          if (!intents[tokens[j]]) {\n            intents[tokens[j]] = 1;\n          }\n        }\n      }\n      const current = corpus[corpus.length - 1];\n      const keys = Object.keys(intents);\n      for (let i = 0; i < keys.length; i += 1) {\n        current.output[keys[i]] = 0.0000001;\n      }\n    }\n    const data = this.prepareCorpus(corpus);\n    if (!this.status) {\n      this.status = {\n        error: Infinity,\n        deltaError: Infinity,\n        iterations: 0\n      };\n    }\n    this.verifyIsInitialized();\n    const minError = this.settings.errorThresh;\n    const minDelta = this.settings.deltaErrorThresh;\n    while (this.status.iterations < this.settings.iterations && this.status.error > minError && this.status.deltaError > minDelta) {\n      const hrstart = new Date();\n      this.status.iterations += 1;\n      this.decayLearningRate = this.settings.learningRate / (1 + 0.001 * this.status.iterations);\n      const lastError = this.status.error;\n      this.status.error = 0;\n      for (let i = 0; i < this.numPerceptrons; i += 1) {\n        this.status.error += this.trainPerceptron(this.perceptrons[i], data);\n      }\n      this.status.error /= this.numPerceptrons * data.length;\n      this.status.deltaError = Math.abs(this.status.error - lastError);\n      const hrend = new Date();\n      if (this.logFn) {\n        this.logFn(this.status, hrend.getTime() - hrstart.getTime());\n      }\n    }\n    return this.status;\n  }\n  explain(input, intent) {\n    const transformedInput = this.lookup.transformInput(input);\n    const result = {};\n    const intentIndex = this.lookup.outputLookup.dict[intent];\n    if (intentIndex === undefined) {\n      return {};\n    }\n    for (let i = 0; i < transformedInput.keys.length; i += 1) {\n      const key = transformedInput.keys[i];\n      result[this.lookup.inputLookup.items[key]] = this.perceptrons[intentIndex].weights[key];\n    }\n    return {\n      weights: result,\n      bias: this.perceptrons[intentIndex].bias\n    };\n  }\n  toJSON() {\n    const settings = {};\n    const keys = Object.keys(this.settings);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      if (this.settings[key] !== defaultSettings[key]) {\n        settings[key] = this.settings[key];\n      }\n    }\n    if (!this.lookup) {\n      return {\n        settings\n      };\n    }\n    const features = this.lookup.inputLookup.items;\n    const intents = this.lookup.outputLookup.items;\n    const perceptrons = [];\n    for (let i = 0; i < this.perceptrons.length; i += 1) {\n      const perceptron = this.perceptrons[i];\n      const weights = [...perceptron.weights, perceptron.bias];\n      perceptrons.push(weights);\n    }\n    return {\n      settings,\n      features,\n      intents,\n      perceptrons\n    };\n  }\n  fromJSON(json) {\n    this.settings = this.applySettings({\n      ...defaultSettings,\n      ...json.settings\n    });\n    if (json.features) {\n      this.lookup = new CorpusLookup(json.features, json.intents);\n      this.initialize(json.features.length, json.intents);\n      for (let i = 0; i < this.perceptrons.length; i += 1) {\n        const perceptron = this.perceptrons[i];\n        const data = json.perceptrons[i];\n        perceptron.bias = data[data.length - 1];\n        for (let j = 0; j < json.features.length; j += 1) {\n          perceptron.weights[j] = data[j];\n        }\n      }\n    }\n  }\n}\nmodule.exports = NeuralNetwork;","map":{"version":3,"names":["CorpusLookup","require","defaultSettings","iterations","errorThresh","deltaErrorThresh","learningRate","momentum","alpha","log","NeuralNetwork","constructor","settings","applySettings","logFn","status","time","console","error","obj","Object","keys","forEach","key","undefined","initialize","numInputs","outputNames","perceptronsByName","perceptrons","outputs","numPerceptrons","length","i","name","perceptron","id","weights","Float32Array","changes","bias","push","runInputPerceptron","input","sum","reduce","prev","data","runInput","isRunnable","run","lookup","transformInput","prepareCorpus","corpus","build","verifyIsInitialized","outputLookup","items","trainPerceptron","output","actualOutput","expectedOutput","currentError","delta","decayLearningRate","j","change","train","useNoneFeature","nonefeature","intents","tokens","current","Infinity","deltaError","minError","minDelta","hrstart","Date","lastError","Math","abs","hrend","getTime","explain","intent","transformedInput","result","intentIndex","dict","inputLookup","toJSON","features","fromJSON","json","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/neural/src/neural-network.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst CorpusLookup = require('./corpus-lookup');\n\nconst defaultSettings = {\n  iterations: 20000,\n  errorThresh: 0.00005,\n  deltaErrorThresh: 0.000001,\n  learningRate: 0.6,\n  momentum: 0.5,\n  alpha: 0.07,\n  log: false,\n};\n\nclass NeuralNetwork {\n  constructor(settings = {}) {\n    this.settings = settings;\n    this.applySettings(this.settings, defaultSettings);\n    if (this.settings.log === true) {\n      this.logFn = (status, time) =>\n        console.log(\n          `Epoch ${status.iterations} loss ${status.error} time ${time}ms`\n        );\n    } else if (typeof this.settings.log === 'function') {\n      this.logFn = this.settings.log;\n    }\n  }\n\n  applySettings(obj = {}, settings = {}) {\n    Object.keys(settings).forEach((key) => {\n      if (obj[key] === undefined) {\n        obj[key] = settings[key];\n      }\n    });\n    return obj;\n  }\n\n  initialize(numInputs, outputNames) {\n    this.perceptronsByName = {};\n    this.perceptrons = [];\n    this.outputs = {};\n    this.numPerceptrons = outputNames.length;\n    for (let i = 0; i < outputNames.length; i += 1) {\n      const name = outputNames[i];\n      this.outputs[name] = 0;\n      const perceptron = {\n        name,\n        id: i,\n        weights: new Float32Array(numInputs),\n        changes: new Float32Array(numInputs),\n        bias: 0,\n      };\n      this.perceptrons.push(perceptron);\n      this.perceptronsByName[name] = perceptron;\n    }\n  }\n\n  runInputPerceptron(perceptron, input) {\n    const sum = input.keys.reduce(\n      (prev, key) => prev + input.data[key] * perceptron.weights[key],\n      perceptron.bias\n    );\n    return sum <= 0 ? 0 : this.settings.alpha * sum;\n  }\n\n  runInput(input) {\n    for (let i = 0; i < this.numPerceptrons; i += 1) {\n      this.outputs[this.perceptrons[i].name] = this.runInputPerceptron(\n        this.perceptrons[i],\n        input\n      );\n    }\n    return this.outputs;\n  }\n\n  get isRunnable() {\n    return !!this.numPerceptrons;\n  }\n\n  run(input) {\n    return this.numPerceptrons\n      ? this.runInput(this.lookup.transformInput(input))\n      : undefined;\n  }\n\n  prepareCorpus(corpus) {\n    this.lookup = new CorpusLookup();\n    return this.lookup.build(corpus);\n  }\n\n  verifyIsInitialized() {\n    if (!this.perceptrons) {\n      this.initialize(this.lookup.numInputs, this.lookup.outputLookup.items);\n    }\n  }\n\n  trainPerceptron(perceptron, data) {\n    const { alpha, momentum } = this.settings;\n    const { changes, weights } = perceptron;\n    let error = 0;\n    for (let i = 0; i < data.length; i += 1) {\n      const { input, output } = data[i];\n      const actualOutput = this.runInputPerceptron(perceptron, input);\n      const expectedOutput = output.data[perceptron.id] || 0;\n      const currentError = expectedOutput - actualOutput;\n      if (currentError) {\n        error += currentError ** 2;\n        const delta =\n          (actualOutput > 0 ? 1 : alpha) *\n          currentError *\n          this.decayLearningRate;\n        for (let j = 0; j < input.keys.length; j += 1) {\n          const key = input.keys[j];\n          const change = delta * input.data[key] + momentum * changes[key];\n          changes[key] = change;\n          weights[key] += change;\n        }\n        perceptron.bias += delta;\n      }\n    }\n    return error;\n  }\n\n  train(corpus) {\n    if (!corpus || !corpus.length) {\n      return {};\n    }\n    const useNoneFeature =\n      corpus[corpus.length - 1].input.nonefeature !== undefined;\n    if (useNoneFeature) {\n      const intents = {};\n      for (let i = 0; i < corpus.length - 1; i += 1) {\n        const tokens = Object.keys(corpus[i].output);\n        for (let j = 0; j < tokens.length; j += 1) {\n          if (!intents[tokens[j]]) {\n            intents[tokens[j]] = 1;\n          }\n        }\n      }\n      const current = corpus[corpus.length - 1];\n      const keys = Object.keys(intents);\n      for (let i = 0; i < keys.length; i += 1) {\n        current.output[keys[i]] = 0.0000001;\n      }\n    }\n    const data = this.prepareCorpus(corpus);\n    if (!this.status) {\n      this.status = { error: Infinity, deltaError: Infinity, iterations: 0 };\n    }\n    this.verifyIsInitialized();\n    const minError = this.settings.errorThresh;\n    const minDelta = this.settings.deltaErrorThresh;\n    while (\n      this.status.iterations < this.settings.iterations &&\n      this.status.error > minError &&\n      this.status.deltaError > minDelta\n    ) {\n      const hrstart = new Date();\n      this.status.iterations += 1;\n      this.decayLearningRate =\n        this.settings.learningRate / (1 + 0.001 * this.status.iterations);\n      const lastError = this.status.error;\n      this.status.error = 0;\n      for (let i = 0; i < this.numPerceptrons; i += 1) {\n        this.status.error += this.trainPerceptron(this.perceptrons[i], data);\n      }\n      this.status.error /= this.numPerceptrons * data.length;\n      this.status.deltaError = Math.abs(this.status.error - lastError);\n      const hrend = new Date();\n      if (this.logFn) {\n        this.logFn(this.status, hrend.getTime() - hrstart.getTime());\n      }\n    }\n    return this.status;\n  }\n\n  explain(input, intent) {\n    const transformedInput = this.lookup.transformInput(input);\n    const result = {};\n    const intentIndex = this.lookup.outputLookup.dict[intent];\n    if (intentIndex === undefined) {\n      return {};\n    }\n    for (let i = 0; i < transformedInput.keys.length; i += 1) {\n      const key = transformedInput.keys[i];\n      result[this.lookup.inputLookup.items[key]] =\n        this.perceptrons[intentIndex].weights[key];\n    }\n    return {\n      weights: result,\n      bias: this.perceptrons[intentIndex].bias,\n    };\n  }\n\n  toJSON() {\n    const settings = {};\n    const keys = Object.keys(this.settings);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      if (this.settings[key] !== defaultSettings[key]) {\n        settings[key] = this.settings[key];\n      }\n    }\n    if (!this.lookup) {\n      return {\n        settings,\n      };\n    }\n    const features = this.lookup.inputLookup.items;\n    const intents = this.lookup.outputLookup.items;\n    const perceptrons = [];\n    for (let i = 0; i < this.perceptrons.length; i += 1) {\n      const perceptron = this.perceptrons[i];\n      const weights = [...perceptron.weights, perceptron.bias];\n      perceptrons.push(weights);\n    }\n    return {\n      settings,\n      features,\n      intents,\n      perceptrons,\n    };\n  }\n\n  fromJSON(json) {\n    this.settings = this.applySettings({\n      ...defaultSettings,\n      ...json.settings,\n    });\n    if (json.features) {\n      this.lookup = new CorpusLookup(json.features, json.intents);\n      this.initialize(json.features.length, json.intents);\n      for (let i = 0; i < this.perceptrons.length; i += 1) {\n        const perceptron = this.perceptrons[i];\n        const data = json.perceptrons[i];\n        perceptron.bias = data[data.length - 1];\n        for (let j = 0; j < json.features.length; j += 1) {\n          perceptron.weights[j] = data[j];\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = NeuralNetwork;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}