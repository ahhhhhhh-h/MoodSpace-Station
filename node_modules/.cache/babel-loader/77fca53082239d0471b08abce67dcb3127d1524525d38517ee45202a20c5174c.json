{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  Clonable\n} = require('@nlpjs/core');\nclass SentimentAnalyzer extends Clonable {\n  constructor(settings = {}, container) {\n    super({\n      settings: {},\n      container: settings.container || container\n    }, container);\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'sentiment-analyzer';\n    }\n    this.registerDefault();\n    this.applySettings(this.settings, this.container.getConfiguration(this.settings.tag));\n    this.applySettings(this, {\n      pipelinePrepare: this.getPipeline(`${this.settings.tag}-prepare`),\n      pipelineProcess: this.getPipeline(`${this.settings.tag}-process`)\n    });\n  }\n  registerDefault() {\n    this.container.registerConfiguration('sentiment-analyzer', {}, false);\n  }\n  prepare(locale, text, settings, stemmed) {\n    const pipeline = this.getPipeline(`${this.settings.tag}-prepare`);\n    if (pipeline) {\n      const input = {\n        text,\n        locale,\n        settings: settings || this.settings\n      };\n      return this.runPipeline(input, pipeline);\n    }\n    if (stemmed) {\n      const stemmer = this.container.get(`stemmer-${locale}`) || this.container.get(`stemmer-en`);\n      if (stemmer) {\n        return stemmer.tokenizeAndStem(text);\n      }\n    }\n    const tokenizer = this.container.get(`tokenizer-${locale}`) || this.container.get(`tokenizer-en`);\n    if (tokenizer) {\n      return tokenizer.tokenize(text, true);\n    }\n    const normalized = text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\n    return normalized.split(/[\\s,.!?;:([\\]'\"¡¿)/]+/).filter(x => x);\n  }\n  async getDictionary(srcInput) {\n    const input = srcInput;\n    const dictionaries = this.container.get(`sentiment-${input.locale}`);\n    let type;\n    if (dictionaries) {\n      if (dictionaries.senticon) {\n        type = 'senticon';\n      } else if (dictionaries.pattern) {\n        type = 'pattern';\n      } else if (dictionaries.afinn) {\n        type = 'afinn';\n      }\n    }\n    if (!type) {\n      input.sentimentDictionary = {\n        type,\n        dictionary: undefined,\n        negations: [],\n        stemmed: false\n      };\n      return input;\n    }\n    input.sentimentDictionary = {\n      type,\n      dictionary: dictionaries[type],\n      negations: dictionaries.negations.words,\n      stemmed: dictionaries.stemmed === undefined ? false : dictionaries.stemmed\n    };\n    return input;\n  }\n  async getTokens(srcInput) {\n    const input = srcInput;\n    if (!input.tokens && input.sentimentDictionary.type) {\n      input.tokens = await this.prepare(input.locale, input.utterance || input.text, input.settings, input.sentimentDictionary.stemmed);\n    }\n    return input;\n  }\n  calculate(srcInput) {\n    const input = srcInput;\n    if (input.sentimentDictionary.type) {\n      const tokens = Array.isArray(input.tokens) ? input.tokens : Object.keys(input.tokens);\n      if (!input.sentimentDictionary.dictionary) {\n        input.sentiment = {\n          score: 0,\n          numWords: tokens.length,\n          numHits: 0,\n          average: 0,\n          type: input.sentimentDictionary.type,\n          locale: input.locale\n        };\n      } else {\n        const {\n          dictionary\n        } = input.sentimentDictionary;\n        const {\n          negations\n        } = input.sentimentDictionary;\n        let score = 0;\n        let negator = 1;\n        let numHits = 0;\n        for (let i = 0; i < tokens.length; i += 1) {\n          const token = tokens[i].toLowerCase();\n          if (negations.indexOf(token) !== -1) {\n            negator = -1;\n            numHits += 1;\n          } else if (dictionary[token] !== undefined) {\n            score += negator * dictionary[token];\n            numHits += 1;\n          }\n        }\n        input.sentiment = {\n          score,\n          numWords: tokens.length,\n          numHits,\n          average: score / tokens.length,\n          type: input.sentimentDictionary.type,\n          locale: input.locale\n        };\n      }\n    } else {\n      input.sentiment = {\n        score: 0,\n        numWords: 0,\n        numHits: 0,\n        average: 0,\n        type: input.sentimentDictionary.type,\n        locale: input.locale\n      };\n    }\n    if (input.sentiment.score > 0) {\n      input.sentiment.vote = 'positive';\n    } else if (input.sentiment.score < 0) {\n      input.sentiment.vote = 'negative';\n    } else {\n      input.sentiment.vote = 'neutral';\n    }\n    return input;\n  }\n  async defaultPipelineProcess(input) {\n    let output = await this.getDictionary(input);\n    output = await this.getTokens(output);\n    output = await this.calculate(output);\n    delete output.sentimentDictionary;\n    return output;\n  }\n  process(srcInput, settings) {\n    const input = srcInput;\n    input.settings = input.settings || settings || this.settings;\n    if (this.pipelineProcess) {\n      return this.runPipeline(input, this.pipelineProcess);\n    }\n    return this.defaultPipelineProcess(input);\n  }\n}\nmodule.exports = SentimentAnalyzer;","map":{"version":3,"names":["Clonable","require","SentimentAnalyzer","constructor","settings","container","applySettings","tag","registerDefault","getConfiguration","pipelinePrepare","getPipeline","pipelineProcess","registerConfiguration","prepare","locale","text","stemmed","pipeline","input","runPipeline","stemmer","get","tokenizeAndStem","tokenizer","tokenize","normalized","normalize","replace","toLowerCase","split","filter","x","getDictionary","srcInput","dictionaries","type","senticon","pattern","afinn","sentimentDictionary","dictionary","undefined","negations","words","getTokens","tokens","utterance","calculate","Array","isArray","Object","keys","sentiment","score","numWords","length","numHits","average","negator","i","token","indexOf","vote","defaultPipelineProcess","output","process","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/sentiment/src/sentiment-analyzer.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { Clonable } = require('@nlpjs/core');\n\nclass SentimentAnalyzer extends Clonable {\n  constructor(settings = {}, container) {\n    super(\n      {\n        settings: {},\n        container: settings.container || container,\n      },\n      container\n    );\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'sentiment-analyzer';\n    }\n    this.registerDefault();\n    this.applySettings(\n      this.settings,\n      this.container.getConfiguration(this.settings.tag)\n    );\n    this.applySettings(this, {\n      pipelinePrepare: this.getPipeline(`${this.settings.tag}-prepare`),\n      pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),\n    });\n  }\n\n  registerDefault() {\n    this.container.registerConfiguration('sentiment-analyzer', {}, false);\n  }\n\n  prepare(locale, text, settings, stemmed) {\n    const pipeline = this.getPipeline(`${this.settings.tag}-prepare`);\n    if (pipeline) {\n      const input = {\n        text,\n        locale,\n        settings: settings || this.settings,\n      };\n      return this.runPipeline(input, pipeline);\n    }\n    if (stemmed) {\n      const stemmer =\n        this.container.get(`stemmer-${locale}`) ||\n        this.container.get(`stemmer-en`);\n      if (stemmer) {\n        return stemmer.tokenizeAndStem(text);\n      }\n    }\n    const tokenizer =\n      this.container.get(`tokenizer-${locale}`) ||\n      this.container.get(`tokenizer-en`);\n    if (tokenizer) {\n      return tokenizer.tokenize(text, true);\n    }\n    const normalized = text\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '')\n      .toLowerCase();\n    return normalized.split(/[\\s,.!?;:([\\]'\"¡¿)/]+/).filter((x) => x);\n  }\n\n  async getDictionary(srcInput) {\n    const input = srcInput;\n    const dictionaries = this.container.get(`sentiment-${input.locale}`);\n    let type;\n    if (dictionaries) {\n      if (dictionaries.senticon) {\n        type = 'senticon';\n      } else if (dictionaries.pattern) {\n        type = 'pattern';\n      } else if (dictionaries.afinn) {\n        type = 'afinn';\n      }\n    }\n    if (!type) {\n      input.sentimentDictionary = {\n        type,\n        dictionary: undefined,\n        negations: [],\n        stemmed: false,\n      };\n      return input;\n    }\n    input.sentimentDictionary = {\n      type,\n      dictionary: dictionaries[type],\n      negations: dictionaries.negations.words,\n      stemmed:\n        dictionaries.stemmed === undefined ? false : dictionaries.stemmed,\n    };\n    return input;\n  }\n\n  async getTokens(srcInput) {\n    const input = srcInput;\n    if (!input.tokens && input.sentimentDictionary.type) {\n      input.tokens = await this.prepare(\n        input.locale,\n        input.utterance || input.text,\n        input.settings,\n        input.sentimentDictionary.stemmed\n      );\n    }\n    return input;\n  }\n\n  calculate(srcInput) {\n    const input = srcInput;\n    if (input.sentimentDictionary.type) {\n      const tokens = Array.isArray(input.tokens)\n        ? input.tokens\n        : Object.keys(input.tokens);\n      if (!input.sentimentDictionary.dictionary) {\n        input.sentiment = {\n          score: 0,\n          numWords: tokens.length,\n          numHits: 0,\n          average: 0,\n          type: input.sentimentDictionary.type,\n          locale: input.locale,\n        };\n      } else {\n        const { dictionary } = input.sentimentDictionary;\n        const { negations } = input.sentimentDictionary;\n        let score = 0;\n        let negator = 1;\n        let numHits = 0;\n        for (let i = 0; i < tokens.length; i += 1) {\n          const token = tokens[i].toLowerCase();\n          if (negations.indexOf(token) !== -1) {\n            negator = -1;\n            numHits += 1;\n          } else if (dictionary[token] !== undefined) {\n            score += negator * dictionary[token];\n            numHits += 1;\n          }\n        }\n        input.sentiment = {\n          score,\n          numWords: tokens.length,\n          numHits,\n          average: score / tokens.length,\n          type: input.sentimentDictionary.type,\n          locale: input.locale,\n        };\n      }\n    } else {\n      input.sentiment = {\n        score: 0,\n        numWords: 0,\n        numHits: 0,\n        average: 0,\n        type: input.sentimentDictionary.type,\n        locale: input.locale,\n      };\n    }\n    if (input.sentiment.score > 0) {\n      input.sentiment.vote = 'positive';\n    } else if (input.sentiment.score < 0) {\n      input.sentiment.vote = 'negative';\n    } else {\n      input.sentiment.vote = 'neutral';\n    }\n    return input;\n  }\n\n  async defaultPipelineProcess(input) {\n    let output = await this.getDictionary(input);\n    output = await this.getTokens(output);\n    output = await this.calculate(output);\n    delete output.sentimentDictionary;\n    return output;\n  }\n\n  process(srcInput, settings) {\n    const input = srcInput;\n    input.settings = input.settings || settings || this.settings;\n    if (this.pipelineProcess) {\n      return this.runPipeline(input, this.pipelineProcess);\n    }\n    return this.defaultPipelineProcess(input);\n  }\n}\n\nmodule.exports = SentimentAnalyzer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}