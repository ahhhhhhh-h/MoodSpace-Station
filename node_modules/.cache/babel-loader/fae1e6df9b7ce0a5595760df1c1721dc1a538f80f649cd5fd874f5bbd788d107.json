{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst {\n  ArrToObj,\n  Container,\n  Normalizer,\n  ObjToArr,\n  Stemmer,\n  Stopwords,\n  Tokenizer,\n  Timer,\n  logger,\n  MemoryStorage\n} = require('@nlpjs/core');\nconst {\n  fs: requestfs,\n  request\n} = require('@nlpjs/request');\nconst pluginInformation = require('./plugin-information.json');\nconst {\n  listFilesAbsolute,\n  getAbsolutePath,\n  loadEnv,\n  loadEnvFromJson\n} = require('./helper');\nconst defaultPathConfiguration = './conf.json';\nconst defaultPathPipeline = './pipelines.md';\nconst defaultPathPlugins = './plugins';\nfunction loadPipelinesStr(instance, pipelines) {\n  instance.loadPipelinesFromString(pipelines);\n}\nfunction loadPipelinesFromFile(instance, fileName) {\n  const str = fs.readFileSync(fileName, 'utf8');\n  instance.loadPipelinesFromString(str);\n}\nfunction loadPipelines(instance, fileName) {\n  if (Array.isArray(fileName)) {\n    for (let i = 0; i < fileName.length; i += 1) {\n      loadPipelines(instance, fileName[i]);\n    }\n  } else if (fs.existsSync(fileName)) {\n    if (fs.lstatSync(fileName).isDirectory()) {\n      const files = listFilesAbsolute(fileName).filter(x => x.endsWith('.md'));\n      for (let i = 0; i < files.length; i += 1) {\n        loadPipelines(instance, files[i]);\n      }\n    } else {\n      loadPipelinesFromFile(instance, fileName);\n    }\n  }\n}\nfunction loadPlugins(instance, fileName) {\n  if (Array.isArray(fileName)) {\n    for (let i = 0; i < fileName.length; i += 1) {\n      loadPlugins(instance, fileName[i]);\n    }\n  } else if (fs.existsSync(fileName)) {\n    if (fs.lstatSync(fileName).isDirectory()) {\n      const files = listFilesAbsolute(fileName).filter(x => x.endsWith('.js'));\n      for (let i = 0; i < files.length; i += 1) {\n        loadPlugins(instance, files[i]);\n      }\n    } else {\n      /* eslint-disable-next-line */\n      const plugin = require(fileName);\n      instance.use(plugin);\n    }\n  }\n}\nfunction traverse(obj, preffix) {\n  if (typeof obj === 'string') {\n    if (obj.startsWith('$')) {\n      return process.env[`${preffix}${obj.slice(1)}`] || process.env[obj.slice(1)];\n    }\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(x => traverse(x, preffix));\n  }\n  if (typeof obj === 'object') {\n    const keys = Object.keys(obj);\n    const result = {};\n    for (let i = 0; i < keys.length; i += 1) {\n      result[keys[i]] = traverse(obj[keys[i]], preffix);\n    }\n    return result;\n  }\n  return obj;\n}\nfunction containerBootstrap(inputSettings, srcMustLoadEnv, container, preffix, pipelines, parent) {\n  const mustLoadEnv = srcMustLoadEnv === undefined ? true : srcMustLoadEnv;\n  const instance = container || new Container(preffix);\n  instance.parent = parent;\n  if (!preffix) {\n    instance.register('fs', requestfs);\n    instance.register('request', {\n      get: request\n    });\n    instance.use(ArrToObj);\n    instance.use(Normalizer);\n    instance.use(ObjToArr);\n    instance.use(Stemmer);\n    instance.use(Stopwords);\n    instance.use(Tokenizer);\n    instance.use(Timer);\n    instance.use(logger);\n    instance.use(MemoryStorage);\n  }\n  const srcSettings = inputSettings || {};\n  let settings = srcSettings;\n  if (typeof settings === 'string') {\n    settings = {\n      pathConfiguration: srcSettings,\n      pathPipeline: defaultPathPipeline,\n      pathPlugins: defaultPathPlugins\n    };\n  } else {\n    if (!settings.pathConfiguration) {\n      settings.pathConfiguration = defaultPathConfiguration;\n    }\n    if (!settings.pathPipeline) {\n      settings.pathPipeline = defaultPathPipeline;\n    }\n    if (!settings.pathPlugins) {\n      settings.pathPlugins = defaultPathPlugins;\n    }\n  }\n  if (srcSettings.loadEnv || srcSettings.loadEnv === undefined && mustLoadEnv) {\n    loadEnv();\n  }\n  settings.pathConfiguration = getAbsolutePath(settings.pathConfiguration);\n  if (srcSettings.envFileName) {\n    loadEnv(srcSettings.envFileName);\n  }\n  if (srcSettings.env) {\n    loadEnvFromJson(preffix, srcSettings.env);\n  }\n  let configuration;\n  if (settings.isChild || !fs.existsSync(settings.pathConfiguration)) {\n    configuration = settings;\n  } else {\n    configuration = JSON.parse(fs.readFileSync(settings.pathConfiguration, 'utf8'));\n  }\n  configuration = traverse(configuration, preffix ? `${preffix}_` : '');\n  if (configuration.pathPipeline) {\n    settings.pathPipeline = configuration.pathPipeline;\n  }\n  if (configuration.pathPlugins) {\n    settings.pathPlugins = configuration.pathPlugins;\n  }\n  if (configuration.settings) {\n    const keys = Object.keys(configuration.settings);\n    for (let i = 0; i < keys.length; i += 1) {\n      instance.registerConfiguration(keys[i], configuration.settings[keys[i]], true);\n    }\n  }\n  if (configuration.use) {\n    for (let i = 0; i < configuration.use.length; i += 1) {\n      const current = configuration.use[i];\n      if (typeof current === 'string') {\n        let infoArr = pluginInformation[current];\n        if (!infoArr) {\n          throw new Error(`Plugin information not found for plugin \"${current}\"`);\n        }\n        if (!Array.isArray(infoArr)) {\n          infoArr = [infoArr];\n        }\n        for (let j = 0; j < infoArr.length; j += 1) {\n          const info = infoArr[j];\n          let lib;\n          try {\n            /* eslint-disable-next-line */\n            lib = require(info.path);\n          } catch (err) {\n            try {\n              // eslint-disable-next-line import/no-dynamic-require, global-require\n              lib = require(getAbsolutePath(path.join('./node_modules', info.path)));\n            } catch (err2) {\n              throw new Error(`You have to install library \"${info.path}\" to use plugin \"${current}\"`);\n            }\n          }\n          instance.use(lib[info.className], info.name, info.isSingleton);\n        }\n      } else {\n        let lib;\n        try {\n          /* eslint-disable-next-line */\n          lib = require(current.path);\n        } catch (err) {\n          /* eslint-disable-next-line */\n          lib = require(getAbsolutePath(current.path));\n        }\n        instance.use(lib[current.className], current.name, current.isSingleton);\n      }\n    }\n  }\n  if (configuration.terraform) {\n    for (let i = 0; i < configuration.terraform.length; i += 1) {\n      const current = configuration.terraform[i];\n      const terra = instance.get(current.className);\n      instance.register(current.name, terra, true);\n    }\n  }\n  if (configuration.childs) {\n    instance.childs = configuration.childs;\n  }\n  if (pipelines) {\n    for (let i = 0; i < pipelines.length; i += 1) {\n      const pipeline = pipelines[i];\n      instance.registerPipeline(pipeline.tag, pipeline.pipeline, pipeline.overwrite);\n    }\n  }\n  loadPipelines(instance, settings.pathPipeline || './pipelines.md');\n  if (configuration.pipelines) {\n    loadPipelinesStr(instance, configuration.pipelines);\n  }\n  loadPlugins(instance, settings.pathPlugins || './plugins');\n  return instance;\n}\nmodule.exports = containerBootstrap;","map":{"version":3,"names":["fs","require","path","ArrToObj","Container","Normalizer","ObjToArr","Stemmer","Stopwords","Tokenizer","Timer","logger","MemoryStorage","requestfs","request","pluginInformation","listFilesAbsolute","getAbsolutePath","loadEnv","loadEnvFromJson","defaultPathConfiguration","defaultPathPipeline","defaultPathPlugins","loadPipelinesStr","instance","pipelines","loadPipelinesFromString","loadPipelinesFromFile","fileName","str","readFileSync","loadPipelines","Array","isArray","i","length","existsSync","lstatSync","isDirectory","files","filter","x","endsWith","loadPlugins","plugin","use","traverse","obj","preffix","startsWith","process","env","slice","map","keys","Object","result","containerBootstrap","inputSettings","srcMustLoadEnv","container","parent","mustLoadEnv","undefined","register","get","srcSettings","settings","pathConfiguration","pathPipeline","pathPlugins","envFileName","configuration","isChild","JSON","parse","registerConfiguration","current","infoArr","Error","j","info","lib","err","join","err2","className","name","isSingleton","terraform","terra","childs","pipeline","registerPipeline","tag","overwrite","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/core-loader/src/container-bootstrap.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst {\n  ArrToObj,\n  Container,\n  Normalizer,\n  ObjToArr,\n  Stemmer,\n  Stopwords,\n  Tokenizer,\n  Timer,\n  logger,\n  MemoryStorage,\n} = require('@nlpjs/core');\nconst { fs: requestfs, request } = require('@nlpjs/request');\nconst pluginInformation = require('./plugin-information.json');\nconst {\n  listFilesAbsolute,\n  getAbsolutePath,\n  loadEnv,\n  loadEnvFromJson,\n} = require('./helper');\n\nconst defaultPathConfiguration = './conf.json';\nconst defaultPathPipeline = './pipelines.md';\nconst defaultPathPlugins = './plugins';\n\nfunction loadPipelinesStr(instance, pipelines) {\n  instance.loadPipelinesFromString(pipelines);\n}\n\nfunction loadPipelinesFromFile(instance, fileName) {\n  const str = fs.readFileSync(fileName, 'utf8');\n  instance.loadPipelinesFromString(str);\n}\n\nfunction loadPipelines(instance, fileName) {\n  if (Array.isArray(fileName)) {\n    for (let i = 0; i < fileName.length; i += 1) {\n      loadPipelines(instance, fileName[i]);\n    }\n  } else if (fs.existsSync(fileName)) {\n    if (fs.lstatSync(fileName).isDirectory()) {\n      const files = listFilesAbsolute(fileName).filter((x) =>\n        x.endsWith('.md')\n      );\n      for (let i = 0; i < files.length; i += 1) {\n        loadPipelines(instance, files[i]);\n      }\n    } else {\n      loadPipelinesFromFile(instance, fileName);\n    }\n  }\n}\n\nfunction loadPlugins(instance, fileName) {\n  if (Array.isArray(fileName)) {\n    for (let i = 0; i < fileName.length; i += 1) {\n      loadPlugins(instance, fileName[i]);\n    }\n  } else if (fs.existsSync(fileName)) {\n    if (fs.lstatSync(fileName).isDirectory()) {\n      const files = listFilesAbsolute(fileName).filter((x) =>\n        x.endsWith('.js')\n      );\n      for (let i = 0; i < files.length; i += 1) {\n        loadPlugins(instance, files[i]);\n      }\n    } else {\n      /* eslint-disable-next-line */\n      const plugin = require(fileName);\n      instance.use(plugin);\n    }\n  }\n}\n\nfunction traverse(obj, preffix) {\n  if (typeof obj === 'string') {\n    if (obj.startsWith('$')) {\n      return (\n        process.env[`${preffix}${obj.slice(1)}`] || process.env[obj.slice(1)]\n      );\n    }\n    return obj;\n  }\n  if (Array.isArray(obj)) {\n    return obj.map((x) => traverse(x, preffix));\n  }\n  if (typeof obj === 'object') {\n    const keys = Object.keys(obj);\n    const result = {};\n    for (let i = 0; i < keys.length; i += 1) {\n      result[keys[i]] = traverse(obj[keys[i]], preffix);\n    }\n    return result;\n  }\n  return obj;\n}\n\nfunction containerBootstrap(\n  inputSettings,\n  srcMustLoadEnv,\n  container,\n  preffix,\n  pipelines,\n  parent\n) {\n  const mustLoadEnv = srcMustLoadEnv === undefined ? true : srcMustLoadEnv;\n  const instance = container || new Container(preffix);\n  instance.parent = parent;\n  if (!preffix) {\n    instance.register('fs', requestfs);\n    instance.register('request', { get: request });\n    instance.use(ArrToObj);\n    instance.use(Normalizer);\n    instance.use(ObjToArr);\n    instance.use(Stemmer);\n    instance.use(Stopwords);\n    instance.use(Tokenizer);\n    instance.use(Timer);\n    instance.use(logger);\n    instance.use(MemoryStorage);\n  }\n  const srcSettings = inputSettings || {};\n  let settings = srcSettings;\n  if (typeof settings === 'string') {\n    settings = {\n      pathConfiguration: srcSettings,\n      pathPipeline: defaultPathPipeline,\n      pathPlugins: defaultPathPlugins,\n    };\n  } else {\n    if (!settings.pathConfiguration) {\n      settings.pathConfiguration = defaultPathConfiguration;\n    }\n    if (!settings.pathPipeline) {\n      settings.pathPipeline = defaultPathPipeline;\n    }\n    if (!settings.pathPlugins) {\n      settings.pathPlugins = defaultPathPlugins;\n    }\n  }\n  if (\n    srcSettings.loadEnv ||\n    (srcSettings.loadEnv === undefined && mustLoadEnv)\n  ) {\n    loadEnv();\n  }\n  settings.pathConfiguration = getAbsolutePath(settings.pathConfiguration);\n  if (srcSettings.envFileName) {\n    loadEnv(srcSettings.envFileName);\n  }\n  if (srcSettings.env) {\n    loadEnvFromJson(preffix, srcSettings.env);\n  }\n  let configuration;\n  if (settings.isChild || !fs.existsSync(settings.pathConfiguration)) {\n    configuration = settings;\n  } else {\n    configuration = JSON.parse(\n      fs.readFileSync(settings.pathConfiguration, 'utf8')\n    );\n  }\n  configuration = traverse(configuration, preffix ? `${preffix}_` : '');\n  if (configuration.pathPipeline) {\n    settings.pathPipeline = configuration.pathPipeline;\n  }\n  if (configuration.pathPlugins) {\n    settings.pathPlugins = configuration.pathPlugins;\n  }\n  if (configuration.settings) {\n    const keys = Object.keys(configuration.settings);\n    for (let i = 0; i < keys.length; i += 1) {\n      instance.registerConfiguration(\n        keys[i],\n        configuration.settings[keys[i]],\n        true\n      );\n    }\n  }\n  if (configuration.use) {\n    for (let i = 0; i < configuration.use.length; i += 1) {\n      const current = configuration.use[i];\n      if (typeof current === 'string') {\n        let infoArr = pluginInformation[current];\n        if (!infoArr) {\n          throw new Error(\n            `Plugin information not found for plugin \"${current}\"`\n          );\n        }\n        if (!Array.isArray(infoArr)) {\n          infoArr = [infoArr];\n        }\n        for (let j = 0; j < infoArr.length; j += 1) {\n          const info = infoArr[j];\n          let lib;\n          try {\n            /* eslint-disable-next-line */\n            lib = require(info.path);\n          } catch (err) {\n            try {\n              // eslint-disable-next-line import/no-dynamic-require, global-require\n              lib = require(\n                getAbsolutePath(path.join('./node_modules', info.path))\n              );\n            } catch (err2) {\n              throw new Error(\n                `You have to install library \"${info.path}\" to use plugin \"${current}\"`\n              );\n            }\n          }\n          instance.use(lib[info.className], info.name, info.isSingleton);\n        }\n      } else {\n        let lib;\n        try {\n          /* eslint-disable-next-line */\n          lib = require(current.path);\n        } catch (err) {\n          /* eslint-disable-next-line */\n          lib = require(getAbsolutePath(current.path));\n        }\n        instance.use(lib[current.className], current.name, current.isSingleton);\n      }\n    }\n  }\n  if (configuration.terraform) {\n    for (let i = 0; i < configuration.terraform.length; i += 1) {\n      const current = configuration.terraform[i];\n      const terra = instance.get(current.className);\n      instance.register(current.name, terra, true);\n    }\n  }\n  if (configuration.childs) {\n    instance.childs = configuration.childs;\n  }\n  if (pipelines) {\n    for (let i = 0; i < pipelines.length; i += 1) {\n      const pipeline = pipelines[i];\n      instance.registerPipeline(\n        pipeline.tag,\n        pipeline.pipeline,\n        pipeline.overwrite\n      );\n    }\n  }\n  loadPipelines(instance, settings.pathPipeline || './pipelines.md');\n  if (configuration.pipelines) {\n    loadPipelinesStr(instance, configuration.pipelines);\n  }\n  loadPlugins(instance, settings.pathPlugins || './plugins');\n  return instance;\n}\n\nmodule.exports = containerBootstrap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}