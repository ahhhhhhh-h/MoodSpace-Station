{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nconst {\n  Tokenizer\n} = require('@nlpjs/core');\nconst aspects = require('./thai-aspects.json');\nclass TokenizerTh extends Tokenizer {\n  constructor(container, shouldTokenize) {\n    super(container, shouldTokenize);\n    this.name = 'tokenizer-th';\n  }\n  addToTree(aspect) {\n    let node = this.dict;\n    for (let i = 0; i < aspect.length; i += 1) {\n      const current = aspect[i];\n      if (!node[current]) {\n        node[current] = {};\n      }\n      node = node[current];\n    }\n    node.isLeaf = true;\n  }\n  buildDictionary() {\n    this.dict = {};\n    for (let i = 0; i < aspects.length; i += 1) {\n      this.addToTree(aspects[i]);\n    }\n  }\n  findCollisions(token, tokens) {\n    const result = [];\n    for (let i = 0; i < tokens.length; i += 1) {\n      const current = tokens[i];\n      if (!current.isDiscarded && current.start !== token.start || current.length !== token.length) {\n        if (current.start <= token.end && current.end >= token.start) {\n          result.push(current);\n        }\n      }\n    }\n    return result;\n  }\n  perfectCompose(token, collisions) {\n    for (let i = 0; i < collisions.length; i += 1) {\n      const a = collisions[i];\n      if (a.start <= token.start) {\n        for (let j = 1; j < collisions.length; j += 1) {\n          const b = collisions[j];\n          if (b.start === a.end + 1 && b.end === token.end) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  isLate(token, collisions, open = false) {\n    for (let i = 0; i < collisions.length; i += 1) {\n      if (!open && token.start > collisions[i].start && token.end < collisions[i].end) {\n        return true;\n      }\n      if (open && token.start >= collisions[i].start && token.end <= collisions[i].end) {\n        return true;\n      }\n    }\n    return false;\n  }\n  fullSure(tokens) {\n    for (let i = 0; i < tokens.length; i += 1) {\n      if (!tokens[i].isSure) {\n        return false;\n      }\n    }\n    return true;\n  }\n  reduceEdges(srcTokens) {\n    let tokens = srcTokens;\n    let lastLength = 0;\n    while (lastLength !== tokens.length && !this.fullSure(tokens)) {\n      lastLength = tokens.length;\n      for (let open = 0; open <= 1; open += 1) {\n        for (let i = 0; i < tokens.length; i += 1) {\n          const current = tokens[i];\n          const collisions = this.findCollisions(current, tokens);\n          if (collisions.length === 0) {\n            current.isSure = true;\n            current.isDiscarded = false;\n          } else if (this.perfectCompose(current, collisions)) {\n            current.isDiscarded = true;\n          } else if (this.isLate(current, collisions, open === 1)) {\n            current.isDiscarded = true;\n          }\n        }\n        tokens = tokens.filter(x => !x.isDiscarded);\n      }\n    }\n    return tokens;\n  }\n  innerTokenize(str) {\n    if (!this.dict) {\n      this.buildDictionary();\n    }\n    const potentialTokens = [];\n    let currentChains = [];\n    for (let i = 0; i < str.length; i += 1) {\n      const chr = str[i];\n      if (this.dict[chr]) {\n        currentChains.push({\n          node: this.dict,\n          value: ''\n        });\n      }\n      for (let j = 0; j < currentChains.length; j += 1) {\n        const chain = currentChains[j];\n        const nextNode = chain.node[chr];\n        if (nextNode) {\n          currentChains[j] = {\n            node: nextNode,\n            value: chain.value + chr\n          };\n        } else {\n          currentChains[j] = undefined;\n        }\n        if (nextNode && nextNode.isLeaf) {\n          potentialTokens.push({\n            start: i - currentChains[j].value.length + 1,\n            length: currentChains[j].value.length,\n            end: i,\n            value: currentChains[j].value\n          });\n        }\n      }\n      currentChains = currentChains.filter(x => x);\n    }\n    const edges = this.reduceEdges(potentialTokens);\n    let index = 0;\n    const result = [];\n    for (let i = 0; i < edges.length; i += 1) {\n      const current = edges[i];\n      if (current.start > index) {\n        result.push(...str.slice(index, current.start).split(/[\\s,.!?;:([\\]'\"¡¿)/]+/));\n      }\n      result.push(current.value);\n      index = current.end + 1;\n    }\n    if (index < str.length) {\n      result.push(...str.slice(index).split(/[\\s,.!?;:([\\]'\"¡¿)/]+/));\n    }\n    return result;\n  }\n}\nmodule.exports = TokenizerTh;","map":{"version":3,"names":["Tokenizer","require","aspects","TokenizerTh","constructor","container","shouldTokenize","name","addToTree","aspect","node","dict","i","length","current","isLeaf","buildDictionary","findCollisions","token","tokens","result","isDiscarded","start","end","push","perfectCompose","collisions","a","j","b","isLate","open","fullSure","isSure","reduceEdges","srcTokens","lastLength","filter","x","innerTokenize","str","potentialTokens","currentChains","chr","value","chain","nextNode","undefined","edges","index","slice","split","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/lang-th/src/tokenizer-th.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nconst { Tokenizer } = require('@nlpjs/core');\nconst aspects = require('./thai-aspects.json');\n\nclass TokenizerTh extends Tokenizer {\n  constructor(container, shouldTokenize) {\n    super(container, shouldTokenize);\n    this.name = 'tokenizer-th';\n  }\n\n  addToTree(aspect) {\n    let node = this.dict;\n    for (let i = 0; i < aspect.length; i += 1) {\n      const current = aspect[i];\n      if (!node[current]) {\n        node[current] = {};\n      }\n      node = node[current];\n    }\n    node.isLeaf = true;\n  }\n\n  buildDictionary() {\n    this.dict = {};\n    for (let i = 0; i < aspects.length; i += 1) {\n      this.addToTree(aspects[i]);\n    }\n  }\n\n  findCollisions(token, tokens) {\n    const result = [];\n    for (let i = 0; i < tokens.length; i += 1) {\n      const current = tokens[i];\n      if (\n        (!current.isDiscarded && current.start !== token.start) ||\n        current.length !== token.length\n      ) {\n        if (current.start <= token.end && current.end >= token.start) {\n          result.push(current);\n        }\n      }\n    }\n    return result;\n  }\n\n  perfectCompose(token, collisions) {\n    for (let i = 0; i < collisions.length; i += 1) {\n      const a = collisions[i];\n      if (a.start <= token.start) {\n        for (let j = 1; j < collisions.length; j += 1) {\n          const b = collisions[j];\n          if (b.start === a.end + 1 && b.end === token.end) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  isLate(token, collisions, open = false) {\n    for (let i = 0; i < collisions.length; i += 1) {\n      if (\n        !open &&\n        token.start > collisions[i].start &&\n        token.end < collisions[i].end\n      ) {\n        return true;\n      }\n      if (\n        open &&\n        token.start >= collisions[i].start &&\n        token.end <= collisions[i].end\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  fullSure(tokens) {\n    for (let i = 0; i < tokens.length; i += 1) {\n      if (!tokens[i].isSure) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  reduceEdges(srcTokens) {\n    let tokens = srcTokens;\n    let lastLength = 0;\n    while (lastLength !== tokens.length && !this.fullSure(tokens)) {\n      lastLength = tokens.length;\n      for (let open = 0; open <= 1; open += 1) {\n        for (let i = 0; i < tokens.length; i += 1) {\n          const current = tokens[i];\n          const collisions = this.findCollisions(current, tokens);\n          if (collisions.length === 0) {\n            current.isSure = true;\n            current.isDiscarded = false;\n          } else if (this.perfectCompose(current, collisions)) {\n            current.isDiscarded = true;\n          } else if (this.isLate(current, collisions, open === 1)) {\n            current.isDiscarded = true;\n          }\n        }\n        tokens = tokens.filter((x) => !x.isDiscarded);\n      }\n    }\n    return tokens;\n  }\n\n  innerTokenize(str) {\n    if (!this.dict) {\n      this.buildDictionary();\n    }\n    const potentialTokens = [];\n    let currentChains = [];\n    for (let i = 0; i < str.length; i += 1) {\n      const chr = str[i];\n      if (this.dict[chr]) {\n        currentChains.push({ node: this.dict, value: '' });\n      }\n      for (let j = 0; j < currentChains.length; j += 1) {\n        const chain = currentChains[j];\n        const nextNode = chain.node[chr];\n        if (nextNode) {\n          currentChains[j] = { node: nextNode, value: chain.value + chr };\n        } else {\n          currentChains[j] = undefined;\n        }\n        if (nextNode && nextNode.isLeaf) {\n          potentialTokens.push({\n            start: i - currentChains[j].value.length + 1,\n            length: currentChains[j].value.length,\n            end: i,\n            value: currentChains[j].value,\n          });\n        }\n      }\n      currentChains = currentChains.filter((x) => x);\n    }\n    const edges = this.reduceEdges(potentialTokens);\n    let index = 0;\n    const result = [];\n    for (let i = 0; i < edges.length; i += 1) {\n      const current = edges[i];\n      if (current.start > index) {\n        result.push(\n          ...str.slice(index, current.start).split(/[\\s,.!?;:([\\]'\"¡¿)/]+/)\n        );\n      }\n      result.push(current.value);\n      index = current.end + 1;\n    }\n    if (index < str.length) {\n      result.push(...str.slice(index).split(/[\\s,.!?;:([\\]'\"¡¿)/]+/));\n    }\n    return result;\n  }\n}\n\nmodule.exports = TokenizerTh;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}