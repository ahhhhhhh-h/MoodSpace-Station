{"ast":null,"code":"var _EmotionAnalyzer;\nexport class EmotionAnalyzer {\n  constructor() {\n    this.apiKey = '你的Moonshot_API_Key';\n    // 🔥 填你自己的API Key\n    this.apiUrl = 'https://api.moonshot.cn/v1/chat/completions';\n  }\n  static getInstance() {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n  async analyzeEmotion(text) {\n    try {\n      var _data$choices$, _data$choices$$messag, _data$choices$$messag2;\n      const prompt = `\n请判断下列中文内容的情绪类别，只返回：\n- positive（积极）\n- negative（消极）\n- received（中性）\n\n文本内容：\n\"${text}\"\n`;\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          model: 'moonshot-v1-8k',\n          messages: [{\n            role: 'user',\n            content: prompt\n          }],\n          temperature: 0.2\n        })\n      });\n      const data = await response.json();\n      const reply = (_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : (_data$choices$$messag2 = _data$choices$$messag.content) === null || _data$choices$$messag2 === void 0 ? void 0 : _data$choices$$messag2.trim().toLowerCase();\n      if (reply !== null && reply !== void 0 && reply.includes('positive')) return 'positive';\n      if (reply !== null && reply !== void 0 && reply.includes('negative')) return 'negative';\n      return 'received';\n    } catch (error) {\n      console.error('情绪识别出错:', error);\n      return 'received';\n    }\n  }\n}\n_EmotionAnalyzer = EmotionAnalyzer;\nEmotionAnalyzer.instance = void 0;","map":{"version":3,"names":["EmotionAnalyzer","constructor","apiKey","apiUrl","getInstance","instance","analyzeEmotion","text","_data$choices$","_data$choices$$messag","_data$choices$$messag2","prompt","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","data","json","reply","choices","message","trim","toLowerCase","includes","error","console","_EmotionAnalyzer"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/src/utils/EmotionAnalyzer.ts"],"sourcesContent":["import { EmotionType } from '../types';\n\nexport class EmotionAnalyzer {\n  private static instance: EmotionAnalyzer;\n  private apiKey: string = '你的Moonshot_API_Key'; // 🔥 填你自己的API Key\n  private apiUrl: string = 'https://api.moonshot.cn/v1/chat/completions';\n\n  private constructor() {}\n\n  public static getInstance(): EmotionAnalyzer {\n    if (!EmotionAnalyzer.instance) {\n      EmotionAnalyzer.instance = new EmotionAnalyzer();\n    }\n    return EmotionAnalyzer.instance;\n  }\n\n  public async analyzeEmotion(text: string): Promise<EmotionType> {\n    try {\n      const prompt = `\n请判断下列中文内容的情绪类别，只返回：\n- positive（积极）\n- negative（消极）\n- received（中性）\n\n文本内容：\n\"${text}\"\n`;\n\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify({\n          model: 'moonshot-v1-8k',\n          messages: [{ role: 'user', content: prompt }],\n          temperature: 0.2,\n        }),\n      });\n\n      const data = await response.json();\n      const reply = data.choices[0]?.message?.content?.trim().toLowerCase();\n\n      if (reply?.includes('positive')) return 'positive';\n      if (reply?.includes('negative')) return 'negative';\n      return 'received';\n    } catch (error) {\n      console.error('情绪识别出错:', error);\n      return 'received';\n    }\n  }\n}\n"],"mappings":";AAEA,OAAO,MAAMA,eAAe,CAAC;EAKnBC,WAAWA,CAAA,EAAG;IAAA,KAHdC,MAAM,GAAW,oBAAoB;IAAE;IAAA,KACvCC,MAAM,GAAW,6CAA6C;EAE/C;EAEvB,OAAcC,WAAWA,CAAA,EAAoB;IAC3C,IAAI,CAACJ,eAAe,CAACK,QAAQ,EAAE;MAC7BL,eAAe,CAACK,QAAQ,GAAG,IAAIL,eAAe,CAAC,CAAC;IAClD;IACA,OAAOA,eAAe,CAACK,QAAQ;EACjC;EAEA,MAAaC,cAAcA,CAACC,IAAY,EAAwB;IAC9D,IAAI;MAAA,IAAAC,cAAA,EAAAC,qBAAA,EAAAC,sBAAA;MACF,MAAMC,MAAM,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,GAAGJ,IAAI;AACP,CAAC;MAEK,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,IAAI,CAACV,MAAM,EAAE;QACxCW,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAU,IAAI,CAACb,MAAM;QACxC,CAAC;QACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAE,gBAAgB;UACvBC,QAAQ,EAAE,CAAC;YAAEC,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAEX;UAAO,CAAC,CAAC;UAC7CY,WAAW,EAAE;QACf,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClC,MAAMC,KAAK,IAAAlB,cAAA,GAAGgB,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,cAAAnB,cAAA,wBAAAC,qBAAA,GAAfD,cAAA,CAAiBoB,OAAO,cAAAnB,qBAAA,wBAAAC,sBAAA,GAAxBD,qBAAA,CAA0Ba,OAAO,cAAAZ,sBAAA,uBAAjCA,sBAAA,CAAmCmB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAErE,IAAIJ,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEK,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,UAAU;MAClD,IAAIL,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEK,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,UAAU;MAClD,OAAO,UAAU;IACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;MAC/B,OAAO,UAAU;IACnB;EACF;AACF;AAACE,gBAAA,GAlDYlC,eAAe;AAAfA,eAAe,CACXK,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}