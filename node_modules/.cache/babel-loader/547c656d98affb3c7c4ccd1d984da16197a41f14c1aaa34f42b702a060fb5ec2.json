{"ast":null,"code":"/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst {\n  Clonable\n} = require('@nlpjs/core');\nconst {\n  Language\n} = require('@nlpjs/language-min');\nconst DomainManager = require('./domain-manager');\nclass NluManager extends Clonable {\n  constructor(settings = {}, container) {\n    super({\n      settings: {},\n      container: settings.container || container\n    }, container);\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'nlu-manager';\n    }\n    this.registerDefault();\n    this.applySettings(this.settings, this.container.getConfiguration(this.settings.tag));\n    if (!this.container.get('Language')) {\n      this.container.register('Language', Language, false);\n    }\n    this.guesser = this.container.get('Language');\n    this.locales = [];\n    this.languageNames = {};\n    this.domainManagers = {};\n    this.intentDomains = {};\n    if (this.settings.locales) {\n      this.addLanguage(this.settings.locales);\n    }\n    this.applySettings(this, {\n      pipelineTrain: this.getPipeline(`${this.settings.tag}-train`),\n      pipelineProcess: this.getPipeline(`${this.settings.tag}-process`)\n    });\n  }\n  registerDefault() {\n    this.container.registerConfiguration('nlu-manager', {}, false);\n    this.container.registerPipeline('nlu-manager-train', ['.innerTrain'], false);\n  }\n  describeLanguage(locale, name) {\n    this.languageNames[locale] = {\n      locale,\n      name\n    };\n  }\n  addLanguage(srcLocales) {\n    if (srcLocales) {\n      const locales = Array.isArray(srcLocales) ? srcLocales : [srcLocales];\n      for (let i = 0; i < locales.length; i += 1) {\n        const locale = locales[i].substr(0, 2).toLowerCase();\n        if (!this.locales.includes(locale)) {\n          this.locales.push(locale);\n        }\n        if (!this.domainManagers[locale]) {\n          this.domainManagers[locale] = new DomainManager({\n            locale,\n            ...this.settings.domain,\n            useNoneFeature: this.settings.useNoneFeature,\n            trainByDomain: this.settings.trainByDomain\n          }, this.container);\n        }\n      }\n    }\n  }\n  removeLanguage(locales) {\n    if (Array.isArray(locales)) {\n      locales.forEach(locale => this.removeLanguage(locale));\n    } else {\n      delete this.domainManagers[locales];\n      const index = this.locales.indexOf(locales);\n      if (index !== -1) {\n        this.locales.splice(index, 1);\n      }\n    }\n  }\n  guessLanguage(srcInput) {\n    const input = srcInput;\n    const isString = typeof input === 'string';\n    if (this.locales.length === 1) {\n      if (isString) {\n        return this.locales[0];\n      }\n      [input.locale] = this.locales;\n      return input;\n    }\n    if (!input) {\n      return isString ? undefined : input;\n    }\n    if (!isString && input.locale) {\n      return input;\n    }\n    const utterance = isString ? input : input.utterance;\n    if (this.locales.length === 1) {\n      if (isString) {\n        return this.locales[0];\n      }\n      [input.locale] = this.locales;\n    }\n    const guess = this.guesser.guess(utterance, this.locales, 1);\n    const locale = guess && guess.length > 0 ? guess[0].alpha2 : undefined;\n    if (isString) {\n      return locale;\n    }\n    input.locale = locale;\n    return input;\n  }\n  assignDomain(srcLocale, srcIntent, srcDomain) {\n    const locale = srcDomain ? srcLocale.substr(0, 2).toLowerCase() : undefined;\n    const intent = srcDomain ? srcIntent : srcLocale;\n    const domain = srcDomain || srcIntent;\n    if (locale) {\n      if (!this.intentDomains[locale]) {\n        this.intentDomains[locale] = {};\n      }\n      this.intentDomains[locale][intent] = domain;\n    } else {\n      for (let i = 0; i < this.locales.length; i += 1) {\n        this.assignDomain(this.locales[i], intent, domain);\n      }\n    }\n  }\n  getIntentDomain(srcLocale, intent) {\n    const locale = srcLocale.substr(0, 2).toLowerCase();\n    if (!this.intentDomains[locale]) {\n      return 'default';\n    }\n    return this.intentDomains[locale][intent] || 'default';\n  }\n  getDomains() {\n    const result = {};\n    const locales = Object.keys(this.intentDomains);\n    for (let i = 0; i < locales.length; i += 1) {\n      const locale = locales[i];\n      result[locale] = {};\n      const intents = Object.keys(this.intentDomains[locale]);\n      for (let j = 0; j < intents.length; j += 1) {\n        const intent = intents[j];\n        const domain = this.intentDomains[locale][intent];\n        if (!result[locale][domain]) {\n          result[locale][domain] = [];\n        }\n        result[locale][domain].push(intent);\n      }\n    }\n    return result;\n  }\n  consolidateLocale(srcLocale, utterance) {\n    const locale = srcLocale ? srcLocale.substr(0, 2).toLowerCase() : this.guessLanguage(utterance);\n    if (!locale) {\n      throw new Error('Locale must be defined');\n    }\n    return locale;\n  }\n  consolidateManager(locale) {\n    const manager = this.domainManagers[locale];\n    if (!manager) {\n      throw new Error(`Domain Manager not found for locale ${locale}`);\n    }\n    return manager;\n  }\n  add(srcLocale, utterance, intent) {\n    const locale = this.consolidateLocale(srcLocale, utterance);\n    const manager = this.consolidateManager(locale);\n    const domain = this.getIntentDomain(locale, intent);\n    this.guesser.addExtraSentence(locale, utterance);\n    manager.add(domain, utterance, intent);\n  }\n  remove(srcLocale, utterance, intent) {\n    const locale = this.consolidateLocale(srcLocale, utterance);\n    const manager = this.consolidateManager(locale);\n    const domain = this.getIntentDomain(locale, intent);\n    manager.remove(domain, utterance, intent);\n  }\n  async innerTrain(settings) {\n    let locales = settings.locales || this.locales;\n    if (!Array.isArray(locales)) {\n      locales = [locales];\n    }\n    const promises = locales.filter(locale => this.domainManagers[locale]).map(locale => this.domainManagers[locale].train(settings.settings));\n    return Promise.all(promises);\n  }\n  async train(settings) {\n    const input = {\n      nluManager: this,\n      settings: this.applySettings(settings, this.settings)\n    };\n    delete input.settings.tag;\n    return this.runPipeline(input, this.pipelineTrain);\n  }\n  fillLanguage(srcInput) {\n    const input = srcInput;\n    input.languageGuessed = false;\n    if (!input.locale) {\n      input.locale = this.guessLanguage(input.utterance);\n      input.languageGuessed = true;\n    }\n    if (input.locale) {\n      input.localeIso2 = input.locale.substr(0, 2).toLowerCase();\n      input.language = (this.languageNames[input.localeIso2] || this.guesser.languagesAlpha2[input.localeIso2] || {}).name;\n    }\n    return input;\n  }\n  classificationsIsNone(classifications) {\n    if (classifications.length === 1) {\n      return false;\n    }\n    if (classifications.length === 0 || classifications[0].score === 0) {\n      return true;\n    }\n    return classifications[0].score === classifications[1].score;\n  }\n  checkIfIsNone(srcInput) {\n    const input = srcInput;\n    if (this.classificationsIsNone(input.classifications)) {\n      input.intent = 'None';\n      input.score = 1;\n    }\n    return input;\n  }\n  async innerClassify(srcInput) {\n    const input = srcInput;\n    const domain = this.domainManagers[input.localeIso2];\n    if (!domain) {\n      input.classifications = [];\n      input.domain = undefined;\n      input.intent = undefined;\n      input.score = undefined;\n      return input;\n    }\n    const classifications = await domain.process(srcInput);\n    input.classifications = classifications.classifications.sort((a, b) => b.score - a.score);\n    if (input.classifications.length === 0) {\n      input.classifications.push({\n        intent: 'None',\n        score: 1\n      });\n    }\n    input.intent = input.classifications[0].intent;\n    input.score = input.classifications[0].score;\n    if (input.intent === 'None') {\n      classifications.domain = 'default';\n    } else if (classifications.domain === 'default') {\n      input.domain = this.getIntentDomain(input.locale, input.intent);\n    } else {\n      input.domain = classifications.domain;\n    }\n    return input;\n  }\n  async defaultPipelineProcess(input) {\n    let output = await this.fillLanguage(input);\n    output = await this.innerClassify(output);\n    output = await this.checkIfIsNone(output);\n    delete output.settings;\n    delete output.classification;\n    return output;\n  }\n  process(locale, utterance, domain, settings) {\n    const input = typeof locale === 'object' ? locale : {\n      locale: utterance === undefined ? undefined : locale,\n      utterance: utterance === undefined ? locale : utterance,\n      domain,\n      settings: settings || this.settings\n    };\n    if (this.pipelineProcess) {\n      return this.runPipeline(input, this.pipelineProcess);\n    }\n    return this.defaultPipelineProcess(input);\n  }\n  toJSON() {\n    const result = {\n      settings: this.settings,\n      locales: this.locales,\n      languageNames: this.languageNames,\n      domainManagers: {},\n      intentDomains: this.intentDomains,\n      extraSentences: this.guesser.extraSentences.slice(0)\n    };\n    delete result.settings.container;\n    const keys = Object.keys(this.domainManagers);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      result.domainManagers[key] = this.domainManagers[key].toJSON();\n    }\n    return result;\n  }\n  fromJSON(json) {\n    this.applySettings(this.settings, json.settings);\n    for (let i = 0; i < json.locales.length; i += 1) {\n      this.addLanguage(json.locales[i]);\n    }\n    this.languageNames = json.languageNames;\n    this.intentDomains = json.intentDomains;\n    const keys = Object.keys(json.domainManagers);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      this.domainManagers[key].fromJSON(json.domainManagers[key]);\n    }\n    for (let i = 0; i < json.extraSentences.length; i += 1) {\n      const sentence = json.extraSentences[i];\n      this.guesser.addExtraSentence(sentence[0], sentence[1]);\n    }\n  }\n}\nmodule.exports = NluManager;","map":{"version":3,"names":["Clonable","require","Language","DomainManager","NluManager","constructor","settings","container","applySettings","tag","registerDefault","getConfiguration","get","register","guesser","locales","languageNames","domainManagers","intentDomains","addLanguage","pipelineTrain","getPipeline","pipelineProcess","registerConfiguration","registerPipeline","describeLanguage","locale","name","srcLocales","Array","isArray","i","length","substr","toLowerCase","includes","push","domain","useNoneFeature","trainByDomain","removeLanguage","forEach","index","indexOf","splice","guessLanguage","srcInput","input","isString","undefined","utterance","guess","alpha2","assignDomain","srcLocale","srcIntent","srcDomain","intent","getIntentDomain","getDomains","result","Object","keys","intents","j","consolidateLocale","Error","consolidateManager","manager","add","addExtraSentence","remove","innerTrain","promises","filter","map","train","Promise","all","nluManager","runPipeline","fillLanguage","languageGuessed","localeIso2","language","languagesAlpha2","classificationsIsNone","classifications","score","checkIfIsNone","innerClassify","process","sort","a","b","defaultPipelineProcess","output","classification","toJSON","extraSentences","slice","key","fromJSON","json","sentence","module","exports"],"sources":["/Users/zyq/Desktop/大二下/暑期实习/moonshot project/node_modules/@nlpjs/nlu/src/nlu-manager.js"],"sourcesContent":["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst { Clonable } = require('@nlpjs/core');\nconst { Language } = require('@nlpjs/language-min');\nconst DomainManager = require('./domain-manager');\n\nclass NluManager extends Clonable {\n  constructor(settings = {}, container) {\n    super(\n      {\n        settings: {},\n        container: settings.container || container,\n      },\n      container\n    );\n    this.applySettings(this.settings, settings);\n    if (!this.settings.tag) {\n      this.settings.tag = 'nlu-manager';\n    }\n    this.registerDefault();\n    this.applySettings(\n      this.settings,\n      this.container.getConfiguration(this.settings.tag)\n    );\n    if (!this.container.get('Language')) {\n      this.container.register('Language', Language, false);\n    }\n    this.guesser = this.container.get('Language');\n    this.locales = [];\n    this.languageNames = {};\n    this.domainManagers = {};\n    this.intentDomains = {};\n    if (this.settings.locales) {\n      this.addLanguage(this.settings.locales);\n    }\n    this.applySettings(this, {\n      pipelineTrain: this.getPipeline(`${this.settings.tag}-train`),\n      pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),\n    });\n  }\n\n  registerDefault() {\n    this.container.registerConfiguration('nlu-manager', {}, false);\n    this.container.registerPipeline(\n      'nlu-manager-train',\n      ['.innerTrain'],\n      false\n    );\n  }\n\n  describeLanguage(locale, name) {\n    this.languageNames[locale] = { locale, name };\n  }\n\n  addLanguage(srcLocales) {\n    if (srcLocales) {\n      const locales = Array.isArray(srcLocales) ? srcLocales : [srcLocales];\n      for (let i = 0; i < locales.length; i += 1) {\n        const locale = locales[i].substr(0, 2).toLowerCase();\n        if (!this.locales.includes(locale)) {\n          this.locales.push(locale);\n        }\n        if (!this.domainManagers[locale]) {\n          this.domainManagers[locale] = new DomainManager(\n            {\n              locale,\n              ...this.settings.domain,\n              useNoneFeature: this.settings.useNoneFeature,\n              trainByDomain: this.settings.trainByDomain,\n            },\n            this.container\n          );\n        }\n      }\n    }\n  }\n\n  removeLanguage(locales) {\n    if (Array.isArray(locales)) {\n      locales.forEach((locale) => this.removeLanguage(locale));\n    } else {\n      delete this.domainManagers[locales];\n      const index = this.locales.indexOf(locales);\n      if (index !== -1) {\n        this.locales.splice(index, 1);\n      }\n    }\n  }\n\n  guessLanguage(srcInput) {\n    const input = srcInput;\n    const isString = typeof input === 'string';\n    if (this.locales.length === 1) {\n      if (isString) {\n        return this.locales[0];\n      }\n      [input.locale] = this.locales;\n      return input;\n    }\n    if (!input) {\n      return isString ? undefined : input;\n    }\n    if (!isString && input.locale) {\n      return input;\n    }\n    const utterance = isString ? input : input.utterance;\n    if (this.locales.length === 1) {\n      if (isString) {\n        return this.locales[0];\n      }\n      [input.locale] = this.locales;\n    }\n    const guess = this.guesser.guess(utterance, this.locales, 1);\n    const locale = guess && guess.length > 0 ? guess[0].alpha2 : undefined;\n    if (isString) {\n      return locale;\n    }\n    input.locale = locale;\n    return input;\n  }\n\n  assignDomain(srcLocale, srcIntent, srcDomain) {\n    const locale = srcDomain ? srcLocale.substr(0, 2).toLowerCase() : undefined;\n    const intent = srcDomain ? srcIntent : srcLocale;\n    const domain = srcDomain || srcIntent;\n    if (locale) {\n      if (!this.intentDomains[locale]) {\n        this.intentDomains[locale] = {};\n      }\n      this.intentDomains[locale][intent] = domain;\n    } else {\n      for (let i = 0; i < this.locales.length; i += 1) {\n        this.assignDomain(this.locales[i], intent, domain);\n      }\n    }\n  }\n\n  getIntentDomain(srcLocale, intent) {\n    const locale = srcLocale.substr(0, 2).toLowerCase();\n    if (!this.intentDomains[locale]) {\n      return 'default';\n    }\n    return this.intentDomains[locale][intent] || 'default';\n  }\n\n  getDomains() {\n    const result = {};\n    const locales = Object.keys(this.intentDomains);\n    for (let i = 0; i < locales.length; i += 1) {\n      const locale = locales[i];\n      result[locale] = {};\n      const intents = Object.keys(this.intentDomains[locale]);\n      for (let j = 0; j < intents.length; j += 1) {\n        const intent = intents[j];\n        const domain = this.intentDomains[locale][intent];\n        if (!result[locale][domain]) {\n          result[locale][domain] = [];\n        }\n        result[locale][domain].push(intent);\n      }\n    }\n    return result;\n  }\n\n  consolidateLocale(srcLocale, utterance) {\n    const locale = srcLocale\n      ? srcLocale.substr(0, 2).toLowerCase()\n      : this.guessLanguage(utterance);\n    if (!locale) {\n      throw new Error('Locale must be defined');\n    }\n    return locale;\n  }\n\n  consolidateManager(locale) {\n    const manager = this.domainManagers[locale];\n    if (!manager) {\n      throw new Error(`Domain Manager not found for locale ${locale}`);\n    }\n    return manager;\n  }\n\n  add(srcLocale, utterance, intent) {\n    const locale = this.consolidateLocale(srcLocale, utterance);\n    const manager = this.consolidateManager(locale);\n    const domain = this.getIntentDomain(locale, intent);\n    this.guesser.addExtraSentence(locale, utterance);\n    manager.add(domain, utterance, intent);\n  }\n\n  remove(srcLocale, utterance, intent) {\n    const locale = this.consolidateLocale(srcLocale, utterance);\n    const manager = this.consolidateManager(locale);\n    const domain = this.getIntentDomain(locale, intent);\n    manager.remove(domain, utterance, intent);\n  }\n\n  async innerTrain(settings) {\n    let locales = settings.locales || this.locales;\n    if (!Array.isArray(locales)) {\n      locales = [locales];\n    }\n    const promises = locales\n      .filter((locale) => this.domainManagers[locale])\n      .map((locale) => this.domainManagers[locale].train(settings.settings));\n    return Promise.all(promises);\n  }\n\n  async train(settings) {\n    const input = {\n      nluManager: this,\n      settings: this.applySettings(settings, this.settings),\n    };\n    delete input.settings.tag;\n    return this.runPipeline(input, this.pipelineTrain);\n  }\n\n  fillLanguage(srcInput) {\n    const input = srcInput;\n    input.languageGuessed = false;\n    if (!input.locale) {\n      input.locale = this.guessLanguage(input.utterance);\n      input.languageGuessed = true;\n    }\n    if (input.locale) {\n      input.localeIso2 = input.locale.substr(0, 2).toLowerCase();\n      input.language = (\n        this.languageNames[input.localeIso2] ||\n        this.guesser.languagesAlpha2[input.localeIso2] ||\n        {}\n      ).name;\n    }\n    return input;\n  }\n\n  classificationsIsNone(classifications) {\n    if (classifications.length === 1) {\n      return false;\n    }\n    if (classifications.length === 0 || classifications[0].score === 0) {\n      return true;\n    }\n    return classifications[0].score === classifications[1].score;\n  }\n\n  checkIfIsNone(srcInput) {\n    const input = srcInput;\n    if (this.classificationsIsNone(input.classifications)) {\n      input.intent = 'None';\n      input.score = 1;\n    }\n    return input;\n  }\n\n  async innerClassify(srcInput) {\n    const input = srcInput;\n    const domain = this.domainManagers[input.localeIso2];\n    if (!domain) {\n      input.classifications = [];\n      input.domain = undefined;\n      input.intent = undefined;\n      input.score = undefined;\n      return input;\n    }\n    const classifications = await domain.process(srcInput);\n    input.classifications = classifications.classifications.sort(\n      (a, b) => b.score - a.score\n    );\n    if (input.classifications.length === 0) {\n      input.classifications.push({ intent: 'None', score: 1 });\n    }\n    input.intent = input.classifications[0].intent;\n    input.score = input.classifications[0].score;\n    if (input.intent === 'None') {\n      classifications.domain = 'default';\n    } else if (classifications.domain === 'default') {\n      input.domain = this.getIntentDomain(input.locale, input.intent);\n    } else {\n      input.domain = classifications.domain;\n    }\n\n    return input;\n  }\n\n  async defaultPipelineProcess(input) {\n    let output = await this.fillLanguage(input);\n    output = await this.innerClassify(output);\n    output = await this.checkIfIsNone(output);\n    delete output.settings;\n    delete output.classification;\n    return output;\n  }\n\n  process(locale, utterance, domain, settings) {\n    const input =\n      typeof locale === 'object'\n        ? locale\n        : {\n            locale: utterance === undefined ? undefined : locale,\n            utterance: utterance === undefined ? locale : utterance,\n            domain,\n            settings: settings || this.settings,\n          };\n    if (this.pipelineProcess) {\n      return this.runPipeline(input, this.pipelineProcess);\n    }\n    return this.defaultPipelineProcess(input);\n  }\n\n  toJSON() {\n    const result = {\n      settings: this.settings,\n      locales: this.locales,\n      languageNames: this.languageNames,\n      domainManagers: {},\n      intentDomains: this.intentDomains,\n      extraSentences: this.guesser.extraSentences.slice(0),\n    };\n    delete result.settings.container;\n    const keys = Object.keys(this.domainManagers);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      result.domainManagers[key] = this.domainManagers[key].toJSON();\n    }\n    return result;\n  }\n\n  fromJSON(json) {\n    this.applySettings(this.settings, json.settings);\n    for (let i = 0; i < json.locales.length; i += 1) {\n      this.addLanguage(json.locales[i]);\n    }\n    this.languageNames = json.languageNames;\n    this.intentDomains = json.intentDomains;\n\n    const keys = Object.keys(json.domainManagers);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      this.domainManagers[key].fromJSON(json.domainManagers[key]);\n    }\n    for (let i = 0; i < json.extraSentences.length; i += 1) {\n      const sentence = json.extraSentences[i];\n      this.guesser.addExtraSentence(sentence[0], sentence[1]);\n    }\n  }\n}\n\nmodule.exports = NluManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}